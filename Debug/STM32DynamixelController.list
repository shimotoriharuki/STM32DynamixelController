
STM32DynamixelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009674  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009890  08009890  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009898  08009898  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080098ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000070  0800991c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  0800991c  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000348f  00000000  00000000  00048bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  0004c090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  0004d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a80  00000000  00000000  0004ee30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4b1  00000000  00000000  000748b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df96b  00000000  00000000  00082d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001626cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  00162748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009824 	.word	0x08009824

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08009824 	.word	0x08009824

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b972 	b.w	8000cf0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4688      	mov	r8, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	d967      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0720 	rsb	r7, r2, #32
 8000a42:	fa01 f302 	lsl.w	r3, r1, r2
 8000a46:	fa20 f707 	lsr.w	r7, r0, r7
 8000a4a:	4095      	lsls	r5, r2
 8000a4c:	ea47 0803 	orr.w	r8, r7, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a5c:	fa1f fc85 	uxth.w	ip, r5
 8000a60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a68:	fb07 f10c 	mul.w	r1, r7, ip
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18eb      	adds	r3, r5, r3
 8000a72:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a76:	f080 811b 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8118 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000a80:	3f02      	subs	r7, #2
 8000a82:	442b      	add	r3, r5
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a98:	45a4      	cmp	ip, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	192c      	adds	r4, r5, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000aac:	3802      	subs	r0, #2
 8000aae:	442c      	add	r4, r5
 8000ab0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab4:	eba4 040c 	sub.w	r4, r4, ip
 8000ab8:	2700      	movs	r7, #0
 8000aba:	b11e      	cbz	r6, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xbe>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80eb 	beq.w	8000caa <__udivmoddi4+0x286>
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ada:	4638      	mov	r0, r7
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f783 	clz	r7, r3
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d147      	bne.n	8000b7a <__udivmoddi4+0x156>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd0>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fa 	bhi.w	8000ce8 <__udivmoddi4+0x2c4>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xe8>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 808f 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b16:	1b49      	subs	r1, r1, r5
 8000b18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1c:	fa1f f885 	uxth.w	r8, r5
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb08 f10c 	mul.w	r1, r8, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b46:	4684      	mov	ip, r0
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	b2a3      	uxth	r3, r4
 8000b4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b58:	fb08 f800 	mul.w	r8, r8, r0
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x14c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x14a>
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	f200 80b6 	bhi.w	8000cda <__udivmoddi4+0x2b6>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	eba4 0408 	sub.w	r4, r4, r8
 8000b74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b78:	e79f      	b.n	8000aba <__udivmoddi4+0x96>
 8000b7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7e:	40bb      	lsls	r3, r7
 8000b80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b88:	fa01 f407 	lsl.w	r4, r1, r7
 8000b8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b98:	4325      	orrs	r5, r4
 8000b9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9e:	0c2c      	lsrs	r4, r5, #16
 8000ba0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba4:	fa1f fa8e 	uxth.w	sl, lr
 8000ba8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bac:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bc4:	f080 8087 	bcs.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f240 8084 	bls.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bce:	f1a9 0902 	sub.w	r9, r9, #2
 8000bd2:	4473      	add	r3, lr
 8000bd4:	1b1b      	subs	r3, r3, r4
 8000bd6:	b2ad      	uxth	r5, r5
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be8:	45a2      	cmp	sl, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf4:	d26b      	bcs.n	8000cce <__udivmoddi4+0x2aa>
 8000bf6:	45a2      	cmp	sl, r4
 8000bf8:	d969      	bls.n	8000cce <__udivmoddi4+0x2aa>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4474      	add	r4, lr
 8000bfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c02:	fba0 8902 	umull	r8, r9, r0, r2
 8000c06:	eba4 040a 	sub.w	r4, r4, sl
 8000c0a:	454c      	cmp	r4, r9
 8000c0c:	46c2      	mov	sl, r8
 8000c0e:	464b      	mov	r3, r9
 8000c10:	d354      	bcc.n	8000cbc <__udivmoddi4+0x298>
 8000c12:	d051      	beq.n	8000cb8 <__udivmoddi4+0x294>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d069      	beq.n	8000cec <__udivmoddi4+0x2c8>
 8000c18:	ebb1 050a 	subs.w	r5, r1, sl
 8000c1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	40fc      	lsrs	r4, r7
 8000c28:	ea4c 0505 	orr.w	r5, ip, r5
 8000c2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c30:	2700      	movs	r7, #0
 8000c32:	e747      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f703 	lsr.w	r7, r0, r3
 8000c3c:	4095      	lsls	r5, r2
 8000c3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c42:	fa21 f303 	lsr.w	r3, r1, r3
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	0c01      	lsrs	r1, r0, #16
 8000c4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c52:	fa1f f885 	uxth.w	r8, r5
 8000c56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5e:	fb07 f308 	mul.w	r3, r7, r8
 8000c62:	428b      	cmp	r3, r1
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x256>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c70:	d22f      	bcs.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d92d      	bls.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c76:	3f02      	subs	r7, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	b281      	uxth	r1, r0
 8000c7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb00 f308 	mul.w	r3, r0, r8
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x27e>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c98:	d217      	bcs.n	8000cca <__udivmoddi4+0x2a6>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d915      	bls.n	8000cca <__udivmoddi4+0x2a6>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1ac9      	subs	r1, r1, r3
 8000ca4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca8:	e73b      	b.n	8000b22 <__udivmoddi4+0xfe>
 8000caa:	4637      	mov	r7, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e709      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	e6e7      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb8:	4541      	cmp	r1, r8
 8000cba:	d2ab      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	e7a4      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000cca:	4660      	mov	r0, ip
 8000ccc:	e7e9      	b.n	8000ca2 <__udivmoddi4+0x27e>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e795      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd2:	4667      	mov	r7, ip
 8000cd4:	e7d1      	b.n	8000c7a <__udivmoddi4+0x256>
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	e77c      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	442c      	add	r4, r5
 8000cde:	e747      	b.n	8000b70 <__udivmoddi4+0x14c>
 8000ce0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce4:	442b      	add	r3, r5
 8000ce6:	e72f      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce8:	4638      	mov	r0, r7
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xda>
 8000cec:	4637      	mov	r7, r6
 8000cee:	e6e9      	b.n	8000ac4 <__udivmoddi4+0xa0>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_ZNKSt14_Bit_referencecvbEv>:

    _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }

    operator bool() const _GLIBCXX_NOEXCEPT
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf14      	ite	ne
 8000d4a:	2301      	movne	r3, #1
 8000d4c:	2300      	moveq	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d009      	beq.n	8000d82 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6819      	ldr	r1, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e009      	b.n	8000d96 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
      return *this;
 8000d96:	687b      	ldr	r3, [r7, #4]
    }
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_ZNSt14_Bit_referenceaSERKS_>:

    _Bit_reference&
    operator=(const _Bit_reference& __x) _GLIBCXX_NOEXCEPT
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    { return *this = bool(__x); }
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f7ff ffbf 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ffcf 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_ZSt4swapSt14_Bit_referenceS_>:
  };

#if __cplusplus >= 201103L
  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	f107 0408 	add.w	r4, r7, #8
 8000dd2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	e881 000c 	stmia.w	r1, {r2, r3}
    bool __tmp = __x;
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ffa6 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8000de6:	4603      	mov	r3, r0
 8000de8:	75fb      	strb	r3, [r7, #23]
    __x = __y;
 8000dea:	463a      	mov	r2, r7
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ffd6 	bl	8000da4 <_ZNSt14_Bit_referenceaSERKS_>
    __y = __tmp;
 8000df8:	7dfa      	ldrb	r2, [r7, #23]
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffac 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
  }
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    void
    _M_bump_up()
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	1c59      	adds	r1, r3, #1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6051      	str	r1, [r2, #4]
 8000e44:	2b1f      	cmp	r3, #31
 8000e46:	bf0c      	ite	eq
 8000e48:	2301      	moveq	r3, #1
 8000e4a:	2300      	movne	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
	}
    }
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_ZNSt18_Bit_iterator_base12_M_bump_downEv>:

    void
    _M_bump_down()
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset-- == 0)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	1e59      	subs	r1, r3, #1
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6051      	str	r1, [r2, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <_ZNSt18_Bit_iterator_base12_M_bump_downEv+0x30>
	{
	  _M_offset = int(_S_word_bit) - 1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	221f      	movs	r2, #31
 8000e92:	605a      	str	r2, [r3, #4]
	  --_M_p;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1f1a      	subs	r2, r3, #4
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
	}
    }
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_ZNSt18_Bit_iterator_base7_M_incrEi>:

    void
    _M_incr(ptrdiff_t __i)
 8000eaa:	b480      	push	{r7}
 8000eac:	b085      	sub	sp, #20
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	da00      	bge.n	8000eca <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8000ec8:	331f      	adds	r3, #31
 8000eca:	115b      	asrs	r3, r3, #5
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	441a      	add	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	425a      	negs	r2, r3
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	f002 021f 	and.w	r2, r2, #31
 8000ee0:	bf58      	it	pl
 8000ee2:	4253      	negpl	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	da07      	bge.n	8000efc <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3320      	adds	r3, #32
 8000ef0:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	1f1a      	subs	r2, r3, #4
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
    }
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_ZNKSt18_Bit_iterator_baseeqERKS_>:

    bool
    operator==(const _Bit_iterator_base& __i) const
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d107      	bne.n	8000f34 <_ZNKSt18_Bit_iterator_baseeqERKS_+0x26>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d101      	bne.n	8000f34 <_ZNKSt18_Bit_iterator_baseeqERKS_+0x26>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <_ZNKSt18_Bit_iterator_baseeqERKS_+0x28>
 8000f34:	2300      	movs	r3, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_ZNKSt18_Bit_iterator_baseneERKS_>:
      return _M_p < __i._M_p
	     || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
    { return !(*this == __i); }
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffdd 	bl	8000f0e <_ZNKSt18_Bit_iterator_baseeqERKS_>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f083 0301 	eor.w	r3, r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>:
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	109b      	asrs	r3, r3, #2
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	461a      	mov	r2, r3
	    + __x._M_offset - __y._M_offset);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	441a      	add	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	1ad3      	subs	r3, r2, r3
  }
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZNSt13_Bit_iteratorC1Ev>:
  {
    typedef _Bit_reference  reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff30 	bl	8000e0c <_ZNSt18_Bit_iterator_baseC1EPmj>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff1f 	bl	8000e0c <_ZNSt18_Bit_iterator_baseC1EPmj>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fe8a 	bl	8000d0c <_ZNSt14_Bit_referenceC1EPmm>
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZNSt13_Bit_iteratorppEv>:

    iterator&
    operator++()
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff11 	bl	8000e32 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001010:	687b      	ldr	r3, [r7, #4]
    }
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_ZNSt13_Bit_iteratormmEv>:
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
    {
      _M_bump_down();
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff22 	bl	8000e6e <_ZNSt18_Bit_iterator_base12_M_bump_downEv>
      return *this;
 800102a:	687b      	ldr	r3, [r7, #4]
    }
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff31 	bl	8000eaa <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001048:	687b      	ldr	r3, [r7, #4]
    }
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZNSt13_Bit_iteratormIEi>:

    iterator&
    operator-=(difference_type __i)
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
    {
      *this += -__i;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	425b      	negs	r3, r3
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffe6 	bl	8001034 <_ZNSt13_Bit_iteratorpLEi>
      return *this;
 8001068:	687b      	ldr	r3, [r7, #4]
    }
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZNKSt13_Bit_iteratorplEi>:

    iterator
    operator+(difference_type __i) const
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = *this;
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001088:	e883 0003 	stmia.w	r3, {r0, r1}
      return __tmp += __i;
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffce 	bl	8001034 <_ZNSt13_Bit_iteratorpLEi>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZNKSt13_Bit_iteratormiEi>:

    iterator
    operator-(difference_type __i) const
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = *this;
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c2:	e883 0003 	stmia.w	r3, {r0, r1}
      return __tmp -= __i;
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ffc0 	bl	8001052 <_ZNSt13_Bit_iteratormIEi>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010da:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZNSt19_Bit_const_iteratorC1EPmj>:
    typedef const bool*          pointer;
    typedef _Bit_const_iterator  const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe87 	bl	8000e0c <_ZNSt18_Bit_iterator_baseC1EPmj>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>:

    _Bit_const_iterator(const _Bit_iterator& __x)
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	461a      	mov	r2, r3
 800111e:	f7ff fe75 	bl	8000e0c <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZNKSt19_Bit_const_iterator13_M_const_castEv>:

    _Bit_iterator
    _M_const_cast() const
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    { return _Bit_iterator(_M_p, _M_offset); }
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff38 	bl	8000fb6 <_ZNSt13_Bit_iteratorC1EPmj>
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZNKSt19_Bit_const_iteratordeEv>:

    const_reference
    operator*() const
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    { return _Bit_reference(_M_p, 1UL << _M_offset); }
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fdd0 	bl	8000d0c <_ZNSt14_Bit_referenceC1EPmm>
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fdde 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZNSt19_Bit_const_iteratorppEv>:

    const_iterator&
    operator++()
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fe51 	bl	8000e32 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001190:	687b      	ldr	r3, [r7, #4]
    }
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>:
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
 800119a:	b590      	push	{r4, r7, lr}
 800119c:	b087      	sub	sp, #28
 800119e:	af00      	add	r7, sp, #0
 80011a0:	f107 0408 	add.w	r4, r7, #8
 80011a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80011a8:	4639      	mov	r1, r7
 80011aa:	e881 000c 	stmia.w	r1, {r2, r3}
    for (; __first != __last; ++__first)
 80011ae:	463a      	mov	r2, r7
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fec3 	bl	8000f42 <_ZNKSt18_Bit_iterator_baseneERKS_>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d015      	beq.n	80011ee <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b+0x54>
      *__first = __x;
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	f107 0208 	add.w	r2, r7, #8
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff03 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 80011d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fdbd 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
    for (; __first != __last; ++__first)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff0a 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
 80011ec:	e7df      	b.n	80011ae <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b+0x14>
  }
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}

080011f6 <_ZSt4fillSt13_Bit_iteratorS_RKb>:

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
 80011f6:	b590      	push	{r4, r7, lr}
 80011f8:	b08d      	sub	sp, #52	; 0x34
 80011fa:	af02      	add	r7, sp, #8
 80011fc:	f107 0408 	add.w	r4, r7, #8
 8001200:	e884 0003 	stmia.w	r4, {r0, r1}
 8001204:	4639      	mov	r1, r7
 8001206:	e881 000c 	stmia.w	r1, {r2, r3}
    if (__first._M_p != __last._M_p)
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d035      	beq.n	800127e <_ZSt4fillSt13_Bit_iteratorS_RKb+0x88>
      {
	std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1d18      	adds	r0, r3, #4
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <_ZSt4fillSt13_Bit_iteratorS_RKb+0x30>
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e000      	b.n	8001228 <_ZSt4fillSt13_Bit_iteratorS_RKb+0x32>
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	461a      	mov	r2, r3
 8001230:	f000 fab7 	bl	80017a2 <_ZSt4fillIPmiEvT_S1_RKT0_>
	__fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1d19      	adds	r1, r3, #4
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	2200      	movs	r2, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff feb9 	bl	8000fb6 <_ZNSt13_Bit_iteratorC1EPmj>
 8001244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	cb0c      	ldmia	r3, {r2, r3}
 8001250:	f107 0108 	add.w	r1, r7, #8
 8001254:	c903      	ldmia	r1, {r0, r1}
 8001256:	f7ff ffa0 	bl	800119a <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>
	__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	2200      	movs	r2, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fea7 	bl	8000fb6 <_ZNSt13_Bit_iteratorC1EPmj>
 8001268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	463b      	mov	r3, r7
 8001270:	cb0c      	ldmia	r3, {r2, r3}
 8001272:	f107 0120 	add.w	r1, r7, #32
 8001276:	c903      	ldmia	r1, {r0, r1}
 8001278:	f7ff ff8f 	bl	800119a <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>
      }
    else
      __fill_bvector(__first, __last, __x);
  }
 800127c:	e009      	b.n	8001292 <_ZSt4fillSt13_Bit_iteratorS_RKb+0x9c>
      __fill_bvector(__first, __last, __x);
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	463b      	mov	r3, r7
 8001286:	cb0c      	ldmia	r3, {r2, r3}
 8001288:	f107 0108 	add.w	r1, r7, #8
 800128c:	c903      	ldmia	r1, {r0, r1}
 800128e:	f7ff ff84 	bl	800119a <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>
  }
 8001292:	bf00      	nop
 8001294:	372c      	adds	r7, #44	; 0x2c
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}

0800129a <_ZN7BufDataC1Et>:

/* ----private----*/


/* ----public-----*/
BufData::BufData(uint16_t buf_length) : buf_length_(buf_length), send_idx_(0), read_pointer_idx_(0), no_receive_flag_idx_(0)
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3304      	adds	r3, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fa8d 	bl	80017d0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	821a      	strh	r2, [r3, #16]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3314      	adds	r3, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fa92 	bl	80017ea <_ZNSt6vectorIPhSaIS0_EEC1Ev>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3320      	adds	r3, #32
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fa9a 	bl	8001804 <_ZNSt6vectorItSaItEEC1Ev>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3330      	adds	r3, #48	; 0x30
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fa9f 	bl	800181e <_ZNSt6vectorIbSaIbEEC1Ev>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
{
	send_buf_.resize(buf_length_);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1d1a      	adds	r2, r3, #4
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4610      	mov	r0, r2
 80012f4:	f000 faa0 	bl	8001838 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj>
	read_pointer_buf_.resize(buf_length_);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f103 0214 	add.w	r2, r3, #20
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4610      	mov	r0, r2
 8001306:	f000 facf 	bl	80018a8 <_ZNSt6vectorIPhSaIS0_EE6resizeEj>
	read_pointer_length_buf_.resize(buf_length_);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f103 0220 	add.w	r2, r3, #32
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f000 fafb 	bl	8001912 <_ZNSt6vectorItSaItEE6resizeEj>
	no_receive_flag_buf_.resize(buf_length_);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	f000 fb27 	bl	800197c <_ZNSt6vectorIbSaIbEE6resizeEjb>

}
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZN7BufData10setSendBufEPht>:

void BufData::setSendBuf(uint8_t *data, uint16_t send_length)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	4613      	mov	r3, r2
 8001344:	80fb      	strh	r3, [r7, #6]
	send_buf_[send_idx_].resize(send_length);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1d1a      	adds	r2, r3, #4
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8a1b      	ldrh	r3, [r3, #16]
 800134e:	4619      	mov	r1, r3
 8001350:	4610      	mov	r0, r2
 8001352:	f000 fb5f 	bl	8001a14 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8001356:	4602      	mov	r2, r0
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f000 fb6c 	bl	8001a3a <_ZNSt6vectorIhSaIhEE6resizeEj>
	for(uint16_t i = 0; i < send_length; i++){
 8001362:	2300      	movs	r3, #0
 8001364:	82fb      	strh	r3, [r7, #22]
 8001366:	8afa      	ldrh	r2, [r7, #22]
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	429a      	cmp	r2, r3
 800136c:	d22c      	bcs.n	80013c8 <_ZN7BufData10setSendBufEPht+0x90>
		send_buf_[send_idx_][i] = data[i];
 800136e:	8afb      	ldrh	r3, [r7, #22]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	18d4      	adds	r4, r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1d1a      	adds	r2, r3, #4
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8a1b      	ldrh	r3, [r3, #16]
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f000 fb48 	bl	8001a14 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8001384:	4602      	mov	r2, r0
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	4619      	mov	r1, r3
 800138a:	4610      	mov	r0, r2
 800138c:	f000 fb89 	bl	8001aa2 <_ZNSt6vectorIhSaIhEEixEj>
 8001390:	4603      	mov	r3, r0
 8001392:	7822      	ldrb	r2, [r4, #0]
 8001394:	701a      	strb	r2, [r3, #0]
		mon_send_buf[mon_send_buf_idx] = data[i];
 8001396:	8afb      	ldrh	r3, [r7, #22]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_ZN7BufData10setSendBufEPht+0xb8>)
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	7819      	ldrb	r1, [r3, #0]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <_ZN7BufData10setSendBufEPht+0xbc>)
 80013a4:	5499      	strb	r1, [r3, r2]
		mon_send_buf_idx++;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <_ZN7BufData10setSendBufEPht+0xb8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_ZN7BufData10setSendBufEPht+0xb8>)
 80013b0:	801a      	strh	r2, [r3, #0]
		if(mon_send_buf_idx >= 256) mon_send_buf_idx = 0;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <_ZN7BufData10setSendBufEPht+0xb8>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2bff      	cmp	r3, #255	; 0xff
 80013b8:	d902      	bls.n	80013c0 <_ZN7BufData10setSendBufEPht+0x88>
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <_ZN7BufData10setSendBufEPht+0xb8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < send_length; i++){
 80013c0:	8afb      	ldrh	r3, [r7, #22]
 80013c2:	3301      	adds	r3, #1
 80013c4:	82fb      	strh	r3, [r7, #22]
 80013c6:	e7ce      	b.n	8001366 <_ZN7BufData10setSendBufEPht+0x2e>
	}

	send_idx_++;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8a1b      	ldrh	r3, [r3, #16]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	821a      	strh	r2, [r3, #16]
	if(send_idx_ >= buf_length_) send_idx_ = 0;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8a1a      	ldrh	r2, [r3, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d302      	bcc.n	80013e6 <_ZN7BufData10setSendBufEPht+0xae>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	821a      	strh	r2, [r3, #16]

}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd90      	pop	{r4, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000018c 	.word	0x2000018c
 80013f4:	2000008c 	.word	0x2000008c

080013f8 <_ZN7BufData21getFirstSendBufLengthEv>:

uint16_t BufData::getFirstSendBufLength()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	return send_buf_[0].size();
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fb04 	bl	8001a14 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fb56 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001414:	4603      	mov	r3, r0
 8001416:	b29b      	uxth	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN7BufData15getFirstSendBufEPht>:

void BufData::getFirstSendBuf(uint8_t *data, uint16_t length)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < length; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	82fb      	strh	r3, [r7, #22]
 8001432:	8afa      	ldrh	r2, [r7, #22]
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	429a      	cmp	r2, r3
 8001438:	d215      	bcs.n	8001466 <_ZN7BufData15getFirstSendBufEPht+0x46>
		data[i] = send_buf_[0][i];
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fae7 	bl	8001a14 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8001446:	4602      	mov	r2, r0
 8001448:	8afb      	ldrh	r3, [r7, #22]
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f000 fb28 	bl	8001aa2 <_ZNSt6vectorIhSaIhEEixEj>
 8001452:	4601      	mov	r1, r0
 8001454:	8afb      	ldrh	r3, [r7, #22]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	780a      	ldrb	r2, [r1, #0]
 800145c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < length; i++){
 800145e:	8afb      	ldrh	r3, [r7, #22]
 8001460:	3301      	adds	r3, #1
 8001462:	82fb      	strh	r3, [r7, #22]
 8001464:	e7e5      	b.n	8001432 <_ZN7BufData15getFirstSendBufEPht+0x12>
	}

}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZN7BufData14deleteFirstBufEv>:

void BufData::deleteFirstBuf()
{
 800146e:	b5b0      	push	{r4, r5, r7, lr}
 8001470:	b096      	sub	sp, #88	; 0x58
 8001472:	af04      	add	r7, sp, #16
 8001474:	6078      	str	r0, [r7, #4]
	std::rotate(send_buf_.begin(), send_buf_.begin() + 1, send_buf_.end());
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fb30 	bl	8001ae0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 8001480:	4604      	mov	r4, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fb2a 	bl	8001ae0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fb32 	bl	8001b00 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 800149c:	4605      	mov	r5, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fb47 	bl	8001b36 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4629      	mov	r1, r5
 80014ae:	4620      	mov	r0, r4
 80014b0:	f000 fb5c 	bl	8001b6c <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_>
	std::rotate(read_pointer_buf_.begin(), read_pointer_buf_.begin() + 1, read_pointer_buf_.end());
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3314      	adds	r3, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fb6d 	bl	8001b98 <_ZNSt6vectorIPhSaIS0_EE5beginEv>
 80014be:	4604      	mov	r4, r0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3314      	adds	r3, #20
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fb67 	bl	8001b98 <_ZNSt6vectorIPhSaIS0_EE5beginEv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	2101      	movs	r1, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fb6f 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 80014da:	4605      	mov	r5, r0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3314      	adds	r3, #20
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fb81 	bl	8001be8 <_ZNSt6vectorIPhSaIS0_EE3endEv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4629      	mov	r1, r5
 80014ec:	4620      	mov	r0, r4
 80014ee:	f000 fb96 	bl	8001c1e <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_>
	std::rotate(read_pointer_length_buf_.begin(), read_pointer_length_buf_.begin() + 1, read_pointer_length_buf_.end());
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3320      	adds	r3, #32
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fba7 	bl	8001c4a <_ZNSt6vectorItSaItEE5beginEv>
 80014fc:	4604      	mov	r4, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3320      	adds	r3, #32
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fba1 	bl	8001c4a <_ZNSt6vectorItSaItEE5beginEv>
 8001508:	4603      	mov	r3, r0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fba9 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8001518:	4605      	mov	r5, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3320      	adds	r3, #32
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fbbb 	bl	8001c9a <_ZNSt6vectorItSaItEE3endEv>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4629      	mov	r1, r5
 800152a:	4620      	mov	r0, r4
 800152c:	f000 fbd0 	bl	8001cd0 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_>
	std::rotate(no_receive_flag_buf_.begin(), no_receive_flag_buf_.begin() + 1, no_receive_flag_buf_.end());
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fbdd 	bl	8001cfc <_ZNSt6vectorIbSaIbEE5beginEv>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fbd4 	bl	8001cfc <_ZNSt6vectorIbSaIbEE5beginEv>
 8001554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001558:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800155c:	2201      	movs	r2, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd87 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800156a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fbd4 	bl	8001d1e <_ZNSt6vectorIbSaIbEE3endEv>
 8001576:	f107 0418 	add.w	r4, r7, #24
 800157a:	aa01      	add	r2, sp, #4
 800157c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001580:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001584:	e882 0003 	stmia.w	r2, {r0, r1}
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	f107 0220 	add.w	r2, r7, #32
 8001592:	ca06      	ldmia	r2, {r1, r2}
 8001594:	4620      	mov	r0, r4
 8001596:	f000 fbde 	bl	8001d56 <_ZNSt3_V26rotateISt13_Bit_iteratorEET_S2_S2_S2_>
	send_idx_--;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	8a1b      	ldrh	r3, [r3, #16]
 800159e:	3b01      	subs	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	821a      	strh	r2, [r3, #16]
	read_pointer_idx_--;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	859a      	strh	r2, [r3, #44]	; 0x2c
	no_receive_flag_idx_--;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	send_buf_[buf_length_ - 1].resize(0);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1d1a      	adds	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f000 fa20 	bl	8001a14 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fa2e 	bl	8001a3a <_ZNSt6vectorIhSaIhEE6resizeEj>
	read_pointer_buf_[buf_length_ - 1] = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f103 0214 	add.w	r2, r3, #20
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	4610      	mov	r0, r2
 80015ee:	f000 fbd8 	bl	8001da2 <_ZNSt6vectorIPhSaIS0_EEixEj>
 80015f2:	4602      	mov	r2, r0
 80015f4:	2300      	movs	r3, #0
 80015f6:	6013      	str	r3, [r2, #0]
	read_pointer_length_buf_[buf_length_ - 1] = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0220 	add.w	r2, r3, #32
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f000 fbdb 	bl	8001dc2 <_ZNSt6vectorItSaItEEixEj>
 800160c:	4603      	mov	r3, r0
 800160e:	2200      	movs	r2, #0
 8001610:	801a      	strh	r2, [r3, #0]
	no_receive_flag_buf_[buf_length_ - 1] = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	461a      	mov	r2, r3
 8001620:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fbdc 	bl	8001de2 <_ZNSt6vectorIbSaIbEEixEj>
 800162a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb93 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
}
 8001636:	bf00      	nop
 8001638:	3748      	adds	r7, #72	; 0x48
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}

0800163e <_ZN7BufData17setReadPointerBufEPht>:

void BufData::setReadPointerBuf(uint8_t *pointer, uint16_t length)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	read_pointer_buf_[read_pointer_idx_] = pointer;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f103 0214 	add.w	r2, r3, #20
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f000 fba2 	bl	8001da2 <_ZNSt6vectorIPhSaIS0_EEixEj>
 800165e:	4602      	mov	r2, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	6013      	str	r3, [r2, #0]
	read_pointer_length_buf_[read_pointer_idx_] = length;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f103 0220 	add.w	r2, r3, #32
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f000 fba6 	bl	8001dc2 <_ZNSt6vectorItSaItEEixEj>
 8001676:	4602      	mov	r2, r0
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	8013      	strh	r3, [r2, #0]

	read_pointer_idx_++;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001680:	3301      	adds	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	859a      	strh	r2, [r3, #44]	; 0x2c
	if(read_pointer_idx_ >= buf_length_) read_pointer_idx_ = 0;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d302      	bcc.n	800169a <_ZN7BufData17setReadPointerBufEPht+0x5c>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_ZN7BufData22getFirstReadPointerBufEPt>:

uint8_t *BufData::getFirstReadPointerBuf(uint16_t *length)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	*length = read_pointer_length_buf_[0];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3320      	adds	r3, #32
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fb85 	bl	8001dc2 <_ZNSt6vectorItSaItEEixEj>
 80016b8:	4603      	mov	r3, r0
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	801a      	strh	r2, [r3, #0]

	return read_pointer_buf_[0];
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3314      	adds	r3, #20
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fb6b 	bl	8001da2 <_ZNSt6vectorIPhSaIS0_EEixEj>
 80016cc:	4603      	mov	r3, r0
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZN7BufData19setNoReceiveFlagBufEb>:

void BufData::setNoReceiveFlagBuf(bool flag)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
	no_receive_flag_buf_[no_receive_flag_idx_] = flag;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f0:	461a      	mov	r2, r3
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fb73 	bl	8001de2 <_ZNSt6vectorIbSaIbEEixEj>
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb29 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>

	no_receive_flag_idx_++;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001710:	3301      	adds	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if(no_receive_flag_idx_>= buf_length_) no_receive_flag_idx_ = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d303      	bcc.n	8001730 <_ZN7BufData19setNoReceiveFlagBufEb+0x58>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for(uint16_t i = 0; i < 256; i++){
 8001730:	2300      	movs	r3, #0
 8001732:	83fb      	strh	r3, [r7, #30]
 8001734:	8bfb      	ldrh	r3, [r7, #30]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d816      	bhi.n	8001768 <_ZN7BufData19setNoReceiveFlagBufEb+0x90>
		mon_bool[i] = no_receive_flag_buf_[i];
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001740:	8bfa      	ldrh	r2, [r7, #30]
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fb4b 	bl	8001de2 <_ZNSt6vectorIbSaIbEEixEj>
 800174c:	8bfc      	ldrh	r4, [r7, #30]
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff faed 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <_ZN7BufData19setNoReceiveFlagBufEb+0x98>)
 800175e:	551a      	strb	r2, [r3, r4]
	for(uint16_t i = 0; i < 256; i++){
 8001760:	8bfb      	ldrh	r3, [r7, #30]
 8001762:	3301      	adds	r3, #1
 8001764:	83fb      	strh	r3, [r7, #30]
 8001766:	e7e5      	b.n	8001734 <_ZN7BufData19setNoReceiveFlagBufEb+0x5c>
	}
}
 8001768:	bf00      	nop
 800176a:	3724      	adds	r7, #36	; 0x24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	20000190 	.word	0x20000190

08001774 <_ZN7BufData24getFirstNoReceiveFlagBufEv>:

bool BufData::getFirstNoReceiveFlagBuf()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	return no_receive_flag_buf_[0];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fb2a 	bl	8001de2 <_ZNSt6vectorIbSaIbEEixEj>
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff facd 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZSt4fillIPmiEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fb36 	bl	8001e20 <_ZSt12__niter_baseIPmET_S1_>
 80017b4:	4604      	mov	r4, r0
 80017b6:	68b8      	ldr	r0, [r7, #8]
 80017b8:	f000 fb32 	bl	8001e20 <_ZSt12__niter_baseIPmET_S1_>
 80017bc:	4603      	mov	r3, r0
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 fb37 	bl	8001e36 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fb45 	bl	8001e6a <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNSt6vectorIPhSaIS0_EEC1Ev>:
      vector()
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fb5e 	bl	8001eb6 <_ZNSt12_Vector_baseIPhSaIS0_EEC1Ev>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZNSt6vectorItSaItEEC1Ev>:
      vector()
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fb77 	bl	8001f02 <_ZNSt12_Vector_baseItSaItEEC1Ev>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZNSt6vectorIbSaIbEEC1Ev>:
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<allocator_type>::value)
#endif
    : _Base() { }
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fb90 	bl	8001f4e <_ZNSt13_Bvector_baseISaIbEEC1Ev>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fb90 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001848:	4602      	mov	r2, r0
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4293      	cmp	r3, r2
 800184e:	bf8c      	ite	hi
 8001850:	2301      	movhi	r3, #1
 8001852:	2300      	movls	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fb84 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001860:	4602      	mov	r2, r0
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fb93 	bl	8001f94 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 800186e:	e017      	b.n	80018a0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj+0x68>
	else if (__new_size < size())
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fb79 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001876:	4602      	mov	r2, r0
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4293      	cmp	r3, r2
 800187c:	bf34      	ite	cc
 800187e:	2301      	movcc	r3, #1
 8001880:	2300      	movcs	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj+0x68>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fc02 	bl	80020a4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZNSt6vectorIPhSaIS0_EE6resizeEj>:
      resize(size_type __new_size)
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fc0e 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4293      	cmp	r3, r2
 80018be:	bf8c      	ite	hi
 80018c0:	2301      	movhi	r3, #1
 80018c2:	2300      	movls	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00a      	beq.n	80018e0 <_ZNSt6vectorIPhSaIS0_EE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fc02 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fc0d 	bl	80020f8 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj>
      }
 80018de:	e014      	b.n	800190a <_ZNSt6vectorIPhSaIS0_EE6resizeEj+0x62>
	else if (__new_size < size())
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fbf7 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4293      	cmp	r3, r2
 80018ec:	bf34      	ite	cc
 80018ee:	2301      	movcc	r3, #1
 80018f0:	2300      	movcs	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <_ZNSt6vectorIPhSaIS0_EE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fc73 	bl	80021f0 <_ZNSt6vectorIPhSaIS0_EE15_M_erase_at_endEPS0_>
      }
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZNSt6vectorItSaItEE6resizeEj>:
      resize(size_type __new_size)
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fc7f 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 8001922:	4602      	mov	r2, r0
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4293      	cmp	r3, r2
 8001928:	bf8c      	ite	hi
 800192a:	2301      	movhi	r3, #1
 800192c:	2300      	movls	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00a      	beq.n	800194a <_ZNSt6vectorItSaItEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fc73 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 800193a:	4602      	mov	r2, r0
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fc7e 	bl	8002244 <_ZNSt6vectorItSaItEE17_M_default_appendEj>
      }
 8001948:	e014      	b.n	8001974 <_ZNSt6vectorItSaItEE6resizeEj+0x62>
	else if (__new_size < size())
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fc68 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 8001950:	4602      	mov	r2, r0
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4293      	cmp	r3, r2
 8001956:	bf34      	ite	cc
 8001958:	2301      	movcc	r3, #1
 800195a:	2300      	movcs	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <_ZNSt6vectorItSaItEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fce4 	bl	800233c <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>
      }
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZNSt6vectorIbSaIbEE6resizeEjb>:
    erase(iterator __first, iterator __last)
#endif
    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
 800197c:	b580      	push	{r7, lr}
 800197e:	b090      	sub	sp, #64	; 0x40
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	71fb      	strb	r3, [r7, #7]
    {
      if (__new_size < size())
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fcee 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	4293      	cmp	r3, r2
 8001996:	bf34      	ite	cc
 8001998:	2301      	movcc	r3, #1
 800199a:	2300      	movcs	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <_ZNSt6vectorIbSaIbEE6resizeEjb+0x52>
        _M_erase_at_end(begin() + difference_type(__new_size));
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	68f9      	ldr	r1, [r7, #12]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f9a7 	bl	8001cfc <_ZNSt6vectorIbSaIbEE5beginEv>
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	f107 0110 	add.w	r1, r7, #16
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb5a 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fced 	bl	80023a6 <_ZNSt6vectorIbSaIbEE15_M_erase_at_endESt13_Bit_iterator>
      else
        insert(end(), __new_size - size(), __x);
    }
 80019cc:	e01e      	b.n	8001a0c <_ZNSt6vectorIbSaIbEE6resizeEjb+0x90>
        insert(end(), __new_size - size(), __x);
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	68f9      	ldr	r1, [r7, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f9a2 	bl	8001d1e <_ZNSt6vectorIbSaIbEE3endEv>
 80019da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb8f 	bl	8001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fcbe 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	f107 0020 	add.w	r0, r7, #32
 80019fa:	1dfa      	adds	r2, r7, #7
 80019fc:	9201      	str	r2, [sp, #4]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a04:	cb0c      	ldmia	r3, {r2, r3}
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	f000 fce1 	bl	80023ce <_ZNSt6vectorIbSaIbEE6insertESt19_Bit_const_iteratorjRKb>
    }
 8001a0c:	bf00      	nop
 8001a0e:	3738      	adds	r7, #56	; 0x38
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
      }
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_ZNSt6vectorIhSaIhEE6resizeEj>:
      resize(size_type __new_size)
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f83b 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bf8c      	ite	hi
 8001a52:	2301      	movhi	r3, #1
 8001a54:	2300      	movls	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00a      	beq.n	8001a72 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f82f 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fce8 	bl	8002440 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
      }
 8001a70:	e013      	b.n	8001a9a <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f824 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf34      	ite	cc
 8001a80:	2301      	movcc	r3, #1
 8001a82:	2300      	movcs	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fd4d 	bl	8002534 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4413      	add	r3, r2
      }
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fd37 	bl	8002564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	f107 020c 	add.w	r2, r7, #12
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fd1c 	bl	8002564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	1d1a      	adds	r2, r3, #4
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd0b 	bl	8002564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_>:
   *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
   *  for each @p n in the range @p [0,__last-__first).
  */
  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __middle);
      __glibcxx_requires_valid_range(__middle, __last);

      return std::__rotate(__first, __middle, __last,
			   std::__iterator_category(__first));
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ffeb 	bl	8001b58 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
 8001b82:	4623      	mov	r3, r4
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fd06 	bl	800259a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag>
 8001b8e:	4603      	mov	r3, r0
    }
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}

08001b98 <_ZNSt6vectorIPhSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fdd5 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	f107 020c 	add.w	r2, r7, #12
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fdbd 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZNSt6vectorIPhSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fdac 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>:
    __iterator_category(const _Iter&)
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ffeb 	bl	8001c0a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>
 8001c34:	4623      	mov	r3, r4
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fd9c 	bl	8002778 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag>
 8001c40:	4603      	mov	r3, r0
    }
 8001c42:	4618      	mov	r0, r3
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <_ZNSt6vectorItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fefd 	bl	8002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fee5 	bl	8002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_ZNSt6vectorItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1d1a      	adds	r2, r3, #4
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fed4 	bl	8002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ffeb 	bl	8001cbc <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fec4 	bl	8002a7a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 8001cf2:	4603      	mov	r3, r0
    }
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <_ZNSt6vectorIbSaIbEE5beginEv>:
    begin() _GLIBCXX_NOEXCEPT
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_start; }
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_ZNSt6vectorIbSaIbEE3endEv>:
    end() _GLIBCXX_NOEXCEPT
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_finish; }
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d32:	e882 0003 	stmia.w	r2, {r0, r1}
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_ZSt19__iterator_categoryISt13_Bit_iteratorENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_ZNSt3_V26rotateISt13_Bit_iteratorEET_S2_S2_S2_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001d56:	b082      	sub	sp, #8
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af04      	add	r7, sp, #16
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	1d38      	adds	r0, r7, #4
 8001d62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
			   std::__iterator_category(__first));
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffe9 	bl	8001d42 <_ZSt19__iterator_categoryISt13_Bit_iteratorENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001d70:	68fc      	ldr	r4, [r7, #12]
 8001d72:	f88d 500c 	strb.w	r5, [sp, #12]
 8001d76:	aa01      	add	r2, sp, #4
 8001d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d80:	e882 0003 	stmia.w	r2, {r0, r1}
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	1d3a      	adds	r2, r7, #4
 8001d8c:	ca06      	ldmia	r2, {r1, r2}
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f000 ffef 	bl	8002d72 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag>
    }
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d9e:	b002      	add	sp, #8
 8001da0:	4770      	bx	lr

08001da2 <_ZNSt6vectorIPhSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
      }
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_ZNSt6vectorItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
      }
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_ZNSt6vectorIbSaIbEEixEj>:
    operator[](size_type __n)
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
      return *iterator(this->_M_impl._M_start._M_p
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	681a      	ldr	r2, [r3, #0]
		       + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	009b      	lsls	r3, r3, #2
      return *iterator(this->_M_impl._M_start._M_p
 8001df8:	18d1      	adds	r1, r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f8d6 	bl	8000fb6 <_ZNSt13_Bit_iteratorC1EPmj>
		       + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f107 0210 	add.w	r2, r7, #16
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f8e0 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
    }
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d006      	beq.n	8001e5e <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e7f4      	b.n	8001e48 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      _Vector_base()
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 f987 	bl	8003188 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f001 f995 	bl	80031d8 <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
    }
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_ZNSt12_Vector_baseIPhSaIS0_EEC1Ev>:
      _Vector_base()
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 f996 	bl	80031f2 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implC1Ev>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f001 f9a4 	bl	8003242 <_ZSt8_DestroyIPPhEvT_S2_>
    }
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_ZNSt12_Vector_baseItSaItEEC1Ev>:
      _Vector_base()
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 f9a5 	bl	800325c <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f001 f9b3 	bl	80032ac <_ZSt8_DestroyIPtEvT_S1_>
    }
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_ZNSt13_Bvector_baseISaIbEEC1Ev>:
      _Bvector_base()
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 f9b4 	bl	80032c6 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1Ev>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	109b      	asrs	r3, r3, #2
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv+0x28>)
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	aaaaaaab 	.word	0xaaaaaaab

08001f94 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d077      	beq.n	8002094 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x100>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	109b      	asrs	r3, r3, #2
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	; (800209c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x108>)
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d80f      	bhi.n	8001fe0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x4c>
	    {
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff5c 	bl	8001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8001fcc:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8001fce:	461a      	mov	r2, r3
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f001 f9c9 	bl	800336a <_ZSt27__uninitialized_default_n_aIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RSaIT1_E>
 8001fd8:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8001fde:	e059      	b.n	8002094 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x100>
	      const size_type __len =
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x10c>)
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 f9cf 	bl	8003388 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>
 8001fea:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffbb 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001ff2:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 fa0d 	bl	8003418 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>
 8001ffe:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681c      	ldr	r4, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff38 	bl	8001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002014:	4603      	mov	r3, r0
		  __new_finish
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4629      	mov	r1, r5
 800201a:	4620      	mov	r0, r4
 800201c:	f001 fa10 	bl	8003440 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8002020:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff2d 	bl	8001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800202a:	4603      	mov	r3, r0
		  __new_finish =
 800202c:	461a      	mov	r2, r3
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	68b8      	ldr	r0, [r7, #8]
 8002032:	f001 f99a 	bl	800336a <_ZSt27__uninitialized_default_n_aIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RSaIT1_E>
 8002036:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff1e 	bl	8001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002048:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800204a:	461a      	mov	r2, r3
 800204c:	4629      	mov	r1, r5
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff ff23 	bl	8001e9a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	109b      	asrs	r3, r3, #2
 8002068:	4a0c      	ldr	r2, [pc, #48]	; (800209c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x108>)
 800206a:	fb02 f303 	mul.w	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800206e:	461a      	mov	r2, r3
 8002070:	f001 f89f 	bl	80031b2 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __new_start;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]
    }
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bdb0      	pop	{r4, r5, r7, pc}
 800209c:	aaaaaaab 	.word	0xaaaaaaab
 80020a0:	0800983c 	.word	0x0800983c

080020a4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685c      	ldr	r4, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fee5 	bl	8001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	4621      	mov	r1, r4
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f7ff feea 	bl	8001e9a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	605a      	str	r2, [r3, #4]
      }
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}

080020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	109b      	asrs	r3, r3, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
      if (__n != 0)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d06d      	beq.n	80021e4 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0xec>
	  if (size_type(this->_M_impl._M_end_of_storage
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	109b      	asrs	r3, r3, #2
 8002116:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4293      	cmp	r3, r2
 800211c:	d80f      	bhi.n	800213e <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0x46>
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fed3 	bl	8001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 800212a:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800212c:	461a      	mov	r2, r3
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	4620      	mov	r0, r4
 8002132:	f001 f99e 	bl	8003472 <_ZSt27__uninitialized_default_n_aIPPhjS0_ET_S2_T0_RSaIT1_E>
 8002136:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
    }
 800213c:	e052      	b.n	80021e4 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0xec>
	      const size_type __len =
 800213e:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0xf4>)
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 f9a4 	bl	8003490 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc>
 8002148:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffc2 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 8002150:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6979      	ldr	r1, [r7, #20]
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f9e2 	bl	8003520 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj>
 800215c:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681c      	ldr	r4, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff feaf 	bl	8001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 8002172:	4603      	mov	r3, r0
		  __new_finish
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4629      	mov	r1, r5
 8002178:	4620      	mov	r0, r4
 800217a:	f001 f9e5 	bl	8003548 <_ZSt34__uninitialized_move_if_noexcept_aIPPhS1_SaIS0_EET0_T_S4_S3_RT1_>
 800217e:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fea4 	bl	8001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 8002188:	4603      	mov	r3, r0
		  __new_finish =
 800218a:	461a      	mov	r2, r3
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f001 f96f 	bl	8003472 <_ZSt27__uninitialized_default_n_aIPPhjS0_ET_S2_T0_RSaIT1_E>
 8002194:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681c      	ldr	r4, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fe95 	bl	8001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 80021a6:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021a8:	461a      	mov	r2, r3
 80021aa:	4629      	mov	r1, r5
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff fe9a 	bl	8001ee6 <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 80021c6:	461a      	mov	r2, r3
 80021c8:	f001 f828 	bl	800321c <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j>
	      this->_M_impl._M_start = __new_start;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	441a      	add	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
    }
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}
 80021ec:	0800983c 	.word	0x0800983c

080021f0 <_ZNSt6vectorIPhSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685c      	ldr	r4, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fe65 	bl	8001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	4621      	mov	r1, r4
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	f7ff fe6a 	bl	8001ee6 <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	605a      	str	r2, [r3, #4]
      }
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}

08002220 <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	105b      	asrs	r3, r3, #1
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <_ZNSt6vectorItSaItEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
      if (__n != 0)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d06d      	beq.n	8002330 <_ZNSt6vectorItSaItEE17_M_default_appendEj+0xec>
	  if (size_type(this->_M_impl._M_end_of_storage
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	105b      	asrs	r3, r3, #1
 8002262:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4293      	cmp	r3, r2
 8002268:	d80f      	bhi.n	800228a <_ZNSt6vectorItSaItEE17_M_default_appendEj+0x46>
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe53 	bl	8001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8002276:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002278:	461a      	mov	r2, r3
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	4620      	mov	r0, r4
 800227e:	f001 f97c 	bl	800357a <_ZSt27__uninitialized_default_n_aIPtjtET_S1_T0_RSaIT1_E>
 8002282:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	605a      	str	r2, [r3, #4]
    }
 8002288:	e052      	b.n	8002330 <_ZNSt6vectorItSaItEE17_M_default_appendEj+0xec>
	      const size_type __len =
 800228a:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <_ZNSt6vectorItSaItEE17_M_default_appendEj+0xf4>)
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 f982 	bl	8003598 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 8002294:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ffc2 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 800229c:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6979      	ldr	r1, [r7, #20]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 f9c0 	bl	8003628 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 80022a8:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681c      	ldr	r4, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe2f 	bl	8001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80022be:	4603      	mov	r3, r0
		  __new_finish
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4629      	mov	r1, r5
 80022c4:	4620      	mov	r0, r4
 80022c6:	f001 f9c3 	bl	8003650 <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 80022ca:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fe24 	bl	8001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80022d4:	4603      	mov	r3, r0
		  __new_finish =
 80022d6:	461a      	mov	r2, r3
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	68b8      	ldr	r0, [r7, #8]
 80022dc:	f001 f94d 	bl	800357a <_ZSt27__uninitialized_default_n_aIPtjtET_S1_T0_RSaIT1_E>
 80022e0:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681c      	ldr	r4, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe15 	bl	8001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80022f2:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022f4:	461a      	mov	r2, r3
 80022f6:	4629      	mov	r1, r5
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff fe1a 	bl	8001f32 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	105b      	asrs	r3, r3, #1
	      _M_deallocate(this->_M_impl._M_start,
 8002312:	461a      	mov	r2, r3
 8002314:	f000 ffb7 	bl	8003286 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
	      this->_M_impl._M_start = __new_start;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	441a      	add	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
    }
 8002330:	bf00      	nop
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	0800983c 	.word	0x0800983c

0800233c <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685c      	ldr	r4, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fde5 	bl	8001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4621      	mov	r1, r4
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f7ff fdea 	bl	8001f32 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]
      }
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}

0800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>:
    size() const _GLIBCXX_NOEXCEPT
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    { return size_type(end() - begin()); }
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	f001 f981 	bl	8003682 <_ZNKSt6vectorIbSaIbEE3endEv>
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f98a 	bl	80036a0 <_ZNKSt6vectorIbSaIbEE5beginEv>
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fde4 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 800239c:	4603      	mov	r3, r0
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZNSt6vectorIbSaIbEE15_M_erase_at_endESt13_Bit_iterator>:
      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	e883 0006 	stmia.w	r3, {r1, r2}
    { this->_M_impl._M_finish = __pos; }
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3308      	adds	r3, #8
 80023b8:	1d3a      	adds	r2, r7, #4
 80023ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023be:	e883 0003 	stmia.w	r3, {r0, r1}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_ZNSt6vectorIbSaIbEE6insertESt19_Bit_const_iteratorjRKb>:
    insert(const_iterator __position, size_type __n, const bool& __x)
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b08e      	sub	sp, #56	; 0x38
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	4639      	mov	r1, r7
 80023da:	e881 000c 	stmia.w	r1, {r2, r3}
      difference_type __offset = __position - cbegin();
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 f969 	bl	80036bc <_ZNKSt6vectorIbSaIbEE6cbeginEv>
 80023ea:	f107 0214 	add.w	r2, r7, #20
 80023ee:	463b      	mov	r3, r7
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fdb6 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 80023f8:	62f8      	str	r0, [r7, #44]	; 0x2c
      _M_fill_insert(__position._M_const_cast(), __n, __x);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	463a      	mov	r2, r7
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fe92 	bl	800112c <_ZNKSt19_Bit_const_iterator13_M_const_castEv>
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	f107 021c 	add.w	r2, r7, #28
 8002414:	ca06      	ldmia	r2, {r1, r2}
 8002416:	68b8      	ldr	r0, [r7, #8]
 8002418:	f001 f95e 	bl	80036d8 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb>
      return begin() + __offset;
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fc6a 	bl	8001cfc <_ZNSt6vectorIbSaIbEE5beginEv>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fe1e 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
    }
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
      if (__n != 0)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d06a      	beq.n	8002526 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xe6>
	  if (size_type(this->_M_impl._M_end_of_storage
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	4293      	cmp	r3, r2
 8002462:	d80f      	bhi.n	8002484 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x44>
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fa22 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002470:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002472:	461a      	mov	r2, r3
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	4620      	mov	r0, r4
 8002478:	f001 fa27 	bl	80038ca <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 800247c:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]
    }
 8002482:	e050      	b.n	8002526 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xe6>
	      const size_type __len =
 8002484:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xf0>)
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f001 fa2d 	bl	80038e8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 800248e:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fb15 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002496:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fa6b 	bl	8003978 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80024a2:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681c      	ldr	r4, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f9fe 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80024b8:	4603      	mov	r3, r0
		  __new_finish
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4629      	mov	r1, r5
 80024be:	4620      	mov	r0, r4
 80024c0:	f001 fa6e 	bl	80039a0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80024c4:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 f9f3 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80024ce:	4603      	mov	r3, r0
		  __new_finish =
 80024d0:	461a      	mov	r2, r3
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	f001 f9f8 	bl	80038ca <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80024da:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681c      	ldr	r4, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f9e4 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80024ec:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024ee:	461a      	mov	r2, r3
 80024f0:	4629      	mov	r1, r5
 80024f2:	4620      	mov	r0, r4
 80024f4:	f001 fa6d 	bl	80039d2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800250a:	461a      	mov	r2, r3
 800250c:	f001 fa6f 	bl	80039ee <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	441a      	add	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]
    }
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bdb0      	pop	{r4, r5, r7, pc}
 800252e:	bf00      	nop
 8002530:	0800983c 	.word	0x0800983c

08002534 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685c      	ldr	r4, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	f001 f9b5 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4621      	mov	r1, r4
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	f001 fa3e 	bl	80039d2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	605a      	str	r2, [r3, #4]
      }
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}

08002564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 800259a:	b580      	push	{r7, lr}
 800259c:	b098      	sub	sp, #96	; 0x60
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 80025a8:	f107 0208 	add.w	r2, r7, #8
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fa2e 	bl	8003a14 <_ZN9__gnu_cxxeqIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x28>
	return __last;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	e0c6      	b.n	8002750 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
      else if (__last  == __middle)
 80025c2:	f107 0208 	add.w	r2, r7, #8
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fa22 	bl	8003a14 <_ZN9__gnu_cxxeqIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x40>
	return __first;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	e0ba      	b.n	8002750 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
      _Distance __n = __last   - __first;
 80025da:	f107 020c 	add.w	r2, r7, #12
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fa2e 	bl	8003a44 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80025e8:	4603      	mov	r3, r0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
      _Distance __k = __middle - __first;
 80025ec:	f107 020c 	add.w	r2, r7, #12
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 fa24 	bl	8003a44 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80025fc:	4603      	mov	r3, r0
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (__k == __n - __k)
 8002600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	1ad2      	subs	r2, r2, r3
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f001 fa33 	bl	8003a7c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_>
	  return __middle;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	e09a      	b.n	8002750 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
      _RandomAccessIterator __p = __first;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
      _RandomAccessIterator __ret = __first + (__last - __middle);
 800261e:	f107 0208 	add.w	r2, r7, #8
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fa0c 	bl	8003a44 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800262c:	4602      	mov	r2, r0
 800262e:	f107 030c 	add.w	r3, r7, #12
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fa63 	bl	8001b00 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 800263a:	4603      	mov	r3, r0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__k < __n - __k)
 800263e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002646:	429a      	cmp	r2, r3
 8002648:	dd3c      	ble.n	80026c4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x12a>
	      _RandomAccessIterator __q = __p + __k;
 800264a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800264c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fa54 	bl	8001b00 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 8002658:	4603      	mov	r3, r0
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 800265c:	2300      	movs	r3, #0
 800265e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002668:	429a      	cmp	r2, r3
 800266a:	da11      	bge.n	8002690 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xf6>
		  std::iter_swap(__p, __q);
 800266c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800266e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002670:	f001 fa7e 	bl	8003b70 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>
		  ++__p;
 8002674:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fa90 	bl	8003b9e <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
		  ++__q;
 800267e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fa8b 	bl	8003b9e <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268a:	3301      	adds	r3, #1
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268e:	e7e7      	b.n	8002660 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xc6>
	      __n %= __k;
 8002690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002694:	fb93 f1f2 	sdiv	r1, r3, r2
 8002698:	fb02 f201 	mul.w	r2, r2, r1
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	643b      	str	r3, [r7, #64]	; 0x40
	      if (__n == 0)
 80026a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x110>
		return __ret;
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	e052      	b.n	8002750 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
	      std::swap(__n, __k);
 80026aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80026ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 fa8e 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 80026ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c2:	e7bc      	b.n	800263e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 80026c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	      _RandomAccessIterator __q = __p + __n;
 80026cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fa13 	bl	8001b00 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 80026da:	4603      	mov	r3, r0
 80026dc:	623b      	str	r3, [r7, #32]
	      __p = __q - __k;
 80026de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 fa26 	bl	8003b38 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmiEi>
 80026ec:	4603      	mov	r3, r0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80026f0:	2300      	movs	r3, #0
 80026f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80026f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026fc:	429a      	cmp	r2, r3
 80026fe:	da11      	bge.n	8002724 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x18a>
		  --__p;
 8002700:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fa85 	bl	8003c14 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmmEv>
		  --__q;
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fa80 	bl	8003c14 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmmEv>
		  std::iter_swap(__p, __q);
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002718:	f001 fa2a 	bl	8003b70 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 800271c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271e:	3301      	adds	r3, #1
 8002720:	65bb      	str	r3, [r7, #88]	; 0x58
 8002722:	e7e7      	b.n	80026f4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x15a>
	      __n %= __k;
 8002724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002728:	fb93 f1f2 	sdiv	r1, r3, r2
 800272c:	fb02 f201 	mul.w	r2, r2, r1
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	643b      	str	r3, [r7, #64]	; 0x40
	      if (__n == 0)
 8002734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1a4>
		return __ret;
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	e008      	b.n	8002750 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
	      std::swap(__n, __k);
 800273e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fa44 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 800274e:	e776      	b.n	800263e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xa4>
    }
 8002750:	4618      	mov	r0, r3
 8002752:	3760      	adds	r7, #96	; 0x60
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b095      	sub	sp, #84	; 0x54
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8002786:	f107 0208 	add.w	r2, r7, #8
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f001 fa50 	bl	8003c36 <_ZN9__gnu_cxxeqIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x28>
	return __last;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	e158      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
      else if (__last  == __middle)
 80027a0:	f107 0208 	add.w	r2, r7, #8
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fa44 	bl	8003c36 <_ZN9__gnu_cxxeqIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x40>
	return __first;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	e14c      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 80027b8:	f107 020c 	add.w	r2, r7, #12
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fa50 	bl	8003c66 <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80027c6:	4603      	mov	r3, r0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __k = __middle - __first;
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fa46 	bl	8003c66 <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80027da:	4603      	mov	r3, r0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__k == __n - __k)
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	1ad2      	subs	r2, r2, r3
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d106      	bne.n	80027f8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f001 fa4f 	bl	8003c92 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
	  return __middle;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	e12c      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 80027fc:	f107 0208 	add.w	r2, r7, #8
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fa2e 	bl	8003c66 <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800280a:	4602      	mov	r2, r0
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f9d0 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002818:	4603      	mov	r3, r0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__k < __n - __k)
 800281c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	1ad2      	subs	r2, r2, r3
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	429a      	cmp	r2, r3
 8002826:	f340 8081 	ble.w	800292c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d140      	bne.n	80028b2 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8002830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fa50 	bl	8003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fa58 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002842:	4603      	mov	r3, r0
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8002848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f9b2 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002854:	4604      	mov	r4, r0
 8002856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f9aa 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002864:	4603      	mov	r3, r0
 8002866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002868:	4619      	mov	r1, r3
 800286a:	4620      	mov	r0, r4
 800286c:	f001 fa4c 	bl	8003d08 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fa3c 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800287a:	4604      	mov	r4, r0
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f997 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 800288a:	4603      	mov	r3, r0
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
 800288e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fa4f 	bl	8003d38 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 800289a:	4603      	mov	r3, r0
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
 800289e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fa19 	bl	8003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	6013      	str	r3, [r2, #0]
		  return __ret;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	e0cf      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 80028b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f97c 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 80028c0:	4603      	mov	r3, r0
 80028c2:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80028c4:	2300      	movs	r3, #0
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	da11      	bge.n	80028f8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x180>
		  std::iter_swap(__p, __q);
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d8:	f001 fa47 	bl	8003d6a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>
		  ++__p;
 80028dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 fa59 	bl	8003d98 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
		  ++__q;
 80028e6:	f107 0320 	add.w	r3, r7, #32
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fa54 	bl	8003d98 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f2:	3301      	adds	r3, #1
 80028f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f6:	e7e7      	b.n	80028c8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x150>
	      __n %= __k;
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002900:	fb02 f201 	mul.w	r2, r2, r1
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x19a>
		return __ret;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	e09f      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002912:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f95a 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8002922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	e777      	b.n	800281c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 800292c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d149      	bne.n	80029ce <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 800293a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f938 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002948:	4603      	mov	r3, r0
 800294a:	643b      	str	r3, [r7, #64]	; 0x40
 800294c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f9f0 	bl	8003d38 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 8002958:	4603      	mov	r3, r0
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002960:	4618      	mov	r0, r3
 8002962:	f001 f9ba 	bl	8003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8002966:	4603      	mov	r3, r0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f9c2 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800296e:	4603      	mov	r3, r0
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8002974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f91b 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002982:	4603      	mov	r3, r0
 8002984:	647b      	str	r3, [r7, #68]	; 0x44
 8002986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f001 f9d3 	bl	8003d38 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 8002992:	4604      	mov	r4, r0
 8002994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff f90b 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4621      	mov	r1, r4
 80029a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029aa:	f001 fa05 	bl	8003db8 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
		  *__p = _GLIBCXX_MOVE(__t);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 f99d 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80029b8:	4604      	mov	r4, r0
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 f98b 	bl	8003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	6013      	str	r3, [r2, #0]
		  return __ret;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	e041      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f8ee 	bl	8001bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 80029dc:	4603      	mov	r3, r0
 80029de:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 80029e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f9a5 	bl	8003d38 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 80029ee:	4603      	mov	r3, r0
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80029f2:	2300      	movs	r3, #0
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029fe:	429a      	cmp	r2, r3
 8002a00:	da11      	bge.n	8002a26 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2ae>
		  --__p;
 8002a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 f9ee 	bl	8003de8 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmmEv>
		  --__q;
 8002a0c:	f107 0318 	add.w	r3, r7, #24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f9e9 	bl	8003de8 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmmEv>
		  std::iter_swap(__p, __q);
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1a:	f001 f9a6 	bl	8003d6a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a20:	3301      	adds	r3, #1
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a24:	e7e7      	b.n	80029f6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x27e>
	      __n %= __k;
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2a:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a2e:	fb02 f201 	mul.w	r2, r2, r1
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	e008      	b.n	8002a52 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002a40:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f8c3 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8002a50:	e6e4      	b.n	800281c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0xa4>
    }
 8002a52:	4618      	mov	r0, r3
 8002a54:	3754      	adds	r7, #84	; 0x54
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}

08002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b095      	sub	sp, #84	; 0x54
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8002a88:	f107 0208 	add.w	r2, r7, #8
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 f9b8 	bl	8003e08 <_ZN9__gnu_cxxeqIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	e158      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last  == __middle)
 8002aa2:	f107 0208 	add.w	r2, r7, #8
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f9ac 	bl	8003e08 <_ZN9__gnu_cxxeqIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	e14c      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 8002aba:	f107 020c 	add.w	r2, r7, #12
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f9b8 	bl	8003e38 <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __k = __middle - __first;
 8002acc:	f107 020c 	add.w	r2, r7, #12
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 f9ae 	bl	8003e38 <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002adc:	4603      	mov	r3, r0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__k == __n - __k)
 8002ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	1ad2      	subs	r2, r2, r3
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d106      	bne.n	8002afa <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f001 f9b7 	bl	8003e64 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>
	  return __middle;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	e12c      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 8002afe:	f107 0208 	add.w	r2, r7, #8
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f996 	bl	8003e38 <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f8a8 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__k < __n - __k)
 8002b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	f340 8081 	ble.w	8002c2e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d140      	bne.n	8002bb4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8002b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f9b8 	bl	8003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f9c0 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002b44:	4603      	mov	r3, r0
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	83fb      	strh	r3, [r7, #30]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8002b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f88a 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002b56:	4604      	mov	r4, r0
 8002b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f882 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002b66:	4603      	mov	r3, r0
 8002b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f001 f9b4 	bl	8003eda <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8002b72:	f107 031e 	add.w	r3, r7, #30
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f9a4 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f86f 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f9b7 	bl	8003f0a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f981 	bl	8003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002baa:	4603      	mov	r3, r0
 8002bac:	8822      	ldrh	r2, [r4, #0]
 8002bae:	801a      	strh	r2, [r3, #0]
		  return __ret;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	e0cf      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 8002bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff f854 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	da11      	bge.n	8002bfa <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x180>
		  std::iter_swap(__p, __q);
 8002bd6:	6a39      	ldr	r1, [r7, #32]
 8002bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bda:	f001 f9af 	bl	8003f3c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>
		  ++__p;
 8002bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 f9c1 	bl	8003f6a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
		  ++__q;
 8002be8:	f107 0320 	add.w	r3, r7, #32
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 f9bc 	bl	8003f6a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	e7e7      	b.n	8002bca <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x150>
	      __n %= __k;
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c02:	fb02 f201 	mul.w	r2, r2, r1
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	e09f      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002c14:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 ffd9 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8002c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	e777      	b.n	8002b1e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 8002c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d149      	bne.n	8002cd0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f810 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 f958 	bl	8003f0a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f922 	bl	8003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 f92a 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002c70:	4603      	mov	r3, r0
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	82fb      	strh	r3, [r7, #22]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8002c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fff3 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002c84:	4603      	mov	r3, r0
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44
 8002c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 f93b 	bl	8003f0a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002c94:	4604      	mov	r4, r0
 8002c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ffe3 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4621      	mov	r1, r4
 8002caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cac:	f001 f96d 	bl	8003f8a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 8002cb0:	f107 0316 	add.w	r3, r7, #22
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f905 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 f8f3 	bl	8003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	8822      	ldrh	r2, [r4, #0]
 8002cca:	801a      	strh	r2, [r3, #0]
		  return __ret;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	e041      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe ffc6 	bl	8001c6a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 8002ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce4:	f107 0318 	add.w	r3, r7, #24
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f90d 	bl	8003f0a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d00:	429a      	cmp	r2, r3
 8002d02:	da11      	bge.n	8002d28 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2ae>
		  --__p;
 8002d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f956 	bl	8003fba <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmmEv>
		  --__q;
 8002d0e:	f107 0318 	add.w	r3, r7, #24
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 f951 	bl	8003fba <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmmEv>
		  std::iter_swap(__p, __q);
 8002d18:	69b9      	ldr	r1, [r7, #24]
 8002d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d1c:	f001 f90e 	bl	8003f3c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	3301      	adds	r3, #1
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d26:	e7e7      	b.n	8002cf8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x27e>
	      __n %= __k;
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002d30:	fb02 f201 	mul.w	r2, r2, r1
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	e008      	b.n	8002d54 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002d42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 ff42 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8002d52:	e6e4      	b.n	8002b1e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 8002d54:	4618      	mov	r0, r3
 8002d56:	3754      	adds	r7, #84	; 0x54
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8002d72:	b082      	sub	sp, #8
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b0b9      	sub	sp, #228	; 0xe4
 8002d78:	af04      	add	r7, sp, #16
 8002d7a:	6178      	str	r0, [r7, #20]
 8002d7c:	f107 000c 	add.w	r0, r7, #12
 8002d80:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      if (__first == __middle)
 8002d88:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f8bb 	bl	8000f0e <_ZNKSt18_Bit_iterator_baseeqERKS_>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x3e>
	return __last;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002daa:	e882 0003 	stmia.w	r2, {r0, r1}
 8002dae:	e1e4      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
      else if (__last  == __middle)
 8002db0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002db4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f8a7 	bl	8000f0e <_ZNKSt18_Bit_iterator_baseeqERKS_>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x66>
	return __first;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dd2:	e882 0003 	stmia.w	r2, {r0, r1}
 8002dd6:	e1d0      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
      _Distance __n = __last   - __first;
 8002dd8:	f107 020c 	add.w	r2, r7, #12
 8002ddc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f8be 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8002de8:	4603      	mov	r3, r0
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
      _Distance __k = __middle - __first;
 8002dec:	f107 020c 	add.w	r2, r7, #12
 8002df0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f8b4 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
      if (__k == __n - __k)
 8002e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	1ad2      	subs	r2, r2, r3
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d11c      	bne.n	8002e46 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0xd4>
	  std::swap_ranges(__first, __middle, __middle);
 8002e0c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002e10:	aa01      	add	r2, sp, #4
 8002e12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e1a:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	ca06      	ldmia	r2, {r1, r2}
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f001 f8d3 	bl	8003fda <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_>
	  return __middle;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e40:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e44:	e199      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
      _RandomAccessIterator __p = __first;
 8002e46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e4a:	f107 020c 	add.w	r2, r7, #12
 8002e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e52:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __ret = __first + (__last - __middle);
 8002e56:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002e5a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f87f 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8002e66:	4602      	mov	r2, r0
 8002e68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e6c:	f107 010c 	add.w	r1, r7, #12
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe f8fe 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
	  if (__k < __n - __k)
 8002e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7a:	1ad2      	subs	r2, r2, r3
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	f340 80b2 	ble.w	8002fe8 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x276>
	      if (__is_pod(_ValueType) && __k == 1)
 8002e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d163      	bne.n	8002f52 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x1e0>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8002e8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe f89f 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8002e9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f8ce 	bl	8004040 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd ff43 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8002eb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002eb6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f8d8 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8002ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ec8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe f8d0 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8002ed2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002ed6:	aa01      	add	r2, sp, #4
 8002ed8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002edc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ee0:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eee:	ca06      	ldmia	r2, {r1, r2}
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f001 f8b0 	bl	8004056 <_ZSt4moveISt13_Bit_iteratorS0_ET0_T_S2_S1_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8002ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ef8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002efc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe f8b6 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8002f06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f0a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f8cb 	bl	80010ac <_ZNKSt13_Bit_iteratormiEi>
 8002f16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f1a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe f859 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8002f26:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff16 	bl	8002d5c <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 8002f30:	4603      	mov	r3, r0
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd ff0e 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
		  return __ret;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002f50:	e113      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      _RandomAccessIterator __q = __p + __k;
 8002f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe f888 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002f72:	429a      	cmp	r2, r3
 8002f74:	da17      	bge.n	8002fa6 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x234>
		  std::iter_swap(__p, __q);
 8002f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7a:	cb0c      	ldmia	r3, {r2, r3}
 8002f7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f80:	c903      	ldmia	r1, {r0, r1}
 8002f82:	f001 f898 	bl	80040b6 <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>
		  ++__p;
 8002f86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f838 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
		  ++__q;
 8002f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f833 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fa4:	e7e0      	b.n	8002f68 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x1f6>
	      __n %= __k;
 8002fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002faa:	fb93 f1f2 	sdiv	r1, r3, r2
 8002fae:	fb02 f201 	mul.w	r2, r2, r1
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
	      if (__n == 0)
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x25c>
		return __ret;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002fcc:	e0d5      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      std::swap(__n, __k);
 8002fce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fdfc 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8002fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe6:	e746      	b.n	8002e76 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x104>
	      __k = __n - __k;
 8002fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
	      if (__is_pod(_ValueType) && __k == 1)
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d16c      	bne.n	80030d0 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x35e>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8002ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ff8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ffc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe f836 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8003006:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800300a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800300e:	2201      	movs	r2, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe f84b 	bl	80010ac <_ZNKSt13_Bit_iteratormiEi>
 8003016:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800301a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd ffd9 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8003026:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f808 	bl	8004040 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8003030:	4603      	mov	r3, r0
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fe7d 	bl	8000d32 <_ZNKSt14_Bit_referencecvbEv>
 8003038:	4603      	mov	r3, r0
 800303a:	76fb      	strb	r3, [r7, #27]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 800303c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003042:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f813 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 800304c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003050:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003054:	2201      	movs	r2, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f828 	bl	80010ac <_ZNKSt13_Bit_iteratormiEi>
 800305c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003062:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f803 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 800306c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8003070:	aa01      	add	r2, sp, #4
 8003072:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003076:	e893 0003 	ldmia.w	r3, {r0, r1}
 800307a:	e882 0003 	stmia.w	r2, {r0, r1}
 800307e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003088:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800308c:	ca06      	ldmia	r2, {r1, r2}
 800308e:	4620      	mov	r0, r4
 8003090:	f001 f836 	bl	8004100 <_ZSt13move_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>
		  *__p = _GLIBCXX_MOVE(__t);
 8003094:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003098:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd ff9a 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 80030a4:	f107 031b 	add.w	r3, r7, #27
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe57 	bl	8002d5c <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 80030ae:	4603      	mov	r3, r0
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fe4f 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
		  return __ret;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80030ce:	e054      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      _RandomAccessIterator __q = __p + __n;
 80030d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd ffc9 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
	      __p = __q - __k;
 80030e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030e2:	463b      	mov	r3, r7
 80030e4:	f107 011c 	add.w	r1, r7, #28
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd ffdf 	bl	80010ac <_ZNKSt13_Bit_iteratormiEi>
 80030ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030f2:	463a      	mov	r2, r7
 80030f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030f8:	e883 0003 	stmia.w	r3, {r0, r1}
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800310c:	429a      	cmp	r2, r3
 800310e:	da17      	bge.n	8003140 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x3ce>
		  --__p;
 8003110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd ff80 	bl	800101a <_ZNSt13_Bit_iteratormmEv>
		  --__q;
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd ff7b 	bl	800101a <_ZNSt13_Bit_iteratormmEv>
		  std::iter_swap(__p, __q);
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	cb0c      	ldmia	r3, {r2, r3}
 800312a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800312e:	c903      	ldmia	r1, {r0, r1}
 8003130:	f000 ffc1 	bl	80040b6 <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8003134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003138:	3301      	adds	r3, #1
 800313a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800313e:	e7e0      	b.n	8003102 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x390>
	      __n %= __k;
 8003140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003144:	fb93 f1f2 	sdiv	r1, r3, r2
 8003148:	fb02 f201 	mul.w	r2, r2, r1
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	647b      	str	r3, [r7, #68]	; 0x44
	      if (__n == 0)
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x3f6>
		return __ret;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	461a      	mov	r2, r3
 800315a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800315e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003162:	e882 0003 	stmia.w	r2, {r0, r1}
 8003166:	e008      	b.n	800317a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      std::swap(__n, __k);
 8003168:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800316c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fd2f 	bl	8003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8003178:	e67d      	b.n	8002e76 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x104>
    }
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	37d4      	adds	r7, #212	; 0xd4
 800317e:	46bd      	mov	sp, r7
 8003180:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003184:	b002      	add	sp, #8
 8003186:	4770      	bx	lr

08003188 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 ffe5 	bl	8004160 <_ZNSaISt6vectorIhSaIhEEEC1Ev>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
	{ }
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
	if (__p)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ffd4 	bl	8004178 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE10deallocateERS3_PS2_j>
      }
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80031e2:	6839      	ldr	r1, [r7, #0]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 ffe1 	bl	80041ac <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>
    }
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ffee 	bl	80041dc <_ZNSaIPhEC1Ev>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
	{ }
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	if (__p)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 ffdd 	bl	80041f4 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>
      }
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_ZSt8_DestroyIPPhEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 ffdf 	bl	8004212 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPhEEvT_S4_>
    }
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>:
	_Vector_impl()
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 ffdf 	bl	8004228 <_ZNSaItEC1Ev>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
	{ }
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>:
      _M_deallocate(pointer __p, size_t __n)
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
	if (__p)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 ffce 	bl	8004240 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZSt8_DestroyIPtEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 ffd0 	bl	800425e <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1Ev>:
	_Bvector_impl()
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
	: _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 ffd0 	bl	8004274 <_ZNSaImEC1Ev>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fe5e 	bl	8000f98 <_ZNSt13_Bit_iteratorC1Ev>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3308      	adds	r3, #8
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fe59 	bl	8000f98 <_ZNSt13_Bit_iteratorC1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
	{ }
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d02d      	beq.n	8003362 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x6c>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 ffbf 	bl	800428c <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	109b      	asrs	r3, r3, #2
 800331a:	617b      	str	r3, [r7, #20]
	    _Bit_alloc_traits::deallocate(_M_impl,
 800331c:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8003328:	4413      	add	r3, r2
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4619      	mov	r1, r3
 800332e:	f000 ffc3 	bl	80042b8 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_start = _M_impl._M_finish = _Bit_iterator();
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fe2e 	bl	8000f98 <_ZNSt13_Bit_iteratorC1Ev>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3308      	adds	r3, #8
 8003340:	f107 020c 	add.w	r2, r7, #12
 8003344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003348:	e883 0003 	stmia.w	r3, {r0, r1}
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 0208 	add.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003358:	e883 0003 	stmia.w	r3, {r0, r1}
	    _M_impl._M_end_of_storage = _Bit_pointer();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
      }
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZSt27__uninitialized_default_n_aIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 ffac 	bl	80042d6 <_ZSt25__uninitialized_default_nIPSt6vectorIhSaIhEEjET_S4_T0_>
 800337e:	4603      	mov	r3, r0
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 ffae 	bl	80042f6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 800339a:	4604      	mov	r4, r0
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f7fe fde3 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	1ae2      	subs	r2, r4, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	bf34      	ite	cc
 80033ac:	2301      	movcc	r3, #1
 80033ae:	2300      	movcs	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f006 f8ce 	bl	800955a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7fe fdd2 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80033c4:	4604      	mov	r4, r0
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7fe fdce 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80033cc:	4603      	mov	r3, r0
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	f107 0208 	add.w	r2, r7, #8
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 ff9c 	bl	8004318 <_ZSt3maxIjERKT_S2_S2_>
 80033e0:	4603      	mov	r3, r0
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4423      	add	r3, r4
 80033e6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7fe fdbd 	bl	8001f68 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d306      	bcc.n	8003404 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x7c>
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 ff7d 	bl	80042f6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 80033fc:	4602      	mov	r2, r0
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4293      	cmp	r3, r2
 8003402:	d904      	bls.n	800340e <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x86>
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 ff76 	bl	80042f6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 800340a:	4603      	mov	r3, r0
 800340c:	e000      	b.n	8003410 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x88>
 800340e:	697b      	ldr	r3, [r7, #20]
      }
 8003410:	4618      	mov	r0, r3
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}

08003418 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x1e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 ff87 	bl	8004340 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8allocateERS3_j>
 8003432:	4603      	mov	r3, r0
 8003434:	e000      	b.n	8003438 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x20>
 8003436:	2300      	movs	r3, #0
      }
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 ff85 	bl	800435e <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIhSaIhEESt13move_iteratorIPS2_EET0_PT_>
 8003454:	4604      	mov	r4, r0
 8003456:	68b8      	ldr	r0, [r7, #8]
 8003458:	f000 ff81 	bl	800435e <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIhSaIhEESt13move_iteratorIPS2_EET0_PT_>
 800345c:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4620      	mov	r0, r4
 8003464:	f000 ff8a 	bl	800437c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorIhSaIhEEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 8003468:	4603      	mov	r3, r0
    }
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}

08003472 <_ZSt27__uninitialized_default_n_aIPPhjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 ff8c 	bl	800439e <_ZSt25__uninitialized_default_nIPPhjET_S2_T0_>
 8003486:	4603      	mov	r3, r0
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 ff8e 	bl	80043be <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>
 80034a2:	4604      	mov	r4, r0
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7fe fe15 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80034aa:	4603      	mov	r3, r0
 80034ac:	1ae2      	subs	r2, r4, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	bf34      	ite	cc
 80034b4:	2301      	movcc	r3, #1
 80034b6:	2300      	movcs	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f006 f84a 	bl	800955a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7fe fe04 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80034cc:	4604      	mov	r4, r0
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7fe fe00 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80034d4:	4603      	mov	r3, r0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	f107 0208 	add.w	r2, r7, #8
 80034dc:	f107 0310 	add.w	r3, r7, #16
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 ff18 	bl	8004318 <_ZSt3maxIjERKT_S2_S2_>
 80034e8:	4603      	mov	r3, r0
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4423      	add	r3, r4
 80034ee:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7fe fdef 	bl	80020d4 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80034f6:	4602      	mov	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d306      	bcc.n	800350c <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x7c>
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 ff5d 	bl	80043be <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>
 8003504:	4602      	mov	r2, r0
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4293      	cmp	r3, r2
 800350a:	d904      	bls.n	8003516 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x86>
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 ff56 	bl	80043be <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>
 8003512:	4603      	mov	r3, r0
 8003514:	e000      	b.n	8003518 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x88>
 8003516:	697b      	ldr	r3, [r7, #20]
      }
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}

08003520 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj+0x1e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6839      	ldr	r1, [r7, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 ff53 	bl	80043e0 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>
 800353a:	4603      	mov	r3, r0
 800353c:	e000      	b.n	8003540 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj+0x20>
 800353e:	2300      	movs	r3, #0
      }
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZSt34__uninitialized_move_if_noexcept_aIPPhS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 ff51 	bl	80043fe <_ZSt32__make_move_if_noexcept_iteratorIPhSt13move_iteratorIPS0_EET0_PT_>
 800355c:	4604      	mov	r4, r0
 800355e:	68b8      	ldr	r0, [r7, #8]
 8003560:	f000 ff4d 	bl	80043fe <_ZSt32__make_move_if_noexcept_iteratorIPhSt13move_iteratorIPS0_EET0_PT_>
 8003564:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4620      	mov	r0, r4
 800356c:	f000 ff56 	bl	800441c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPhES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003570:	4603      	mov	r3, r0
    }
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bd90      	pop	{r4, r7, pc}

0800357a <_ZSt27__uninitialized_default_n_aIPtjtET_S1_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 ff58 	bl	800443e <_ZSt25__uninitialized_default_nIPtjET_S1_T0_>
 800358e:	4603      	mov	r3, r0
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 ff5a 	bl	800445e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 80035aa:	4604      	mov	r4, r0
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7fe fe37 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 80035b2:	4603      	mov	r3, r0
 80035b4:	1ae2      	subs	r2, r4, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf34      	ite	cc
 80035bc:	2301      	movcc	r3, #1
 80035be:	2300      	movcs	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f005 ffc6 	bl	800955a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7fe fe26 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 80035d4:	4604      	mov	r4, r0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7fe fe22 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 80035dc:	4603      	mov	r3, r0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	f107 0208 	add.w	r2, r7, #8
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fe94 	bl	8004318 <_ZSt3maxIjERKT_S2_S2_>
 80035f0:	4603      	mov	r3, r0
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4423      	add	r3, r4
 80035f6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7fe fe11 	bl	8002220 <_ZNKSt6vectorItSaItEE4sizeEv>
 80035fe:	4602      	mov	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4293      	cmp	r3, r2
 8003604:	d306      	bcc.n	8003614 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x7c>
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 ff29 	bl	800445e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 800360c:	4602      	mov	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	4293      	cmp	r3, r2
 8003612:	d904      	bls.n	800361e <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x86>
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 ff22 	bl	800445e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 800361a:	4603      	mov	r3, r0
 800361c:	e000      	b.n	8003620 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x88>
 800361e:	697b      	ldr	r3, [r7, #20]
      }
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd90      	pop	{r4, r7, pc}

08003628 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x1e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 ff1f 	bl	8004480 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8003642:	4603      	mov	r3, r0
 8003644:	e000      	b.n	8003648 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x20>
 8003646:	2300      	movs	r3, #0
      }
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 ff1d 	bl	800449e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8003664:	4604      	mov	r4, r0
 8003666:	68b8      	ldr	r0, [r7, #8]
 8003668:	f000 ff19 	bl	800449e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 800366c:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4620      	mov	r0, r4
 8003674:	f000 ff22 	bl	80044bc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
 8003678:	4603      	mov	r3, r0
    }
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <_ZNKSt6vectorIbSaIbEE3endEv>:
    end() const _GLIBCXX_NOEXCEPT
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_finish; }
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3308      	adds	r3, #8
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fd38 	bl	8001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZNKSt6vectorIbSaIbEE5beginEv>:
    begin() const _GLIBCXX_NOEXCEPT
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_start; }
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fd2a 	bl	8001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_ZNKSt6vectorIbSaIbEE6cbeginEv>:
    cbegin() const noexcept
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_start; }
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd fd1c 	bl	8001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb>:
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b0a5      	sub	sp, #148	; 0x94
 80036dc:	af04      	add	r7, sp, #16
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	1d38      	adds	r0, r7, #4
 80036e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80036e6:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80dc 	beq.w	80038a8 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d0>
	return;
      if (capacity() - size() >= __n)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fef4 	bl	80044de <_ZNKSt6vectorIbSaIbEE8capacityEv>
 80036f6:	4604      	mov	r4, r0
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fe fe37 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	1ae3      	subs	r3, r4, r3
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d038      	beq.n	8003784 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0xac>
	{
	  std::copy_backward(__position, end(),
 8003712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fb00 	bl	8001d1e <_ZNSt6vectorIbSaIbEE3endEv>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f103 0108 	add.w	r1, r3, #8
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fca1 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8003730:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003734:	aa01      	add	r2, sp, #4
 8003736:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800373a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800373e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	1d3a      	adds	r2, r7, #4
 800374a:	ca06      	ldmia	r2, {r1, r2}
 800374c:	4620      	mov	r0, r4
 800374e:	f000 fee8 	bl	8004522 <_ZSt13copy_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>
			     this->_M_impl._M_finish + difference_type(__n));
	  std::fill(__position, __position + difference_type(__n), __x);
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003758:	1d39      	adds	r1, r7, #4
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fc89 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8003760:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800376a:	cb0c      	ldmia	r3, {r2, r3}
 800376c:	1d39      	adds	r1, r7, #4
 800376e:	c903      	ldmia	r1, {r0, r1}
 8003770:	f7fd fd41 	bl	80011f6 <_ZSt4fillSt13_Bit_iteratorS_RKb>
	  this->_M_impl._M_finish += difference_type(__n);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3308      	adds	r3, #8
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd fc59 	bl	8001034 <_ZNSt13_Bit_iteratorpLEi>
 8003782:	e092      	b.n	80038aa <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d2>
	}
      else
	{
	  const size_type __len = 
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d8>)
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fefa 	bl	8004582 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc>
 800378e:	67f8      	str	r0, [r7, #124]	; 0x7c
	    _M_check_len(__n, "vector<bool>::_M_fill_insert");
	  _Bit_pointer __q = this->_M_allocate(__len);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003794:	4618      	mov	r0, r3
 8003796:	f000 ff3c 	bl	8004612 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 800379a:	67b8      	str	r0, [r7, #120]	; 0x78
	  iterator __start(std::__addressof(*__q), 0);
 800379c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800379e:	f000 ff4b 	bl	8004638 <_ZSt11__addressofImEPT_RS0_>
 80037a2:	4601      	mov	r1, r0
 80037a4:	f107 0320 	add.w	r3, r7, #32
 80037a8:	2200      	movs	r2, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fc03 	bl	8000fb6 <_ZNSt13_Bit_iteratorC1EPmj>
	  iterator __i = _M_copy_aligned(begin(), __position, __start);
 80037b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe faa0 	bl	8001cfc <_ZNSt6vectorIbSaIbEE5beginEv>
 80037bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fc9e 	bl	8001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80037cc:	1d3a      	adds	r2, r7, #4
 80037ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fc97 	bl	8001108 <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80037da:	f107 0418 	add.w	r4, r7, #24
 80037de:	aa02      	add	r2, sp, #8
 80037e0:	f107 0320 	add.w	r3, r7, #32
 80037e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80037ec:	466a      	mov	r2, sp
 80037ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80037fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037fe:	cb0c      	ldmia	r3, {r2, r3}
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	4620      	mov	r0, r4
 8003804:	f000 ff23 	bl	800464e <_ZNSt6vectorIbSaIbEE15_M_copy_alignedESt19_Bit_const_iteratorS2_St13_Bit_iterator>
	  std::fill(__i, __i + difference_type(__n), __x);
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800380e:	f107 0118 	add.w	r1, r7, #24
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fc2d 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 8003818:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003822:	cb0c      	ldmia	r3, {r2, r3}
 8003824:	f107 0118 	add.w	r1, r7, #24
 8003828:	c903      	ldmia	r1, {r0, r1}
 800382a:	f7fd fce4 	bl	80011f6 <_ZSt4fillSt13_Bit_iteratorS_RKb>
	  iterator __finish = std::copy(__position, end(),
 800382e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fa72 	bl	8001d1e <_ZNSt6vectorIbSaIbEE3endEv>
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003840:	f107 0118 	add.w	r1, r7, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fc14 	bl	8001072 <_ZNKSt13_Bit_iteratorplEi>
 800384a:	f107 0410 	add.w	r4, r7, #16
 800384e:	aa01      	add	r2, sp, #4
 8003850:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003858:	e882 0003 	stmia.w	r2, {r0, r1}
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	1d3a      	adds	r2, r7, #4
 8003864:	ca06      	ldmia	r2, {r1, r2}
 8003866:	4620      	mov	r0, r4
 8003868:	f000 ff23 	bl	80046b2 <_ZSt4copyISt13_Bit_iteratorS0_ET0_T_S2_S1_>
					__i + difference_type(__n));
	  this->_M_deallocate();
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fd41 	bl	80032f6 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
 8003874:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003876:	f000 ff4c 	bl	8004712 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 800387a:	4603      	mov	r3, r0
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	611a      	str	r2, [r3, #16]
	  this->_M_impl._M_start = __start;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	461a      	mov	r2, r3
 800388a:	f107 0320 	add.w	r3, r7, #32
 800388e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003892:	e882 0003 	stmia.w	r2, {r0, r1}
	  this->_M_impl._M_finish = __finish;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3308      	adds	r3, #8
 800389a:	f107 0210 	add.w	r2, r7, #16
 800389e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80038a6:	e000      	b.n	80038aa <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d2>
	return;
 80038a8:	bf00      	nop
	}
    }
 80038aa:	3784      	adds	r7, #132	; 0x84
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}
 80038b0:	08009858 	.word	0x08009858

080038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 ff27 	bl	800472c <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 80038de:	4603      	mov	r3, r0
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 ff29 	bl	800474c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80038fa:	4604      	mov	r4, r0
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7fe f8df 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003902:	4603      	mov	r3, r0
 8003904:	1ae2      	subs	r2, r4, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	bf34      	ite	cc
 800390c:	2301      	movcc	r3, #1
 800390e:	2300      	movcs	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4618      	mov	r0, r3
 800391a:	f005 fe1e 	bl	800955a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7fe f8ce 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003924:	4604      	mov	r4, r0
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7fe f8ca 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800392c:	4603      	mov	r3, r0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	f107 0208 	add.w	r2, r7, #8
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fcec 	bl	8004318 <_ZSt3maxIjERKT_S2_S2_>
 8003940:	4603      	mov	r3, r0
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4423      	add	r3, r4
 8003946:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7fe f8b9 	bl	8001ac0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800394e:	4602      	mov	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4293      	cmp	r3, r2
 8003954:	d306      	bcc.n	8003964 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7c>
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fef8 	bl	800474c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4293      	cmp	r3, r2
 8003962:	d904      	bls.n	800396e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fef1 	bl	800474c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800396a:	4603      	mov	r3, r0
 800396c:	e000      	b.n	8003970 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x88>
 800396e:	697b      	ldr	r3, [r7, #20]
      }
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd90      	pop	{r4, r7, pc}

08003978 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6839      	ldr	r1, [r7, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 feee 	bl	800476e <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8003992:	4603      	mov	r3, r0
 8003994:	e000      	b.n	8003998 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8003996:	2300      	movs	r3, #0
      }
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 feec 	bl	800478c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80039b4:	4604      	mov	r4, r0
 80039b6:	68b8      	ldr	r0, [r7, #8]
 80039b8:	f000 fee8 	bl	800478c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80039bc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4620      	mov	r0, r4
 80039c4:	f000 fef1 	bl	80047aa <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 80039c8:	4603      	mov	r3, r0
    }
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}

080039d2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fef3 	bl	80047cc <_ZSt8_DestroyIPhEvT_S1_>
    }
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
	if (__p)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 feed 	bl	80047e6 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_ZN9__gnu_cxxeqIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fef0 	bl	8004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003a24:	4603      	mov	r3, r0
 8003a26:	681c      	ldr	r4, [r3, #0]
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f000 feeb 	bl	8004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429c      	cmp	r4, r3
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd90      	pop	{r4, r7, pc}

08003a44 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fed8 	bl	8004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003a54:	4603      	mov	r3, r0
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461c      	mov	r4, r3
 8003a5a:	6838      	ldr	r0, [r7, #0]
 8003a5c:	f000 fed2 	bl	8004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003a60:	4603      	mov	r3, r0
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1ae3      	subs	r3, r4, r3
 8003a66:	109b      	asrs	r3, r3, #2
 8003a68:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x34>)
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	aaaaaaab 	.word	0xaaaaaaab

08003a7c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003a88:	f107 0208 	add.w	r2, r7, #8
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fec1 	bl	800481a <_ZN9__gnu_cxxneIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00d      	beq.n	8003aba <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_+0x3e>
	std::iter_swap(__first1, __first2);
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f865 	bl	8003b70 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f877 	bl	8003b9e <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f873 	bl	8003b9e <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
 8003ab8:	e7e6      	b.n	8003a88 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_+0xc>
      return __first2;
 8003aba:	687b      	ldr	r3, [r7, #4]
    }
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_ZNSt6vectorIhSaIhEEC1EOS1_>:
      vector(vector&& __x) noexcept
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
      : _Base(std::move(__x)) { }
 8003ae6:	687c      	ldr	r4, [r7, #4]
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f7fe fd4b 	bl	8002584 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003aee:	4603      	mov	r3, r0
 8003af0:	4619      	mov	r1, r3
 8003af2:	4620      	mov	r0, r4
 8003af4:	f000 feb5 	bl	8004862 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}

08003b02 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8003b02:	b5b0      	push	{r4, r5, r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fecd 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003b1a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff ff56 	bl	80039d2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 feb7 	bl	800489c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bdb0      	pop	{r4, r5, r7, pc}

08003b38 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	425b      	negs	r3, r3
 8003b52:	440b      	add	r3, r1
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	f107 020c 	add.w	r2, r7, #12
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fcff 	bl	8002564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ffa1 	bl	8003ac4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEdeEv>
 8003b82:	4604      	mov	r4, r0
 8003b84:	463b      	mov	r3, r7
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff9c 	bl	8003ac4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEdeEv>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 fe9c 	bl	80048ce <_ZSt4swapIhSaIhEEvRSt6vectorIT_T0_ES5_>
    }
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd90      	pop	{r4, r7, pc}

08003b9e <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f103 020c 	add.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
	return *this;
 8003bb2:	687b      	ldr	r3, [r7, #4]
      }
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ffed 	bl	8003bc0 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003be6:	4603      	mov	r3, r0
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003bec:	6838      	ldr	r0, [r7, #0]
 8003bee:	f7ff ffe7 	bl	8003bc0 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ffde 	bl	8003bc0 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003c04:	4603      	mov	r3, r0
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	601a      	str	r2, [r3, #0]
    }
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f1a3 020c 	sub.w	r2, r3, #12
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]
	return *this;
 8003c28:	687b      	ldr	r3, [r7, #4]
      }
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_ZN9__gnu_cxxeqIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003c36:	b590      	push	{r4, r7, lr}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fe51 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003c46:	4603      	mov	r3, r0
 8003c48:	681c      	ldr	r4, [r3, #0]
 8003c4a:	6838      	ldr	r0, [r7, #0]
 8003c4c:	f000 fe4c 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003c50:	4603      	mov	r3, r0
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	429c      	cmp	r4, r3
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd90      	pop	{r4, r7, pc}

08003c66 <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003c66:	b590      	push	{r4, r7, lr}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fe39 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003c76:	4603      	mov	r3, r0
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	6838      	ldr	r0, [r7, #0]
 8003c7e:	f000 fe33 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003c82:	4603      	mov	r3, r0
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1ae3      	subs	r3, r4, r3
 8003c88:	109b      	asrs	r3, r3, #2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}

08003c92 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003c9e:	f107 0208 	add.w	r2, r7, #8
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fe28 	bl	80048fe <_ZN9__gnu_cxxneIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0x3e>
	std::iter_swap(__first1, __first2);
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f857 	bl	8003d6a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003cbc:	f107 030c 	add.w	r3, r7, #12
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f869 	bl	8003d98 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f865 	bl	8003d98 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
 8003cce:	e7e6      	b.n	8003c9e <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0xc>
      return __first2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
    }
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fe0a 	bl	800492e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	68b8      	ldr	r0, [r7, #8]
 8003d1e:	f000 fe06 	bl	800492e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003d22:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4619      	mov	r1, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 fe0b 	bl	8004944 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003d2e:	4603      	mov	r3, r0
    }
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd90      	pop	{r4, r7, pc}

08003d38 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	425b      	negs	r3, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	f107 020c 	add.w	r2, r7, #12
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fcfc 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8003d6a:	b590      	push	{r4, r7, lr}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ffaf 	bl	8003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	463b      	mov	r3, r7
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ffaa 	bl	8003cda <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f000 fe00 	bl	8004990 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
    }
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}

08003d98 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
	return *this;
 8003daa:	687b      	ldr	r3, [r7, #4]
      }
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fdb2 	bl	800492e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	68b8      	ldr	r0, [r7, #8]
 8003dce:	f000 fdae 	bl	800492e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003dd2:	4603      	mov	r3, r0
						__result);
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f000 fdf8 	bl	80049ce <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003dde:	4603      	mov	r3, r0
    }
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd90      	pop	{r4, r7, pc}

08003de8 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	1f1a      	subs	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
	return *this;
 8003dfa:	687b      	ldr	r3, [r7, #4]
      }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <_ZN9__gnu_cxxeqIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fe01 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	681c      	ldr	r4, [r3, #0]
 8003e1c:	6838      	ldr	r0, [r7, #0]
 8003e1e:	f000 fdfc 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003e22:	4603      	mov	r3, r0
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	429c      	cmp	r4, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fde9 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461c      	mov	r4, r3
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f000 fde3 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003e54:	4603      	mov	r3, r0
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1ae3      	subs	r3, r4, r3
 8003e5a:	105b      	asrs	r3, r3, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd90      	pop	{r4, r7, pc}

08003e64 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003e70:	f107 0208 	add.w	r2, r7, #8
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fdd8 	bl	8004a30 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_+0x3e>
	std::iter_swap(__first1, __first2);
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f857 	bl	8003f3c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f869 	bl	8003f6a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f865 	bl	8003f6a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8003ea0:	e7e6      	b.n	8003e70 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_+0xc>
      return __first2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
    }
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 8003eda:	b590      	push	{r4, r7, lr}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fdba 	bl	8004a60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 8003eec:	4604      	mov	r4, r0
 8003eee:	68b8      	ldr	r0, [r7, #8]
 8003ef0:	f000 fdb6 	bl	8004a60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 8003ef4:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4620      	mov	r0, r4
 8003efc:	f000 fdbb 	bl	8004a76 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>
 8003f00:	4603      	mov	r3, r0
    }
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}

08003f0a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	425b      	negs	r3, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	f107 020c 	add.w	r2, r7, #12
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fd94 	bl	8002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ffaf 	bl	8003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	463b      	mov	r3, r7
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ffaa 	bl	8003eac <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f000 fdb0 	bl	8004ac2 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}

08003f6a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
	return *this;
 8003f7c:	687b      	ldr	r3, [r7, #4]
      }
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fd62 	bl	8004a60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	68b8      	ldr	r0, [r7, #8]
 8003fa0:	f000 fd5e 	bl	8004a60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 8003fa4:	4603      	mov	r3, r0
						__result);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4620      	mov	r0, r4
 8003fac:	f000 fda8 	bl	8004b00 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>
 8003fb0:	4603      	mov	r3, r0
    }
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}

08003fba <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1e9a      	subs	r2, r3, #2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
	return *this;
 8003fcc:	687b      	ldr	r3, [r7, #4]
      }
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003fda:	b082      	sub	sp, #8
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	1d38      	adds	r0, r7, #4
 8003fe6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003fea:	61fb      	str	r3, [r7, #28]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003fec:	f107 021c 	add.w	r2, r7, #28
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc ffa4 	bl	8000f42 <_ZNKSt18_Bit_iterator_baseneERKS_>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_+0x48>
	std::iter_swap(__first1, __first2);
 8004000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004004:	cb0c      	ldmia	r3, {r2, r3}
 8004006:	1d39      	adds	r1, r7, #4
 8004008:	c903      	ldmia	r1, {r0, r1}
 800400a:	f000 f854 	bl	80040b6 <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc fff5 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
 8004016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fff0 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
 8004020:	e7e4      	b.n	8003fec <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_+0x12>
      return __first2;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	461a      	mov	r2, r3
 8004026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800402e:	e882 0003 	stmia.w	r2, {r0, r1}
    }
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800403c:	b002      	add	sp, #8
 800403e:	4770      	bx	lr

08004040 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_ZSt4moveISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    move(_II __first, _II __last, _OI __result)
 8004056:	b082      	sub	sp, #8
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b08d      	sub	sp, #52	; 0x34
 800405c:	af04      	add	r7, sp, #16
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	1d38      	adds	r0, r7, #4
 8004062:	e880 0006 	stmia.w	r0, {r1, r2}
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8004068:	f107 0010 	add.w	r0, r7, #16
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004072:	f000 fd6b 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 8004076:	f107 0018 	add.w	r0, r7, #24
 800407a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800407e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004082:	f000 fd63 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
				       std::__miter_base(__last), __result);
 8004086:	68fc      	ldr	r4, [r7, #12]
 8004088:	aa01      	add	r2, sp, #4
 800408a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800408e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004092:	e882 0003 	stmia.w	r2, {r0, r1}
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f107 0210 	add.w	r2, r7, #16
 80040a0:	ca06      	ldmia	r2, {r1, r2}
 80040a2:	4620      	mov	r0, r4
 80040a4:	f000 fd66 	bl	8004b74 <_ZSt14__copy_move_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	3724      	adds	r7, #36	; 0x24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040b2:	b002      	add	sp, #8
 80040b4:	4770      	bx	lr

080040b6 <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80040b6:	b590      	push	{r4, r7, lr}
 80040b8:	b089      	sub	sp, #36	; 0x24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	f107 0408 	add.w	r4, r7, #8
 80040c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80040c4:	4639      	mov	r1, r7
 80040c6:	e881 000c 	stmia.w	r1, {r2, r3}
      swap(*__a, *__b);
 80040ca:	f107 0310 	add.w	r3, r7, #16
 80040ce:	f107 0208 	add.w	r2, r7, #8
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc ff7f 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 80040da:	f107 0318 	add.w	r3, r7, #24
 80040de:	463a      	mov	r2, r7
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc ff78 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 80040e8:	f107 0318 	add.w	r3, r7, #24
 80040ec:	cb0c      	ldmia	r3, {r2, r3}
 80040ee:	f107 0110 	add.w	r1, r7, #16
 80040f2:	c903      	ldmia	r1, {r0, r1}
 80040f4:	f7fc fe68 	bl	8000dc8 <_ZSt4swapSt14_Bit_referenceS_>
    }
 80040f8:	bf00      	nop
 80040fa:	3724      	adds	r7, #36	; 0x24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}

08004100 <_ZSt13move_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004100:	b082      	sub	sp, #8
 8004102:	b590      	push	{r4, r7, lr}
 8004104:	b08d      	sub	sp, #52	; 0x34
 8004106:	af04      	add	r7, sp, #16
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	1d38      	adds	r0, r7, #4
 800410c:	e880 0006 	stmia.w	r0, {r1, r2}
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8004112:	f107 0010 	add.w	r0, r7, #16
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	e893 0006 	ldmia.w	r3, {r1, r2}
 800411c:	f000 fd16 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 8004120:	f107 0018 	add.w	r0, r7, #24
 8004124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004128:	e893 0006 	ldmia.w	r3, {r1, r2}
 800412c:	f000 fd0e 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
						__result);
 8004130:	68fc      	ldr	r4, [r7, #12]
 8004132:	aa01      	add	r2, sp, #4
 8004134:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004138:	e893 0003 	ldmia.w	r3, {r0, r1}
 800413c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f107 0210 	add.w	r2, r7, #16
 800414a:	ca06      	ldmia	r2, {r1, r2}
 800414c:	4620      	mov	r0, r4
 800414e:	f000 fd49 	bl	8004be4 <_ZSt23__copy_move_backward_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800415c:	b002      	add	sp, #8
 800415e:	4770      	bx	lr

08004160 <_ZNSaISt6vectorIhSaIhEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fd73 	bl	8004c54 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE10deallocateERS3_PS2_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fd6e 	bl	8004c6a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d00a      	beq.n	80041d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ffe9 	bl	8004196 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd5c 	bl	8004c84 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>
	  for (; __first != __last; ++__first)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	330c      	adds	r3, #12
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	e7f0      	b.n	80041b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0xa>
	}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_ZNSaIPhEC1Ev>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fd58 	bl	8004c9a <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fd53 	bl	8004cb0 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPhEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZNSaItEC1Ev>:
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fd4a 	bl	8004cca <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fd45 	bl	8004ce0 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <_ZNSaImEC1Ev>:
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fd3c 	bl	8004cfa <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	  if (_M_end_of_storage)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(_M_end_of_storage[-1]) + 1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	3b04      	subs	r3, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f9c8 	bl	8004638 <_ZSt11__addressofImEPT_RS0_>
 80042a8:	4603      	mov	r3, r0
 80042aa:	3304      	adds	r3, #4
 80042ac:	e000      	b.n	80042b0 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 80042ae:	2300      	movs	r3, #0
	}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fd21 	bl	8004d10 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_ZSt25__uninitialized_default_nIPSt6vectorIhSaIhEEjET_S4_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fd1f 	bl	8004d2a <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_>
 80042ec:	4603      	mov	r3, r0
    }
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fd3b 	bl	8004d7c <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004306:	4603      	mov	r3, r0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd2b 	bl	8004d64 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS3_>
 800430e:	4603      	mov	r3, r0
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d201      	bcs.n	8004332 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	e000      	b.n	8004334 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004332:	687b      	ldr	r3, [r7, #4]
    }
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800434a:	2200      	movs	r2, #0
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fd1f 	bl	8004d92 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>
 8004354:	4603      	mov	r3, r0
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIhSaIhEESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fd31 	bl	8004dd4 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEC1ES3_>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorIhSaIhEEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fd2f 	bl	8004df2 <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorIhSaIhEEES4_ET0_T_S7_S6_>
 8004394:	4603      	mov	r3, r0
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZSt25__uninitialized_default_nIPPhjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fd31 	bl	8004e16 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPhjEET_S4_T0_>
 80043b4:	4603      	mov	r3, r0
    }
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fd43 	bl	8004e54 <_ZNKSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd33 	bl	8004e3c <_ZNSt16allocator_traitsISaIPhEE8max_sizeERKS1_>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80043ea:	2200      	movs	r2, #0
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fd3b 	bl	8004e6a <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_ZSt32__make_move_if_noexcept_iteratorIPhSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fd4a 	bl	8004ea6 <_ZNSt13move_iteratorIPPhEC1ES1_>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPhES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fd48 	bl	8004ec4 <_ZSt18uninitialized_copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>
 8004434:	4603      	mov	r3, r0
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <_ZSt25__uninitialized_default_nIPtjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fd4a 	bl	8004ee8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPtjEET_S3_T0_>
 8004454:	4603      	mov	r3, r0
    }
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <_ZNKSt6vectorItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd5c 	bl	8004f26 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800446e:	4603      	mov	r3, r0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd4c 	bl	8004f0e <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 8004476:	4603      	mov	r3, r0
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800448a:	2200      	movs	r2, #0
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fd54 	bl	8004f3c <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 8004494:	4603      	mov	r3, r0
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fd63 	bl	8004f78 <_ZNSt13move_iteratorIPtEC1ES0_>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fd61 	bl	8004f96 <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <_ZNKSt6vectorIbSaIbEE8capacityEv>:
    capacity() const _GLIBCXX_NOEXCEPT
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
		       - begin()); }
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fecf 	bl	800428c <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 80044ee:	4601      	mov	r1, r0
 80044f0:	f107 0308 	add.w	r3, r7, #8
 80044f4:	2200      	movs	r2, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc fdf5 	bl	80010e6 <_ZNSt19_Bit_const_iteratorC1EPmj>
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f8cc 	bl	80036a0 <_ZNKSt6vectorIbSaIbEE5beginEv>
 8004508:	f107 0210 	add.w	r2, r7, #16
 800450c:	f107 0308 	add.w	r3, r7, #8
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc fd26 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8004518:	4603      	mov	r3, r0
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <_ZSt13copy_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004522:	b082      	sub	sp, #8
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b08d      	sub	sp, #52	; 0x34
 8004528:	af04      	add	r7, sp, #16
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	1d38      	adds	r0, r7, #4
 800452e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004534:	f107 0010 	add.w	r0, r7, #16
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800453e:	f000 fb05 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 8004542:	f107 0018 	add.w	r0, r7, #24
 8004546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800454a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800454e:	f000 fafd 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
	       __result));
 8004552:	68fc      	ldr	r4, [r7, #12]
 8004554:	aa01      	add	r2, sp, #4
 8004556:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800455a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800455e:	e882 0003 	stmia.w	r2, {r0, r1}
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f107 0210 	add.w	r2, r7, #16
 800456c:	ca06      	ldmia	r2, {r1, r2}
 800456e:	4620      	mov	r0, r4
 8004570:	f000 fd23 	bl	8004fba <_ZSt23__copy_move_backward_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	3724      	adds	r7, #36	; 0x24
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800457e:	b002      	add	sp, #8
 8004580:	4770      	bx	lr

08004582 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc>:
    _M_check_len(size_type __n, const char* __s) const
 8004582:	b590      	push	{r4, r7, lr}
 8004584:	b087      	sub	sp, #28
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
      if (max_size() - size() < __n)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fd4c 	bl	800502c <_ZNKSt6vectorIbSaIbEE8max_sizeEv>
 8004594:	4604      	mov	r4, r0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7fd fee8 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 800459c:	4603      	mov	r3, r0
 800459e:	1ae2      	subs	r2, r4, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf34      	ite	cc
 80045a6:	2301      	movcc	r3, #1
 80045a8:	2300      	movcs	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x36>
	__throw_length_error(__N(__s));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 ffd1 	bl	800955a <_ZSt20__throw_length_errorPKc>
      const size_type __len = size() + std::max(size(), __n);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7fd fed7 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80045be:	4604      	mov	r4, r0
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7fd fed3 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80045c6:	4603      	mov	r3, r0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	f107 0208 	add.w	r2, r7, #8
 80045ce:	f107 0310 	add.w	r3, r7, #16
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe9f 	bl	8004318 <_ZSt3maxIjERKT_S2_S2_>
 80045da:	4603      	mov	r3, r0
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4423      	add	r3, r4
 80045e0:	617b      	str	r3, [r7, #20]
      return (__len < size() || __len > max_size()) ? max_size() : __len;
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7fd fec2 	bl	800236c <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80045e8:	4602      	mov	r2, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d306      	bcc.n	80045fe <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x7c>
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fd1b 	bl	800502c <_ZNKSt6vectorIbSaIbEE8max_sizeEv>
 80045f6:	4602      	mov	r2, r0
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d904      	bls.n	8004608 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x86>
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fd14 	bl	800502c <_ZNKSt6vectorIbSaIbEE8max_sizeEv>
 8004604:	4603      	mov	r3, r0
 8004606:	e000      	b.n	800460a <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x88>
 8004608:	697b      	ldr	r3, [r7, #20]
    }
 800460a:	4618      	mov	r0, r3
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd90      	pop	{r4, r7, pc}

08004612 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004612:	b590      	push	{r4, r7, lr}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 800461c:	687c      	ldr	r4, [r7, #4]
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f000 f877 	bl	8004712 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8004624:	4603      	mov	r3, r0
 8004626:	4619      	mov	r1, r3
 8004628:	4620      	mov	r0, r4
 800462a:	f000 fd1d 	bl	8005068 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_ZNSt6vectorIbSaIbEE15_M_copy_alignedESt19_Bit_const_iteratorS2_St13_Bit_iterator>:
    _M_copy_aligned(const_iterator __first, const_iterator __last,
 800464e:	b590      	push	{r4, r7, lr}
 8004650:	b08f      	sub	sp, #60	; 0x3c
 8004652:	af04      	add	r7, sp, #16
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	4639      	mov	r1, r7
 800465a:	e881 000c 	stmia.w	r1, {r2, r3}
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd0e 	bl	8005086 <_ZSt4copyIPmS0_ET0_T_S2_S1_>
 800466a:	6278      	str	r0, [r7, #36]	; 0x24
      return std::copy(const_iterator(__last._M_p, 0), __last,
 800466c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800466e:	f107 0314 	add.w	r3, r7, #20
 8004672:	2200      	movs	r2, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f7fc fd36 	bl	80010e6 <_ZNSt19_Bit_const_iteratorC1EPmj>
 800467a:	f107 031c 	add.w	r3, r7, #28
 800467e:	2200      	movs	r2, #0
 8004680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fc97 	bl	8000fb6 <_ZNSt13_Bit_iteratorC1EPmj>
		       iterator(__q, 0));
 8004688:	68fc      	ldr	r4, [r7, #12]
 800468a:	aa01      	add	r2, sp, #4
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004694:	e882 0003 	stmia.w	r2, {r0, r1}
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	f107 0214 	add.w	r2, r7, #20
 80046a2:	ca06      	ldmia	r2, {r1, r2}
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 fd06 	bl	80050b6 <_ZSt4copyISt19_Bit_const_iteratorSt13_Bit_iteratorET0_T_S3_S2_>
    }
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	372c      	adds	r7, #44	; 0x2c
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}

080046b2 <_ZSt4copyISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80046b2:	b082      	sub	sp, #8
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b08d      	sub	sp, #52	; 0x34
 80046b8:	af04      	add	r7, sp, #16
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	1d38      	adds	r0, r7, #4
 80046be:	e880 0006 	stmia.w	r0, {r1, r2}
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
	      (std::__miter_base(__first), std::__miter_base(__last),
 80046c4:	f107 0010 	add.w	r0, r7, #16
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80046ce:	f000 fa3d 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 80046d2:	f107 0018 	add.w	r0, r7, #24
 80046d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80046de:	f000 fa35 	bl	8004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
	       __result));
 80046e2:	68fc      	ldr	r4, [r7, #12]
 80046e4:	aa01      	add	r2, sp, #4
 80046e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f107 0210 	add.w	r2, r7, #16
 80046fc:	ca06      	ldmia	r2, {r1, r2}
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 fd09 	bl	8005116 <_ZSt14__copy_move_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	3724      	adds	r7, #36	; 0x24
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800470e:	b002      	add	sp, #8
 8004710:	4770      	bx	lr

08004712 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	331f      	adds	r3, #31
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fd22 	bl	8005186 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8004742:	4603      	mov	r3, r0
    }
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fd34 	bl	80051c4 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800475c:	4603      	mov	r3, r0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd24 	bl	80051ac <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8004764:	4603      	mov	r3, r0
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004778:	2200      	movs	r2, #0
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fd2c 	bl	80051da <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8004782:	4603      	mov	r3, r0
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fd39 	bl	8005212 <_ZNSt13move_iteratorIPhEC1ES0_>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fd37 	bl	8005230 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fd3b 	bl	8005254 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fd37 	bl	800526a <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <_ZN9__gnu_cxxneIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800481a:	b590      	push	{r4, r7, lr}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ffed 	bl	8004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800482a:	4603      	mov	r3, r0
 800482c:	681c      	ldr	r4, [r3, #0]
 800482e:	6838      	ldr	r0, [r7, #0]
 8004830:	f7ff ffe8 	bl	8004804 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004834:	4603      	mov	r3, r0
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429c      	cmp	r4, r3
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}

0800484a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fd3c 	bl	80052d0 <_ZNSaIhED1Ev>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&& __x) noexcept
 8004862:	b590      	push	{r4, r7, lr}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
 800486c:	687c      	ldr	r4, [r7, #4]
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	f7ff f820 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004874:	4603      	mov	r3, r0
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fd04 	bl	8005284 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 800487c:	4603      	mov	r3, r0
 800487e:	4619      	mov	r1, r3
 8004880:	4620      	mov	r0, r4
 8004882:	f000 fd0a 	bl	800529a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS0_>
      { this->_M_impl._M_swap_data(__x._M_impl); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fd2b 	bl	80052e8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bd90      	pop	{r4, r7, pc}

0800489c <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80048b4:	461a      	mov	r2, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff f899 	bl	80039ee <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ffc3 	bl	800484a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <_ZSt4swapIhSaIhEEvRSt6vectorIT_T0_ES5_>:
    { return !(__x < __y); }

  /// See std::vector::swap().
  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fd24 	bl	8005328 <_ZNSt6vectorIhSaIhEE4swapERS1_>
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <_ZN9__gnu_cxxneIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80048fe:	b590      	push	{r4, r7, lr}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff ffed 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 800490e:	4603      	mov	r3, r0
 8004910:	681c      	ldr	r4, [r3, #0]
 8004912:	6838      	ldr	r0, [r7, #0]
 8004914:	f7ff ffe8 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8004918:	4603      	mov	r3, r0
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429c      	cmp	r4, r3
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}

0800492e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fd06 	bl	8005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004956:	4604      	mov	r4, r0
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f000 fd02 	bl	8005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800495e:	4605      	mov	r5, r0
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fcfe 	bl	8005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	4629      	mov	r1, r5
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fd06 	bl	800537e <_ZSt13__copy_move_aILb1EPPhS1_ET1_T0_S3_S2_>
 8004972:	4603      	mov	r3, r0
 8004974:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004976:	f107 0214 	add.w	r2, r7, #20
 800497a:	f107 0310 	add.w	r3, r7, #16
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f7fd fee9 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8004986:	693b      	ldr	r3, [r7, #16]
    }
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bdb0      	pop	{r4, r5, r7, pc}

08004990 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff f9a9 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80049a0:	4603      	mov	r3, r0
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80049a6:	6838      	ldr	r0, [r7, #0]
 80049a8:	f7ff f9a3 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80049ac:	4603      	mov	r3, r0
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff f99a 	bl	8003cf2 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80049be:	4603      	mov	r3, r0
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	601a      	str	r2, [r3, #0]
    }
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80049ce:	b5b0      	push	{r4, r5, r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fcc1 	bl	8005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80049e0:	4604      	mov	r4, r0
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f000 fcbd 	bl	8005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80049e8:	4605      	mov	r5, r0
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fcb9 	bl	8005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4629      	mov	r1, r5
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 fcd3 	bl	80053a2 <_ZSt22__copy_move_backward_aILb1EPPhS1_ET1_T0_S3_S2_>
 80049fc:	4603      	mov	r3, r0
 80049fe:	617b      	str	r3, [r7, #20]
		   std::__niter_base(__result)));
 8004a00:	f107 0214 	add.w	r2, r7, #20
 8004a04:	f107 0310 	add.w	r3, r7, #16
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd fea4 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8004a10:	693b      	ldr	r3, [r7, #16]
    }
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bdb0      	pop	{r4, r5, r7, pc}

08004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ffed 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8004a40:	4603      	mov	r3, r0
 8004a42:	681c      	ldr	r4, [r3, #0]
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f7ff ffe8 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd90      	pop	{r4, r7, pc}

08004a60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>:
    __miter_base(_Iterator __it)
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004a76:	b5b0      	push	{r4, r5, r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fc9f 	bl	80053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	68b8      	ldr	r0, [r7, #8]
 8004a8c:	f000 fc9b 	bl	80053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004a90:	4605      	mov	r5, r0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fc97 	bl	80053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 fc9f 	bl	80053e2 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004aa8:	f107 0214 	add.w	r2, r7, #20
 8004aac:	f107 0310 	add.w	r3, r7, #16
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd ffd1 	bl	8002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8004ab8:	693b      	ldr	r3, [r7, #16]
    }
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bdb0      	pop	{r4, r5, r7, pc}

08004ac2 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff f9f9 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f7ff f9f3 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004ae6:	f107 030e 	add.w	r3, r7, #14
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f9ea 	bl	8003ec4 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8004af0:	4603      	mov	r3, r0
 8004af2:	881a      	ldrh	r2, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	801a      	strh	r2, [r3, #0]
    }
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fc5a 	bl	80053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004b12:	4604      	mov	r4, r0
 8004b14:	68b8      	ldr	r0, [r7, #8]
 8004b16:	f000 fc56 	bl	80053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fc52 	bl	80053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	4629      	mov	r1, r5
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fc6c 	bl	8005406 <_ZSt22__copy_move_backward_aILb1EPtS0_ET1_T0_S2_S1_>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	617b      	str	r3, [r7, #20]
		   std::__niter_base(__result)));
 8004b32:	f107 0214 	add.w	r2, r7, #20
 8004b36:	f107 0310 	add.w	r3, r7, #16
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fd ff8c 	bl	8002a5a <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8004b42:	693b      	ldr	r3, [r7, #16]
    }
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bdb0      	pop	{r4, r5, r7, pc}

08004b4c <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>:
    __miter_base(_Iterator __it)
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b64:	e882 0003 	stmia.w	r2, {r0, r1}
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_ZSt14__copy_move_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004b74:	b082      	sub	sp, #8
 8004b76:	b590      	push	{r4, r7, lr}
 8004b78:	b08f      	sub	sp, #60	; 0x3c
 8004b7a:	af04      	add	r7, sp, #16
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	1d38      	adds	r0, r7, #4
 8004b80:	e880 0006 	stmia.w	r0, {r1, r2}
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004b86:	f107 0010 	add.w	r0, r7, #16
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004b90:	f000 fc4b 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004b94:	f107 0018 	add.w	r0, r7, #24
 8004b98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ba0:	f000 fc43 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004ba4:	f107 0020 	add.w	r0, r7, #32
 8004ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bac:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004bb0:	f000 fc3b 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
					     std::__niter_base(__result)));
 8004bb4:	68fc      	ldr	r4, [r7, #12]
 8004bb6:	aa01      	add	r2, sp, #4
 8004bb8:	f107 0320 	add.w	r3, r7, #32
 8004bbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f107 0210 	add.w	r2, r7, #16
 8004bce:	ca06      	ldmia	r2, {r1, r2}
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f000 fc3e 	bl	8005452 <_ZSt13__copy_move_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	372c      	adds	r7, #44	; 0x2c
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004be0:	b002      	add	sp, #8
 8004be2:	4770      	bx	lr

08004be4 <_ZSt23__copy_move_backward_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004be4:	b082      	sub	sp, #8
 8004be6:	b590      	push	{r4, r7, lr}
 8004be8:	b08f      	sub	sp, #60	; 0x3c
 8004bea:	af04      	add	r7, sp, #16
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	1d38      	adds	r0, r7, #4
 8004bf0:	e880 0006 	stmia.w	r0, {r1, r2}
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  (std::__niter_base(__first), std::__niter_base(__last),
 8004bf6:	f107 0010 	add.w	r0, r7, #16
 8004bfa:	1d3b      	adds	r3, r7, #4
 8004bfc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c00:	f000 fc13 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004c04:	f107 0018 	add.w	r0, r7, #24
 8004c08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c10:	f000 fc0b 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004c14:	f107 0020 	add.w	r0, r7, #32
 8004c18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c20:	f000 fc03 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
		   std::__niter_base(__result)));
 8004c24:	68fc      	ldr	r4, [r7, #12]
 8004c26:	aa01      	add	r2, sp, #4
 8004c28:	f107 0320 	add.w	r3, r7, #32
 8004c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c30:	e882 0003 	stmia.w	r2, {r0, r1}
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f107 0210 	add.w	r2, r7, #16
 8004c3e:	ca06      	ldmia	r2, {r1, r2}
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 fc28 	bl	8005496 <_ZSt22__copy_move_backward_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	372c      	adds	r7, #44	; 0x2c
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c50:	b002      	add	sp, #8
 8004c52:	4770      	bx	lr

08004c54 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004c76:	68b8      	ldr	r0, [r7, #8]
 8004c78:	f004 fc6a 	bl	8009550 <_ZdlPv>
      }
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fe ff38 	bl	8003b02 <_ZNSt6vectorIhSaIhEED1Ev>
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004cbc:	68b8      	ldr	r0, [r7, #8]
 8004cbe:	f004 fc47 	bl	8009550 <_ZdlPv>
      }
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(pointer __p, size_type)
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004cec:	68b8      	ldr	r0, [r7, #8]
 8004cee:	f004 fc2f 	bl	8009550 <_ZdlPv>
      }
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(pointer __p, size_type)
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004d1c:	68b8      	ldr	r0, [r7, #8]
 8004d1e:	f004 fc17 	bl	8009550 <_ZdlPv>
      }
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, ++__cur)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_+0x30>
		std::_Construct(std::__addressof(*__cur));
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fa29 	bl	8004196 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fbc7 	bl	80054da <_ZSt10_ConstructISt6vectorIhSaIhEEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, ++__cur)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	330c      	adds	r3, #12
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e7ee      	b.n	8004d38 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_+0xe>
	      return __cur;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fbc7 	bl	8005500 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fbae 	bl	8005500 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bf8c      	ite	hi
 8004dac:	2301      	movhi	r3, #1
 8004dae:	2300      	movls	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004db6:	f004 fbcd 	bl	8009554 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f004 fba9 	bl	800951c <_Znwj>
 8004dca:	4603      	mov	r3, r0
      }
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEC1ES3_>:
      move_iterator(iterator_type __i)
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorIhSaIhEEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fb88 	bl	800551c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_>
 8004e0c:	4603      	mov	r3, r0
    }
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPhjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fba4 	bl	800557a <_ZSt6fill_nIPPhjS0_ET_S2_T0_RKT1_>
 8004e32:	4603      	mov	r3, r0
	}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <_ZNSt16allocator_traitsISaIPhEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fbac 	bl	80055a2 <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <_ZNKSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fb93 	bl	80055a2 <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4293      	cmp	r3, r2
 8004e82:	bf8c      	ite	hi
 8004e84:	2301      	movhi	r3, #1
 8004e86:	2300      	movls	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004e8e:	f004 fb61 	bl	8009554 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f004 fb40 	bl	800951c <_Znwj>
 8004e9c:	4603      	mov	r3, r0
      }
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_ZNSt13move_iteratorIPPhEC1ES1_>:
      move_iterator(iterator_type __i)
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <_ZSt18uninitialized_copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fb6e 	bl	80055ba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPhES4_EET0_T_S7_S6_>
 8004ede:	4603      	mov	r3, r0
    }
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPtjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	81fb      	strh	r3, [r7, #14]
 8004ef6:	f107 030e 	add.w	r3, r7, #14
 8004efa:	461a      	mov	r2, r3
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fb6b 	bl	80055da <_ZSt6fill_nIPtjtET_S1_T0_RKT1_>
 8004f04:	4603      	mov	r3, r0
	}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fb73 	bl	8005602 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fb5a 	bl	8005602 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4293      	cmp	r3, r2
 8004f54:	bf8c      	ite	hi
 8004f56:	2301      	movhi	r3, #1
 8004f58:	2300      	movls	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004f60:	f004 faf8 	bl	8009554 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f004 fad7 	bl	800951c <_Znwj>
 8004f6e:	4603      	mov	r3, r0
      }
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_ZNSt13move_iteratorIPtEC1ES0_>:
      move_iterator(iterator_type __i)
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fb35 	bl	800561a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>
 8004fb0:	4603      	mov	r3, r0
    }
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZSt23__copy_move_backward_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004fba:	b082      	sub	sp, #8
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b08f      	sub	sp, #60	; 0x3c
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	1d38      	adds	r0, r7, #4
 8004fc6:	e880 0006 	stmia.w	r0, {r1, r2}
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
		  (std::__niter_base(__first), std::__niter_base(__last),
 8004fcc:	f107 0010 	add.w	r0, r7, #16
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fd6:	f000 fa28 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004fda:	f107 0018 	add.w	r0, r7, #24
 8004fde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fe2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fe6:	f000 fa20 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004fea:	f107 0020 	add.w	r0, r7, #32
 8004fee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ff2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ff6:	f000 fa18 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
		   std::__niter_base(__result)));
 8004ffa:	68fc      	ldr	r4, [r7, #12]
 8004ffc:	aa01      	add	r2, sp, #4
 8004ffe:	f107 0320 	add.w	r3, r7, #32
 8005002:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005006:	e882 0003 	stmia.w	r2, {r0, r1}
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f107 0210 	add.w	r2, r7, #16
 8005014:	ca06      	ldmia	r2, {r1, r2}
 8005016:	4620      	mov	r0, r4
 8005018:	f000 fb0f 	bl	800563a <_ZSt22__copy_move_backward_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	372c      	adds	r7, #44	; 0x2c
 8005020:	46bd      	mov	sp, r7
 8005022:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005026:	b002      	add	sp, #8
 8005028:	4770      	bx	lr
	...

0800502c <_ZNKSt6vectorIbSaIbEE8max_sizeEv>:
    max_size() const _GLIBCXX_NOEXCEPT
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
      const size_type __isize =
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x38>)
 8005036:	60fb      	str	r3, [r7, #12]
	= _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fb2b 	bl	8005696 <_ZNKSt13_Bvector_baseISaIbEE20_M_get_Bit_allocatorEv>
 8005040:	4603      	mov	r3, r0
      const size_type __asize
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb1b 	bl	800567e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 8005048:	60b8      	str	r0, [r7, #8]
	      ? __asize * int(_S_word_bit) : __isize);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005050:	d202      	bcs.n	8005058 <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x2c>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	015b      	lsls	r3, r3, #5
 8005056:	e000      	b.n	800505a <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x2e>
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x38>)
    }
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	7fffffe0 	.word	0x7fffffe0

08005068 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005072:	2200      	movs	r2, #0
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb18 	bl	80056ac <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 800507c:	4603      	mov	r3, r0
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <_ZSt4copyIPmS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8005086:	b590      	push	{r4, r7, lr}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fb28 	bl	80056e8 <_ZSt12__miter_baseIPmET_S1_>
 8005098:	4604      	mov	r4, r0
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f000 fb24 	bl	80056e8 <_ZSt12__miter_baseIPmET_S1_>
 80050a0:	4603      	mov	r3, r0
	       __result));
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 fb29 	bl	80056fe <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_>
 80050ac:	4603      	mov	r3, r0
    }
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd90      	pop	{r4, r7, pc}

080050b6 <_ZSt4copyISt19_Bit_const_iteratorSt13_Bit_iteratorET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80050b6:	b082      	sub	sp, #8
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b08d      	sub	sp, #52	; 0x34
 80050bc:	af04      	add	r7, sp, #16
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	1d38      	adds	r0, r7, #4
 80050c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
	      (std::__miter_base(__first), std::__miter_base(__last),
 80050c8:	f107 0010 	add.w	r0, r7, #16
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80050d2:	f000 fb30 	bl	8005736 <_ZSt12__miter_baseISt19_Bit_const_iteratorET_S1_>
 80050d6:	f107 0018 	add.w	r0, r7, #24
 80050da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80050e2:	f000 fb28 	bl	8005736 <_ZSt12__miter_baseISt19_Bit_const_iteratorET_S1_>
	       __result));
 80050e6:	68fc      	ldr	r4, [r7, #12]
 80050e8:	aa01      	add	r2, sp, #4
 80050ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f107 0210 	add.w	r2, r7, #16
 8005100:	ca06      	ldmia	r2, {r1, r2}
 8005102:	4620      	mov	r0, r4
 8005104:	f000 fb2b 	bl	800575e <_ZSt14__copy_move_a2ILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>
    }
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	3724      	adds	r7, #36	; 0x24
 800510c:	46bd      	mov	sp, r7
 800510e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005112:	b002      	add	sp, #8
 8005114:	4770      	bx	lr

08005116 <_ZSt14__copy_move_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005116:	b082      	sub	sp, #8
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b08f      	sub	sp, #60	; 0x3c
 800511c:	af04      	add	r7, sp, #16
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	1d38      	adds	r0, r7, #4
 8005122:	e880 0006 	stmia.w	r0, {r1, r2}
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005128:	f107 0010 	add.w	r0, r7, #16
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005132:	f000 f97a 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8005136:	f107 0018 	add.w	r0, r7, #24
 800513a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800513e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005142:	f000 f972 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8005146:	f107 0020 	add.w	r0, r7, #32
 800514a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800514e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005152:	f000 f96a 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
					     std::__niter_base(__result)));
 8005156:	68fc      	ldr	r4, [r7, #12]
 8005158:	aa01      	add	r2, sp, #4
 800515a:	f107 0320 	add.w	r3, r7, #32
 800515e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005162:	e882 0003 	stmia.w	r2, {r0, r1}
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f107 0210 	add.w	r2, r7, #16
 8005170:	ca06      	ldmia	r2, {r1, r2}
 8005172:	4620      	mov	r0, r4
 8005174:	f000 fb2b 	bl	80057ce <_ZSt13__copy_move_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	372c      	adds	r7, #44	; 0x2c
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005182:	b002      	add	sp, #8
 8005184:	4770      	bx	lr

08005186 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8005190:	2300      	movs	r3, #0
 8005192:	73fb      	strb	r3, [r7, #15]
 8005194:	f107 030f 	add.w	r3, r7, #15
 8005198:	461a      	mov	r2, r3
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fb38 	bl	8005812 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80051a2:	4603      	mov	r3, r0
	}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fb40 	bl	800583a <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fb27 	bl	800583a <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4293      	cmp	r3, r2
 80051f2:	bf8c      	ite	hi
 80051f4:	2301      	movhi	r3, #1
 80051f6:	2300      	movls	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80051fe:	f004 f9a9 	bl	8009554 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f004 f98a 	bl	800951c <_Znwj>
 8005208:	4603      	mov	r3, r0
      }
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fb04 	bl	8005852 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 800524a:	4603      	mov	r3, r0
    }
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005276:	68b8      	ldr	r0, [r7, #8]
 8005278:	f004 f96a 	bl	8009550 <_ZdlPv>
      }
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS0_>:
	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__a)),
 80052a4:	6838      	ldr	r0, [r7, #0]
 80052a6:	f7ff ffed 	bl	8005284 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 80052aa:	4603      	mov	r3, r0
	  _M_start(), _M_finish(), _M_end_of_storage()
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fadf 	bl	8005872 <_ZNSaIhEC1ERKS_>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	609a      	str	r2, [r3, #8]
	{ }
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fad8 	bl	800588e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fb49 	bl	8004990 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_finish, __x._M_finish);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7ff fb41 	bl	8004990 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f103 0208 	add.w	r2, r3, #8
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7ff fb38 	bl	8004990 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <_ZNSt6vectorIhSaIhEE4swapERS1_>:
      swap(vector& __x) _GLIBCXX_NOEXCEPT
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_swap_data(__x._M_impl);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ffd5 	bl	80052e8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fab7 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005346:	4604      	mov	r4, r0
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fab2 	bl	80038b4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005350:	4603      	mov	r3, r0
 8005352:	4619      	mov	r1, r3
 8005354:	4620      	mov	r0, r4
 8005356:	f000 faa5 	bl	80058a4 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10_S_on_swapERS1_S3_>
      }
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}

08005362 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fabb 	bl	80048e8 <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8005372:	4603      	mov	r3, r0
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <_ZSt13__copy_move_aILb1EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa93 	bl	80058be <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>
 8005398:	4603      	mov	r3, r0
    }
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <_ZSt22__copy_move_backward_aILb1EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
								 __result);
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fa9e 	bl	80058f8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>
 80053bc:	4603      	mov	r3, r0
    }
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fb22 	bl	8004a1a <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80053d6:	4603      	mov	r3, r0
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 faa0 	bl	800593c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 80053fc:	4603      	mov	r3, r0
    }
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZSt22__copy_move_backward_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 faab 	bl	8005976 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bItEEPT_PKS3_S6_S4_>
 8005420:	4603      	mov	r3, r0
    }
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	461a      	mov	r2, r3
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005442:	e882 0003 	stmia.w	r2, {r0, r1}
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <_ZSt13__copy_move_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005452:	b082      	sub	sp, #8
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b08b      	sub	sp, #44	; 0x2c
 8005458:	af04      	add	r7, sp, #16
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	1d38      	adds	r0, r7, #4
 800545e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005464:	2300      	movs	r3, #0
 8005466:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005468:	68fc      	ldr	r4, [r7, #12]
 800546a:	aa01      	add	r2, sp, #4
 800546c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005470:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005474:	e882 0003 	stmia.w	r2, {r0, r1}
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	1d3a      	adds	r2, r7, #4
 8005480:	ca06      	ldmia	r2, {r1, r2}
 8005482:	4620      	mov	r0, r4
 8005484:	f000 fa99 	bl	80059ba <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005492:	b002      	add	sp, #8
 8005494:	4770      	bx	lr

08005496 <_ZSt22__copy_move_backward_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005496:	b082      	sub	sp, #8
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b08b      	sub	sp, #44	; 0x2c
 800549c:	af04      	add	r7, sp, #16
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	1d38      	adds	r0, r7, #4
 80054a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueType1)
 80054a8:	2300      	movs	r3, #0
 80054aa:	75fb      	strb	r3, [r7, #23]
								 __result);
 80054ac:	68fc      	ldr	r4, [r7, #12]
 80054ae:	aa01      	add	r2, sp, #4
 80054b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	ca06      	ldmia	r2, {r1, r2}
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fac2 	bl	8005a50 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80054d6:	b002      	add	sp, #8
 80054d8:	4770      	bx	lr

080054da <_ZSt10_ConstructISt6vectorIhSaIhEEJEEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	200c      	movs	r0, #12
 80054e8:	f7fb fc04 	bl	8000cf4 <_ZnwjPv>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <_ZSt10_ConstructISt6vectorIhSaIhEEJEEvPT_DpOT0_+0x1e>
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 faf7 	bl	8005ae6 <_ZNSt6vectorIhSaIhEEC1Ev>
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005508:	4b03      	ldr	r3, [pc, #12]	; (8005518 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv+0x18>)
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	15555555 	.word	0x15555555

0800551c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800552c:	f107 0208 	add.w	r2, r7, #8
 8005530:	f107 030c 	add.w	r3, r7, #12
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fae2 	bl	8005b00 <_ZStneIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d016      	beq.n	8005570 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	f7fe fe27 	bl	8004196 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8005548:	4604      	mov	r4, r0
 800554a:	f107 030c 	add.w	r3, r7, #12
 800554e:	4618      	mov	r0, r3
 8005550:	f000 faf8 	bl	8005b44 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEEdeEv>
 8005554:	4603      	mov	r3, r0
 8005556:	4619      	mov	r1, r3
 8005558:	4620      	mov	r0, r4
 800555a:	f000 fb0a 	bl	8005b72 <_ZSt10_ConstructISt6vectorIhSaIhEEJS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800555e:	f107 030c 	add.w	r3, r7, #12
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fadd 	bl	8005b22 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEppEv>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	330c      	adds	r3, #12
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e7dd      	b.n	800552c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_+0x10>
	      return __cur;
 8005570:	697b      	ldr	r3, [r7, #20]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	bd90      	pop	{r4, r7, pc}

0800557a <_ZSt6fill_nIPPhjS0_ET_S2_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fb0c 	bl	8005ba4 <_ZSt12__niter_baseIPPhET_S2_>
 800558c:	4603      	mov	r3, r0
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fb11 	bl	8005bba <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>
 8005598:	4603      	mov	r3, r0
    }
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80055aa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPhES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fb14 	bl	8005bf8 <_ZSt4copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>
 80055d0:	4603      	mov	r3, r0
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <_ZSt6fill_nIPtjtET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fb1e 	bl	8005c28 <_ZSt12__niter_baseIPtET_S1_>
 80055ec:	4603      	mov	r3, r0
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fb23 	bl	8005c3e <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>
 80055f8:	4603      	mov	r3, r0
    }
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800560a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fb26 	bl	8005c7c <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8005630:	4603      	mov	r3, r0
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_ZSt22__copy_move_backward_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800563a:	b082      	sub	sp, #8
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b08b      	sub	sp, #44	; 0x2c
 8005640:	af04      	add	r7, sp, #16
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	1d38      	adds	r0, r7, #4
 8005646:	e880 0006 	stmia.w	r0, {r1, r2}
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueType1)
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005650:	68fc      	ldr	r4, [r7, #12]
 8005652:	aa01      	add	r2, sp, #4
 8005654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005658:	e893 0003 	ldmia.w	r3, {r0, r1}
 800565c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	1d3a      	adds	r2, r7, #4
 8005668:	ca06      	ldmia	r2, {r1, r2}
 800566a:	4620      	mov	r0, r4
 800566c:	f000 fb1e 	bl	8005cac <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800567a:	b002      	add	sp, #8
 800567c:	4770      	bx	lr

0800567e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb57 	bl	8005d3a <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 800568c:	4603      	mov	r3, r0
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZNKSt13_Bvector_baseISaIbEE20_M_get_Bit_allocatorEv>:
      _M_get_Bit_allocator() const _GLIBCXX_NOEXCEPT
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fb3e 	bl	8005d3a <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 80056be:	4602      	mov	r2, r0
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4293      	cmp	r3, r2
 80056c4:	bf8c      	ite	hi
 80056c6:	2301      	movhi	r3, #1
 80056c8:	2300      	movls	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80056d0:	f003 ff40 	bl	8009554 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f003 ff1f 	bl	800951c <_Znwj>
 80056de:	4603      	mov	r3, r0
      }
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <_ZSt12__miter_baseIPmET_S1_>:
    __miter_base(_Iterator __it)
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
    { return __it; }
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80056fe:	b5b0      	push	{r4, r5, r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7fc fb88 	bl	8001e20 <_ZSt12__niter_baseIPmET_S1_>
 8005710:	4604      	mov	r4, r0
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7fc fb84 	bl	8001e20 <_ZSt12__niter_baseIPmET_S1_>
 8005718:	4605      	mov	r5, r0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fc fb80 	bl	8001e20 <_ZSt12__niter_baseIPmET_S1_>
 8005720:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005722:	461a      	mov	r2, r3
 8005724:	4629      	mov	r1, r5
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fb13 	bl	8005d52 <_ZSt13__copy_move_aILb0EPmS0_ET1_T0_S2_S1_>
 800572c:	4603      	mov	r3, r0
    }
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bdb0      	pop	{r4, r5, r7, pc}

08005736 <_ZSt12__miter_baseISt19_Bit_const_iteratorET_S1_>:
    __miter_base(_Iterator __it)
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800574e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <_ZSt14__copy_move_a2ILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800575e:	b082      	sub	sp, #8
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b08f      	sub	sp, #60	; 0x3c
 8005764:	af04      	add	r7, sp, #16
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	1d38      	adds	r0, r7, #4
 800576a:	e880 0006 	stmia.w	r0, {r1, r2}
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005770:	f107 0010 	add.w	r0, r7, #16
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	e893 0006 	ldmia.w	r3, {r1, r2}
 800577a:	f000 fafc 	bl	8005d76 <_ZSt12__niter_baseISt19_Bit_const_iteratorET_S1_>
 800577e:	f107 0018 	add.w	r0, r7, #24
 8005782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005786:	e893 0006 	ldmia.w	r3, {r1, r2}
 800578a:	f000 faf4 	bl	8005d76 <_ZSt12__niter_baseISt19_Bit_const_iteratorET_S1_>
 800578e:	f107 0020 	add.w	r0, r7, #32
 8005792:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005796:	e893 0006 	ldmia.w	r3, {r1, r2}
 800579a:	f7ff fe46 	bl	800542a <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
					     std::__niter_base(__result)));
 800579e:	68fc      	ldr	r4, [r7, #12]
 80057a0:	aa01      	add	r2, sp, #4
 80057a2:	f107 0320 	add.w	r3, r7, #32
 80057a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f107 0210 	add.w	r2, r7, #16
 80057b8:	ca06      	ldmia	r2, {r1, r2}
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 faef 	bl	8005d9e <_ZSt13__copy_move_aILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>
    }
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	372c      	adds	r7, #44	; 0x2c
 80057c4:	46bd      	mov	sp, r7
 80057c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80057ca:	b002      	add	sp, #8
 80057cc:	4770      	bx	lr

080057ce <_ZSt13__copy_move_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80057ce:	b082      	sub	sp, #8
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b08b      	sub	sp, #44	; 0x2c
 80057d4:	af04      	add	r7, sp, #16
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	1d38      	adds	r0, r7, #4
 80057da:	e880 0006 	stmia.w	r0, {r1, r2}
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueTypeI)
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80057e4:	68fc      	ldr	r4, [r7, #12]
 80057e6:	aa01      	add	r2, sp, #4
 80057e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	ca06      	ldmia	r2, {r1, r2}
 80057fe:	4620      	mov	r0, r4
 8005800:	f000 faef 	bl	8005de2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800580e:	b002      	add	sp, #8
 8005810:	4770      	bx	lr

08005812 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fb26 	bl	8005e70 <_ZSt12__niter_baseIPhET_S1_>
 8005824:	4603      	mov	r3, r0
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fb2b 	bl	8005e86 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 8005830:	4603      	mov	r3, r0
    }
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fb24 	bl	8005eb0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8005868:	4603      	mov	r3, r0
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fb2e 	bl	8005ee0 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10_S_on_swapERS1_S3_>:
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
    { std::__alloc_on_swap(__a, __b); }
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fb21 	bl	8005ef8 <_ZSt15__alloc_on_swapISaIhEEvRT_S2_>
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	109b      	asrs	r3, r3, #2
 80058d2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	461a      	mov	r2, r3
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f003 fe7e 	bl	80095e4 <memmove>
	  return __result + _Num;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
	}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	109b      	asrs	r3, r3, #2
 800590c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	425b      	negs	r3, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	18d0      	adds	r0, r2, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	461a      	mov	r2, r3
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	f003 fe5d 	bl	80095e4 <memmove>
	  return __result - _Num;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	425b      	negs	r3, r3
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4413      	add	r3, r2
	}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	105b      	asrs	r3, r3, #1
 8005950:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d006      	beq.n	8005966 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	461a      	mov	r2, r3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f003 fe3f 	bl	80095e4 <memmove>
	  return __result + _Num;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4413      	add	r3, r2
	}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bItEEPT_PKS3_S6_S4_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	105b      	asrs	r3, r3, #1
 800598a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bItEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	425b      	negs	r3, r3
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	18d0      	adds	r0, r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	461a      	mov	r2, r3
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	f003 fe1e 	bl	80095e4 <memmove>
	  return __result - _Num;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	425b      	negs	r3, r3
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4413      	add	r3, r2
	}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_m(_II __first, _II __last, _OI __result)
 80059ba:	b082      	sub	sp, #8
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	; 0x28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	1d38      	adds	r0, r7, #4
 80059c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80059cc:	1d3a      	adds	r2, r7, #4
 80059ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fb fac5 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dd27      	ble.n	8005a32 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x78>
	      *__result = std::move(*__first);
 80059e2:	f107 0314 	add.w	r3, r7, #20
 80059e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fb faf3 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 80059f2:	f107 031c 	add.w	r3, r7, #28
 80059f6:	1d3a      	adds	r2, r7, #4
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fb faec 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005a00:	f107 031c 	add.w	r3, r7, #28
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fb1b 	bl	8004040 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	f107 0314 	add.w	r3, r7, #20
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fb f9c6 	bl	8000da4 <_ZNSt14_Bit_referenceaSERKS_>
	      ++__first;
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fb faf0 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
	      ++__result;
 8005a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fb faeb 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	e7d4      	b.n	80059dc <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a3e:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a4c:	b002      	add	sp, #8
 8005a4e:	4770      	bx	lr

08005a50 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8005a50:	b082      	sub	sp, #8
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08a      	sub	sp, #40	; 0x28
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	1d38      	adds	r0, r7, #4
 8005a5c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
	  for (__n = __last - __first; __n > 0; --__n)
 8005a62:	1d3a      	adds	r2, r7, #4
 8005a64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fb fa7a 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005a70:	6278      	str	r0, [r7, #36]	; 0x24
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dd27      	ble.n	8005ac8 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x78>
	    *--__result = std::move(*--__last);
 8005a78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fb facc 	bl	800101a <_ZNSt13_Bit_iteratormmEv>
 8005a82:	4602      	mov	r2, r0
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fb faa4 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005a90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fb fac0 	bl	800101a <_ZNSt13_Bit_iteratormmEv>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	f107 031c 	add.w	r3, r7, #28
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fb fa98 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005aa8:	f107 031c 	add.w	r3, r7, #28
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fac7 	bl	8004040 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fb f972 	bl	8000da4 <_ZNSt14_Bit_referenceaSERKS_>
	  for (__n = __last - __first; __n > 0; --__n)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac6:	e7d4      	b.n	8005a72 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ad0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ad4:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	3728      	adds	r7, #40	; 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ae2:	b002      	add	sp, #8
 8005ae4:	4770      	bx	lr

08005ae6 <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fa0f 	bl	8005f14 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_ZStneIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa0e 	bl	8005f2e <_ZSteqIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f083 0301 	eor.w	r3, r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEppEv>:
      operator++()
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f103 020c 	add.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
	return *this;
 8005b36:	687b      	ldr	r3, [r7, #4]
      }
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEEdeEv>:
      operator*() const
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <_ZSt10_ConstructISt6vectorIhSaIhEEJS2_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8005b72:	b590      	push	{r4, r7, lr}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f7ff ffed 	bl	8005b5c <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005b82:	4604      	mov	r4, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4619      	mov	r1, r3
 8005b88:	200c      	movs	r0, #12
 8005b8a:	f7fb f8b3 	bl	8000cf4 <_ZnwjPv>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <_ZSt10_ConstructISt6vectorIhSaIhEEJS2_EEvPT_DpOT0_+0x2a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fd ffa0 	bl	8003adc <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd90      	pop	{r4, r7, pc}

08005ba4 <_ZSt12__niter_baseIPPhET_S2_>:
    __niter_base(_Iterator __it)
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 8005bba:	b480      	push	{r7}
 8005bbc:	b087      	sub	sp, #28
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	613b      	str	r3, [r7, #16]
      for (__decltype(__n + 0) __niter = __n;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x30>
	*__first = __tmp;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	601a      	str	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3304      	adds	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e7f2      	b.n	8005bd0 <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x16>
      return __first;
 8005bea:	68fb      	ldr	r3, [r7, #12]
    }
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <_ZSt4copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9a8 	bl	8005f5a <_ZSt12__miter_baseIPPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	68b8      	ldr	r0, [r7, #8]
 8005c0e:	f000 f9a4 	bl	8005f5a <_ZSt12__miter_baseIPPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005c12:	4603      	mov	r3, r0
	       __result));
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	4619      	mov	r1, r3
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 f9af 	bl	8005f7c <_ZSt14__copy_move_a2ILb1EPPhS1_ET1_T0_S3_S2_>
 8005c1e:	4603      	mov	r3, r0
    }
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}

08005c28 <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 8005c3e:	b480      	push	{r7}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	827b      	strh	r3, [r7, #18]
      for (__decltype(__n + 0) __niter = __n;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x30>
	*__first = __tmp;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8a7a      	ldrh	r2, [r7, #18]
 8005c5e:	801a      	strh	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e7f2      	b.n	8005c54 <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x16>
      return __first;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
    }
 8005c70:	4618      	mov	r0, r3
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f993 	bl	8005fb4 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	68b8      	ldr	r0, [r7, #8]
 8005c92:	f000 f98f 	bl	8005fb4 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005c96:	4603      	mov	r3, r0
	       __result));
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 f99a 	bl	8005fd6 <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>
 8005ca2:	4603      	mov	r3, r0
    }
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd90      	pop	{r4, r7, pc}

08005cac <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8005cac:	b082      	sub	sp, #8
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	; 0x28
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	1d38      	adds	r0, r7, #4
 8005cb8:	e880 0006 	stmia.w	r0, {r1, r2}
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
	  for (__n = __last - __first; __n > 0; --__n)
 8005cbe:	1d3a      	adds	r2, r7, #4
 8005cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fb f94c 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005ccc:	6278      	str	r0, [r7, #36]	; 0x24
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dd23      	ble.n	8005d1c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x70>
	    *--__result = *--__last;
 8005cd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fb f99e 	bl	800101a <_ZNSt13_Bit_iteratormmEv>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fb f976 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fb f992 	bl	800101a <_ZNSt13_Bit_iteratormmEv>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	f107 031c 	add.w	r3, r7, #28
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb f96a 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005d04:	f107 021c 	add.w	r2, r7, #28
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fb f848 	bl	8000da4 <_ZNSt14_Bit_referenceaSERKS_>
	  for (__n = __last - __first; __n > 0; --__n)
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	3b01      	subs	r3, #1
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1a:	e7d8      	b.n	8005cce <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d28:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d36:	b002      	add	sp, #8
 8005d38:	4770      	bx	lr

08005d3a <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005d42:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <_ZSt13__copy_move_aILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f951 	bl	800600e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8005d6c:	4603      	mov	r3, r0
    }
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_ZSt12__niter_baseISt19_Bit_const_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	1d3b      	adds	r3, r7, #4
 8005d8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d8e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <_ZSt13__copy_move_aILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005d9e:	b082      	sub	sp, #8
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b08b      	sub	sp, #44	; 0x2c
 8005da4:	af04      	add	r7, sp, #16
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	1d38      	adds	r0, r7, #4
 8005daa:	e880 0006 	stmia.w	r0, {r1, r2}
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005db4:	68fc      	ldr	r4, [r7, #12]
 8005db6:	aa01      	add	r2, sp, #4
 8005db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	1d3a      	adds	r2, r7, #4
 8005dcc:	ca06      	ldmia	r2, {r1, r2}
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f93a 	bl	8006048 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_>
    }
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005dde:	b002      	add	sp, #8
 8005de0:	4770      	bx	lr

08005de2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_m(_II __first, _II __last, _OI __result)
 8005de2:	b082      	sub	sp, #8
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	1d38      	adds	r0, r7, #4
 8005dee:	e880 0006 	stmia.w	r0, {r1, r2}
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005df4:	1d3a      	adds	r2, r7, #4
 8005df6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fb f8b1 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005e02:	6278      	str	r0, [r7, #36]	; 0x24
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd23      	ble.n	8005e52 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x70>
	      *__result = *__first;
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fb f8df 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005e1a:	f107 031c 	add.w	r3, r7, #28
 8005e1e:	1d3a      	adds	r2, r7, #4
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fb f8d8 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8005e28:	f107 021c 	add.w	r2, r7, #28
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa ffb6 	bl	8000da4 <_ZNSt14_Bit_referenceaSERKS_>
	      ++__first;
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fb f8e0 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
	      ++__result;
 8005e40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fb f8db 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	e7d8      	b.n	8005e04 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	461a      	mov	r2, r3
 8005e56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e5e:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	3728      	adds	r7, #40	; 0x28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e6c:	b002      	add	sp, #8
 8005e6e:	4770      	bx	lr

08005e70 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4413      	add	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f917 	bl	80060d0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4413      	add	r3, r2
    }
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005eb0:	b590      	push	{r4, r7, lr}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f921 	bl	8006104 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f000 f91d 	bl	8006104 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005eca:	4603      	mov	r3, r0
	       __result));
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 f928 	bl	8006126 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8005ed6:	4603      	mov	r3, r0
    }
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd90      	pop	{r4, r7, pc}

08005ee0 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <_ZSt15__alloc_on_swapISaIhEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
 8005f02:	461a      	mov	r2, r3
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f929 	bl	800615e <_ZSt18__do_alloc_on_swapISaIhEEvRT_S2_St17integral_constantIbLb0EE>
    }
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f929 	bl	8006176 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <_ZSteqIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>:
    operator==(const move_iterator<_Iterator>& __x,
 8005f2e:	b590      	push	{r4, r7, lr}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f931 	bl	80061a0 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEE4baseEv>
 8005f3e:	4604      	mov	r4, r0
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f000 f92d 	bl	80061a0 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEE4baseEv>
 8005f46:	4603      	mov	r3, r0
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd90      	pop	{r4, r7, pc}

08005f5a <_ZSt12__miter_baseIPPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f927 	bl	80061b8 <_ZNKSt13move_iteratorIPPhE4baseEv>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 f92f 	bl	80061d0 <_ZSt12__miter_baseIPPhET_S2_>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <_ZSt14__copy_move_a2ILb1EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005f7c:	b5b0      	push	{r4, r5, r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fe0b 	bl	8005ba4 <_ZSt12__niter_baseIPPhET_S2_>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	68b8      	ldr	r0, [r7, #8]
 8005f92:	f7ff fe07 	bl	8005ba4 <_ZSt12__niter_baseIPPhET_S2_>
 8005f96:	4605      	mov	r5, r0
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fe03 	bl	8005ba4 <_ZSt12__niter_baseIPPhET_S2_>
 8005f9e:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff f9ea 	bl	800537e <_ZSt13__copy_move_aILb1EPPhS1_ET1_T0_S3_S2_>
 8005faa:	4603      	mov	r3, r0
    }
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bdb0      	pop	{r4, r5, r7, pc}

08005fb4 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f911 	bl	80061e6 <_ZNKSt13move_iteratorIPtE4baseEv>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f919 	bl	80061fe <_ZSt12__miter_baseIPtET_S1_>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005fd6:	b5b0      	push	{r4, r5, r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fe20 	bl	8005c28 <_ZSt12__niter_baseIPtET_S1_>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	68b8      	ldr	r0, [r7, #8]
 8005fec:	f7ff fe1c 	bl	8005c28 <_ZSt12__niter_baseIPtET_S1_>
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fe18 	bl	8005c28 <_ZSt12__niter_baseIPtET_S1_>
 8005ff8:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4620      	mov	r0, r4
 8006000:	f7ff f9ef 	bl	80053e2 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8006004:	4603      	mov	r3, r0
    }
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bdb0      	pop	{r4, r5, r7, pc}

0800600e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	109b      	asrs	r3, r3, #2
 8006022:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d006      	beq.n	8006038 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	461a      	mov	r2, r3
 8006030:	68f9      	ldr	r1, [r7, #12]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f003 fad6 	bl	80095e4 <memmove>
	  return __result + _Num;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
	}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_>:
        __copy_m(_II __first, _II __last, _OI __result)
 8006048:	b082      	sub	sp, #8
 800604a:	b580      	push	{r7, lr}
 800604c:	b088      	sub	sp, #32
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	1d38      	adds	r0, r7, #4
 8006054:	e880 0006 	stmia.w	r0, {r1, r2}
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800605a:	1d3a      	adds	r2, r7, #4
 800605c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7fa ff7e 	bl	8000f64 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8006068:	61f8      	str	r0, [r7, #28]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dd20      	ble.n	80060b2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_+0x6a>
	      *__result = *__first;
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa ffac 	bl	8000fd8 <_ZNKSt13_Bit_iteratordeEv>
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7fb f863 	bl	800114e <_ZNKSt19_Bit_const_iteratordeEv>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f7fa fe62 	bl	8000d5c <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f7fb f870 	bl	8001180 <_ZNSt19_Bit_const_iteratorppEv>
	      ++__result;
 80060a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fa ffab 	bl	8001000 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e7db      	b.n	800606a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_+0x22>
	  return __result;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	461a      	mov	r2, r3
 80060b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80060be:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060cc:	b002      	add	sp, #8
 80060ce:	4770      	bx	lr

080060d0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4619      	mov	r1, r3
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f003 fa8d 	bl	8009616 <memset>
    }
 80060fc:	bf00      	nop
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f880 	bl	8006214 <_ZNKSt13move_iteratorIPhE4baseEv>
 8006114:	4603      	mov	r3, r0
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f888 	bl	800622c <_ZSt12__miter_baseIPhET_S1_>
 800611c:	4603      	mov	r3, r0
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006126:	b5b0      	push	{r4, r5, r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fe9c 	bl	8005e70 <_ZSt12__niter_baseIPhET_S1_>
 8006138:	4604      	mov	r4, r0
 800613a:	68b8      	ldr	r0, [r7, #8]
 800613c:	f7ff fe98 	bl	8005e70 <_ZSt12__niter_baseIPhET_S1_>
 8006140:	4605      	mov	r5, r0
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fe94 	bl	8005e70 <_ZSt12__niter_baseIPhET_S1_>
 8006148:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800614a:	461a      	mov	r2, r3
 800614c:	4629      	mov	r1, r5
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f877 	bl	8006242 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8006154:	4603      	mov	r3, r0
    }
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bdb0      	pop	{r4, r5, r7, pc}

0800615e <_ZSt18__do_alloc_on_swapISaIhEEvRT_S2_St17integral_constantIbLb0EE>:
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	713a      	strb	r2, [r7, #4]
    { }
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f871 	bl	8006266 <_ZNSaIhEC1Ev>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
	{ }
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEE4baseEv>:
      base() const
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <_ZNKSt13move_iteratorIPPhE4baseEv>:
      base() const
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <_ZSt12__miter_baseIPPhET_S2_>:
    __miter_base(_Iterator __it)
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <_ZNKSt13move_iteratorIPtE4baseEv>:
      base() const
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <_ZSt12__miter_baseIPtET_S1_>:
    __miter_base(_Iterator __it)
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f811 	bl	800627e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800625c:	4603      	mov	r3, r0
    }
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f81f 	bl	80062b2 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	461a      	mov	r2, r3
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f003 f9a0 	bl	80095e4 <memmove>
	  return __result + _Num;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4413      	add	r3, r2
	}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <_ZN9Dynamixel9setPacketEhhhPhhS0_>:
	return read_buf[4]; //return Error status
}


void Dynamixel::setPacket(uint8_t id, uint8_t instruction, uint8_t write_param_len, uint8_t *write_param, uint8_t read_param_len, uint8_t *read_param)
{
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	70fb      	strb	r3, [r7, #3]
 80062da:	460b      	mov	r3, r1
 80062dc:	70bb      	strb	r3, [r7, #2]
 80062de:	4613      	mov	r3, r2
 80062e0:	707b      	strb	r3, [r7, #1]
	send_buf[5 + write_param_len] = getCheckSum_(send_buf);

	uint8_t read_buf_length = read_param_len + 6;

	if(id == 254) rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, true);
	else rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, false);
 80062e2:	466b      	mov	r3, sp
 80062e4:	461d      	mov	r5, r3
	uint8_t send_buf_length = write_param_len + 6;
 80062e6:	787b      	ldrb	r3, [r7, #1]
 80062e8:	3306      	adds	r3, #6
 80062ea:	75bb      	strb	r3, [r7, #22]
	uint8_t send_buf[send_buf_length];
 80062ec:	7dbb      	ldrb	r3, [r7, #22]
 80062ee:	1e58      	subs	r0, r3, #1
 80062f0:	6138      	str	r0, [r7, #16]
 80062f2:	4603      	mov	r3, r0
 80062f4:	3301      	adds	r3, #1
 80062f6:	4619      	mov	r1, r3
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	00d4      	lsls	r4, r2, #3
 8006306:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4603      	mov	r3, r0
 800630e:	3301      	adds	r3, #1
 8006310:	4619      	mov	r1, r3
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	f04f 0400 	mov.w	r4, #0
 800631e:	00d4      	lsls	r4, r2, #3
 8006320:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006324:	00cb      	lsls	r3, r1, #3
 8006326:	4603      	mov	r3, r0
 8006328:	3301      	adds	r3, #1
 800632a:	3307      	adds	r3, #7
 800632c:	08db      	lsrs	r3, r3, #3
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	ebad 0d03 	sub.w	sp, sp, r3
 8006334:	ab02      	add	r3, sp, #8
 8006336:	3300      	adds	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
	send_buf[0] = 0xff;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	701a      	strb	r2, [r3, #0]
	send_buf[1] = 0xff;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	22ff      	movs	r2, #255	; 0xff
 8006344:	705a      	strb	r2, [r3, #1]
	send_buf[2] = id;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	709a      	strb	r2, [r3, #2]
	send_buf[3] = write_param_len + 2; //param_len + (Instruction + Checksum)
 800634c:	787b      	ldrb	r3, [r7, #1]
 800634e:	3302      	adds	r3, #2
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	70da      	strb	r2, [r3, #3]
	send_buf[4] = instruction;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	78ba      	ldrb	r2, [r7, #2]
 800635a:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0; i < write_param_len; i++){ //Set parameters;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
 8006360:	7dfa      	ldrb	r2, [r7, #23]
 8006362:	787b      	ldrb	r3, [r7, #1]
 8006364:	429a      	cmp	r2, r3
 8006366:	d20b      	bcs.n	8006380 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0xb8>
		send_buf[5 + i] = write_param[i];
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	441a      	add	r2, r3
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	3305      	adds	r3, #5
 8006372:	7811      	ldrb	r1, [r2, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < write_param_len; i++){ //Set parameters;
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	3301      	adds	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
 800637e:	e7ef      	b.n	8006360 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0x98>
	send_buf[5 + write_param_len] = getCheckSum_(send_buf);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f83a 	bl	80063fe <_ZN9Dynamixel12getCheckSum_EPh>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	787b      	ldrb	r3, [r7, #1]
 8006390:	3305      	adds	r3, #5
 8006392:	b2d1      	uxtb	r1, r2
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	54d1      	strb	r1, [r2, r3]
	uint8_t read_buf_length = read_param_len + 6;
 8006398:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800639c:	3306      	adds	r3, #6
 800639e:	72fb      	strb	r3, [r7, #11]
	if(id == 254) rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, true);
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2bfe      	cmp	r3, #254	; 0xfe
 80063a4:	d10d      	bne.n	80063c2 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0xfa>
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	7dbb      	ldrb	r3, [r7, #22]
 80063ac:	b29c      	uxth	r4, r3
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2201      	movs	r2, #1
 80063b4:	9201      	str	r2, [sp, #4]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	4622      	mov	r2, r4
 80063bc:	f000 fab4 	bl	8006928 <_ZN9HAL_RS4857setBufsEPhtS0_tb>
 80063c0:	e00c      	b.n	80063dc <_ZN9Dynamixel9setPacketEhhhPhhS0_+0x114>
	else rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, false);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	7dbb      	ldrb	r3, [r7, #22]
 80063c8:	b29c      	uxth	r4, r3
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2200      	movs	r2, #0
 80063d0:	9201      	str	r2, [sp, #4]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	4622      	mov	r2, r4
 80063d8:	f000 faa6 	bl	8006928 <_ZN9HAL_RS4857setBufsEPhtS0_tb>
 80063dc:	46ad      	mov	sp, r5
	rs485_.setSendBuf(send_buf, send_buf_length);
	rs485_.setReadDataPointer(read_param, read_buf_length);
	if(id == 254)	rs485_.setNoReceiveFlag(true);
	else rs485_.setNoReceiveFlag(false);
	*/
}
 80063de:	bf00      	nop
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bdb0      	pop	{r4, r5, r7, pc}

080063e6 <_ZN9Dynamixel18communicationStartEv>:

void Dynamixel::communicationStart()
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
	rs485_.startSendIT();
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fab9 	bl	8006968 <_ZN9HAL_RS48511startSendITEv>
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <_ZN9Dynamixel12getCheckSum_EPh>:

uint16_t Dynamixel::getCheckSum_(uint8_t *buf)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
	uint8_t sum = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < buf[3] + 3; i++){ //buf[3](param_size) + (id + length : instruction)
 800640c:	2302      	movs	r3, #2
 800640e:	73bb      	strb	r3, [r7, #14]
 8006410:	7bba      	ldrb	r2, [r7, #14]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	3303      	adds	r3, #3
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	3303      	adds	r3, #3
 800641a:	429a      	cmp	r2, r3
 800641c:	da0a      	bge.n	8006434 <_ZN9Dynamixel12getCheckSum_EPh+0x36>
		sum += buf[i];
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	4413      	add	r3, r2
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	4413      	add	r3, r2
 800642a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < buf[3] + 3; i++){ //buf[3](param_size) + (id + length : instruction)
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	3301      	adds	r3, #1
 8006430:	73bb      	strb	r3, [r7, #14]
 8006432:	e7ed      	b.n	8006410 <_ZN9Dynamixel12getCheckSum_EPh+0x12>
	}

	return 0xff - (sum & 0xff); //If the calculated value exceeds 255, the lower 8 bits are set as SUM.
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	b29b      	uxth	r3, r3
 8006438:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800643c:	b29b      	uxth	r3, r3
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <_ZN9DynamixelC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:

/* -----public------*/
Dynamixel::Dynamixel(UART_HandleTypeDef *huart_num, GPIO_TypeDef *gpio_type, uint16_t gpio_num) : rs485_(huart_num, gpio_type, gpio_num){}
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
 8006456:	807b      	strh	r3, [r7, #2]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	887b      	ldrh	r3, [r7, #2]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	f000 f9fc 	bl	800685c <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <_ZN9Dynamixel4pingEh>:
	if(rs485_.isCommunicating() == false) communicationStart();
}

/* ping */
uint8_t Dynamixel::ping(uint8_t id)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
	/* ---Send Instruction packet--- */
	uint8_t send_buf[6];
	send_buf[0] = 0xff;
 800647a:	23ff      	movs	r3, #255	; 0xff
 800647c:	743b      	strb	r3, [r7, #16]
	send_buf[1] = 0xff;
 800647e:	23ff      	movs	r3, #255	; 0xff
 8006480:	747b      	strb	r3, [r7, #17]
	send_buf[2] = id;
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	74bb      	strb	r3, [r7, #18]
	send_buf[3] = 2; //(Instruction + Checksum)
 8006486:	2302      	movs	r3, #2
 8006488:	74fb      	strb	r3, [r7, #19]
	send_buf[4] = INSTRUCTION_PING;
 800648a:	2301      	movs	r3, #1
 800648c:	753b      	strb	r3, [r7, #20]
	send_buf[5] = getCheckSum_(send_buf);
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ffb2 	bl	80063fe <_ZN9Dynamixel12getCheckSum_EPh>
 800649a:	4603      	mov	r3, r0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	757b      	strb	r3, [r7, #21]

	rs485_.send(send_buf, 6);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f107 0110 	add.w	r1, r7, #16
 80064a6:	2206      	movs	r2, #6
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f9f5 	bl	8006898 <_ZN9HAL_RS4854sendEPhh>


	/* ---Read status packet--- */
	uint8_t read_buf[6];
	rs485_.read(read_buf, 6);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	2206      	movs	r2, #6
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fa1c 	bl	80068f4 <_ZN9HAL_RS4854readEPhh>

	return read_buf[4]; //return Error status
 80064bc:	7b3b      	ldrb	r3, [r7, #12]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <_ZN9Dynamixel6torqueEhh>:
{
	*error = status_packet_led_[4];
}

void Dynamixel::torque(uint8_t id, uint8_t status)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b088      	sub	sp, #32
 80064ca:	af04      	add	r7, sp, #16
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
 80064d2:	4613      	mov	r3, r2
 80064d4:	70bb      	strb	r3, [r7, #2]
	uint8_t write_param[2];
	write_param[0] = ADDRESS_TORQUE_ENABLE;
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	733b      	strb	r3, [r7, #12]
	write_param[1] = status;
 80064da:	78bb      	ldrb	r3, [r7, #2]
 80064dc:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_WRITE, 2, write_param, 0, status_packet_torque_enable_);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	330d      	adds	r3, #13
 80064e2:	78f9      	ldrb	r1, [r7, #3]
 80064e4:	9302      	str	r3, [sp, #8]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2302      	movs	r3, #2
 80064f2:	2203      	movs	r2, #3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fee7 	bl	80062c8 <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fa8f 	bl	8006a20 <_ZN9HAL_RS48515isCommunicatingEv>
 8006502:	4603      	mov	r3, r0
 8006504:	f083 0301 	eor.w	r3, r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <_ZN9Dynamixel6torqueEhh+0x4e>
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff69 	bl	80063e6 <_ZN9Dynamixel18communicationStartEv>
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	0000      	movs	r0, r0
	...

08006520 <_ZN9Dynamixel15setGoalPositionEhf>:
{
	*error = status_packet_torque_enable_[4];
}

void Dynamixel::setGoalPosition(uint8_t id, float position)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b08d      	sub	sp, #52	; 0x34
 8006524:	af04      	add	r7, sp, #16
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	460b      	mov	r3, r1
 800652a:	ed87 0a01 	vstr	s0, [r7, #4]
 800652e:	72fb      	strb	r3, [r7, #11]
	uint8_t write_param[5];
	int32_t value = (int32_t)(position * 4095 / 359.9);
 8006530:	edd7 7a01 	vldr	s15, [r7, #4]
 8006534:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80065c8 <_ZN9Dynamixel15setGoalPositionEhf+0xa8>
 8006538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800653c:	ee17 0a90 	vmov	r0, s15
 8006540:	f7f9 ffc6 	bl	80004d0 <__aeabi_f2d>
 8006544:	a31e      	add	r3, pc, #120	; (adr r3, 80065c0 <_ZN9Dynamixel15setGoalPositionEhf+0xa0>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7fa f943 	bl	80007d4 <__aeabi_ddiv>
 800654e:	4603      	mov	r3, r0
 8006550:	460c      	mov	r4, r1
 8006552:	4618      	mov	r0, r3
 8006554:	4621      	mov	r1, r4
 8006556:	f7fa fa25 	bl	80009a4 <__aeabi_d2iz>
 800655a:	4603      	mov	r3, r0
 800655c:	61fb      	str	r3, [r7, #28]
	write_param[0] = ADDRESS_GOAL_POSITION;
 800655e:	2374      	movs	r3, #116	; 0x74
 8006560:	753b      	strb	r3, [r7, #20]
	write_param[1] = value & 0xff;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	757b      	strb	r3, [r7, #21]
	write_param[2] = (value >> 8) & 0xff;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	121b      	asrs	r3, r3, #8
 800656c:	b2db      	uxtb	r3, r3
 800656e:	75bb      	strb	r3, [r7, #22]
	write_param[3] = (value >> 16) & 0xff;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	141b      	asrs	r3, r3, #16
 8006574:	b2db      	uxtb	r3, r3
 8006576:	75fb      	strb	r3, [r7, #23]
	write_param[4] = (value >> 24) & 0xff;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	0e1b      	lsrs	r3, r3, #24
 800657c:	b2db      	uxtb	r3, r3
 800657e:	763b      	strb	r3, [r7, #24]

	setPacket(id, INSTRUCTION_WRITE, 5, write_param, 0, status_packet_goal_position_);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3313      	adds	r3, #19
 8006584:	7af9      	ldrb	r1, [r7, #11]
 8006586:	9302      	str	r3, [sp, #8]
 8006588:	2300      	movs	r3, #0
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	2305      	movs	r3, #5
 8006594:	2203      	movs	r2, #3
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fe96 	bl	80062c8 <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fa3e 	bl	8006a20 <_ZN9HAL_RS48515isCommunicatingEv>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f083 0301 	eor.w	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <_ZN9Dynamixel15setGoalPositionEhf+0x96>
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7ff ff18 	bl	80063e6 <_ZN9Dynamixel18communicationStartEv>
}
 80065b6:	bf00      	nop
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd90      	pop	{r4, r7, pc}
 80065be:	bf00      	nop
 80065c0:	66666666 	.word	0x66666666
 80065c4:	40767e66 	.word	0x40767e66
 80065c8:	457ff000 	.word	0x457ff000

080065cc <_ZN9Dynamixel16setOperatingModeEhh>:
{
	*error = status_packet_goal_position_[4];
}

void Dynamixel::setOperatingMode(uint8_t id, uint8_t mode)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af04      	add	r7, sp, #16
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
 80065d8:	4613      	mov	r3, r2
 80065da:	70bb      	strb	r3, [r7, #2]
	uint8_t write_param[2];
	write_param[0] = ADDRESS_OPERATING_MODE;
 80065dc:	230b      	movs	r3, #11
 80065de:	733b      	strb	r3, [r7, #12]
	write_param[1] = mode;
 80065e0:	78bb      	ldrb	r3, [r7, #2]
 80065e2:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_WRITE, 2, write_param, 0, status_packet_operating_mode_);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3307      	adds	r3, #7
 80065e8:	78f9      	ldrb	r1, [r7, #3]
 80065ea:	9302      	str	r3, [sp, #8]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	f107 030c 	add.w	r3, r7, #12
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	2302      	movs	r3, #2
 80065f8:	2203      	movs	r2, #3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fe64 	bl	80062c8 <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fa0c 	bl	8006a20 <_ZN9HAL_RS48515isCommunicatingEv>
 8006608:	4603      	mov	r3, r0
 800660a:	f083 0301 	eor.w	r3, r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <_ZN9Dynamixel16setOperatingModeEhh+0x4e>
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fee6 	bl	80063e6 <_ZN9Dynamixel18communicationStartEv>
}
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <_ZN9Dynamixel19requestInputVoltageEh>:

	return status_packet_tempareture_[5];
}

void Dynamixel::requestInputVoltage(uint8_t id)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b088      	sub	sp, #32
 8006626:	af04      	add	r7, sp, #16
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
	uint8_t write_param[2];
	uint8_t byte_size = 0x02;
 800662e:	2302      	movs	r3, #2
 8006630:	73fb      	strb	r3, [r7, #15]
	write_param[0] = ADDRESS_PURESENT_INPUT_VOLTAGE;
 8006632:	2390      	movs	r3, #144	; 0x90
 8006634:	733b      	strb	r3, [r7, #12]
	write_param[1] = byte_size; //byte size
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_READ, 2, write_param, byte_size, status_packet_inputvoltage_);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3326      	adds	r3, #38	; 0x26
 800663e:	78f9      	ldrb	r1, [r7, #3]
 8006640:	9302      	str	r3, [sp, #8]
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	f107 030c 	add.w	r3, r7, #12
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	2302      	movs	r3, #2
 800664e:	2202      	movs	r2, #2
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fe39 	bl	80062c8 <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f9e1 	bl	8006a20 <_ZN9HAL_RS48515isCommunicatingEv>
 800665e:	4603      	mov	r3, r0
 8006660:	f083 0301 	eor.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <_ZN9Dynamixel19requestInputVoltageEh+0x4e>
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff febb 	bl	80063e6 <_ZN9Dynamixel18communicationStartEv>

}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_UART_TxCpltCallback>:
UART_HandleTypeDef *g_huart_num_;
GPIO_TypeDef *g_gpio_type;
uint16_t g_gpio_num;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006678:	b5b0      	push	{r4, r5, r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_RESET); //RS485 Send mode disable
 8006680:	4b3c      	ldr	r3, [pc, #240]	; (8006774 <HAL_UART_TxCpltCallback+0xfc>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4b3c      	ldr	r3, [pc, #240]	; (8006778 <HAL_UART_TxCpltCallback+0x100>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	4619      	mov	r1, r3
 800668c:	f001 f9b0 	bl	80079f0 <HAL_GPIO_WritePin>
	mon_tx_cnt++;
 8006690:	4b3a      	ldr	r3, [pc, #232]	; (800677c <HAL_UART_TxCpltCallback+0x104>)
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	4b38      	ldr	r3, [pc, #224]	; (800677c <HAL_UART_TxCpltCallback+0x104>)
 800669a:	801a      	strh	r2, [r3, #0]

	uint8_t *p_temp_data;
	uint16_t temp_data_length;
	p_temp_data = g_buf_data.getFirstReadPointerBuf(&temp_data_length);
 800669c:	f107 030e 	add.w	r3, r7, #14
 80066a0:	4619      	mov	r1, r3
 80066a2:	4837      	ldr	r0, [pc, #220]	; (8006780 <HAL_UART_TxCpltCallback+0x108>)
 80066a4:	f7fa fffd 	bl	80016a2 <_ZN7BufData22getFirstReadPointerBufEPt>
 80066a8:	61f8      	str	r0, [r7, #28]

	bool no_receive_flag = g_buf_data.getFirstNoReceiveFlagBuf();
 80066aa:	4835      	ldr	r0, [pc, #212]	; (8006780 <HAL_UART_TxCpltCallback+0x108>)
 80066ac:	f7fb f862 	bl	8001774 <_ZN7BufData24getFirstNoReceiveFlagBufEv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	76fb      	strb	r3, [r7, #27]

	if(no_receive_flag == false){ //If there is data received from the device. Start receiveing.
 80066b4:	7efb      	ldrb	r3, [r7, #27]
 80066b6:	f083 0301 	eor.w	r3, r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <HAL_UART_TxCpltCallback+0x58>
		HAL_UART_Receive_IT(g_huart_num_, (uint8_t*) p_temp_data, temp_data_length);
 80066c0:	4b30      	ldr	r3, [pc, #192]	; (8006784 <HAL_UART_TxCpltCallback+0x10c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	89fa      	ldrh	r2, [r7, #14]
 80066c6:	69f9      	ldr	r1, [r7, #28]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 f8e0 	bl	800888e <HAL_UART_Receive_IT>
		}
		else{
			g_communicating_flag = false;
		}
	}
}
 80066ce:	e04d      	b.n	800676c <HAL_UART_TxCpltCallback+0xf4>
		HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET); //RS485 Send mode enable
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <HAL_UART_TxCpltCallback+0xfc>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	4b28      	ldr	r3, [pc, #160]	; (8006778 <HAL_UART_TxCpltCallback+0x100>)
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	4619      	mov	r1, r3
 80066dc:	f001 f988 	bl	80079f0 <HAL_GPIO_WritePin>
		g_buf_data.deleteFirstBuf();
 80066e0:	4827      	ldr	r0, [pc, #156]	; (8006780 <HAL_UART_TxCpltCallback+0x108>)
 80066e2:	f7fa fec4 	bl	800146e <_ZN7BufData14deleteFirstBufEv>
		uint16_t length = g_buf_data.getFirstSendBufLength();
 80066e6:	4826      	ldr	r0, [pc, #152]	; (8006780 <HAL_UART_TxCpltCallback+0x108>)
 80066e8:	f7fa fe86 	bl	80013f8 <_ZN7BufData21getFirstSendBufLengthEv>
 80066ec:	4603      	mov	r3, r0
 80066ee:	833b      	strh	r3, [r7, #24]
		if(length != 0){ //If there is a message in the buffer
 80066f0:	8b3b      	ldrh	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d037      	beq.n	8006766 <HAL_UART_TxCpltCallback+0xee>
			HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 80066f6:	466b      	mov	r3, sp
 80066f8:	461d      	mov	r5, r3
			uint8_t temp_data[length];
 80066fa:	8b3b      	ldrh	r3, [r7, #24]
 80066fc:	1e58      	subs	r0, r3, #1
 80066fe:	6178      	str	r0, [r7, #20]
 8006700:	4603      	mov	r3, r0
 8006702:	3301      	adds	r3, #1
 8006704:	4619      	mov	r1, r3
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	f04f 0400 	mov.w	r4, #0
 8006712:	00d4      	lsls	r4, r2, #3
 8006714:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006718:	00cb      	lsls	r3, r1, #3
 800671a:	4603      	mov	r3, r0
 800671c:	3301      	adds	r3, #1
 800671e:	4619      	mov	r1, r3
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	f04f 0400 	mov.w	r4, #0
 800672c:	00d4      	lsls	r4, r2, #3
 800672e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006732:	00cb      	lsls	r3, r1, #3
 8006734:	4603      	mov	r3, r0
 8006736:	3301      	adds	r3, #1
 8006738:	3307      	adds	r3, #7
 800673a:	08db      	lsrs	r3, r3, #3
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	ebad 0d03 	sub.w	sp, sp, r3
 8006742:	466b      	mov	r3, sp
 8006744:	3300      	adds	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
			g_buf_data.getFirstSendBuf(temp_data, length);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	8b3a      	ldrh	r2, [r7, #24]
 800674c:	4619      	mov	r1, r3
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <HAL_UART_TxCpltCallback+0x108>)
 8006750:	f7fa fe66 	bl	8001420 <_ZN7BufData15getFirstSendBufEPht>
			HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_UART_TxCpltCallback+0x10c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6939      	ldr	r1, [r7, #16]
 800675a:	8b3a      	ldrh	r2, [r7, #24]
 800675c:	4618      	mov	r0, r3
 800675e:	f002 f851 	bl	8008804 <HAL_UART_Transmit_IT>
 8006762:	46ad      	mov	sp, r5
}
 8006764:	e002      	b.n	800676c <HAL_UART_TxCpltCallback+0xf4>
			g_communicating_flag = false;
 8006766:	4b08      	ldr	r3, [pc, #32]	; (8006788 <HAL_UART_TxCpltCallback+0x110>)
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
}
 800676c:	bf00      	nop
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bdb0      	pop	{r4, r5, r7, pc}
 8006774:	200002e4 	.word	0x200002e4
 8006778:	200002e8 	.word	0x200002e8
 800677c:	20000290 	.word	0x20000290
 8006780:	20000294 	.word	0x20000294
 8006784:	200002e0 	.word	0x200002e0
 8006788:	200002dc 	.word	0x200002dc

0800678c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET); //RS485 Send mode enable
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <HAL_UART_RxCpltCallback+0xb8>)
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <HAL_UART_RxCpltCallback+0xbc>)
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	4619      	mov	r1, r3
 80067a0:	f001 f926 	bl	80079f0 <HAL_GPIO_WritePin>
	mon_rx_cnt++;
 80067a4:	4b29      	ldr	r3, [pc, #164]	; (800684c <HAL_UART_RxCpltCallback+0xc0>)
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <HAL_UART_RxCpltCallback+0xc0>)
 80067ae:	801a      	strh	r2, [r3, #0]

	// Preapare next data.
	g_buf_data.deleteFirstBuf();
 80067b0:	4827      	ldr	r0, [pc, #156]	; (8006850 <HAL_UART_RxCpltCallback+0xc4>)
 80067b2:	f7fa fe5c 	bl	800146e <_ZN7BufData14deleteFirstBufEv>

	uint16_t length = g_buf_data.getFirstSendBufLength();
 80067b6:	4826      	ldr	r0, [pc, #152]	; (8006850 <HAL_UART_RxCpltCallback+0xc4>)
 80067b8:	f7fa fe1e 	bl	80013f8 <_ZN7BufData21getFirstSendBufLengthEv>
 80067bc:	4603      	mov	r3, r0
 80067be:	82fb      	strh	r3, [r7, #22]
	if(length != 0){ //If there is a message in the buffer
 80067c0:	8afb      	ldrh	r3, [r7, #22]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d037      	beq.n	8006836 <HAL_UART_RxCpltCallback+0xaa>
		uint8_t temp_data[length];
		g_buf_data.getFirstSendBuf(temp_data, length);

		HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 80067c6:	466b      	mov	r3, sp
 80067c8:	461d      	mov	r5, r3
		uint8_t temp_data[length];
 80067ca:	8afb      	ldrh	r3, [r7, #22]
 80067cc:	1e58      	subs	r0, r3, #1
 80067ce:	6138      	str	r0, [r7, #16]
 80067d0:	4603      	mov	r3, r0
 80067d2:	3301      	adds	r3, #1
 80067d4:	4619      	mov	r1, r3
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	00d4      	lsls	r4, r2, #3
 80067e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80067e8:	00cb      	lsls	r3, r1, #3
 80067ea:	4603      	mov	r3, r0
 80067ec:	3301      	adds	r3, #1
 80067ee:	4619      	mov	r1, r3
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	f04f 0400 	mov.w	r4, #0
 80067fc:	00d4      	lsls	r4, r2, #3
 80067fe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006802:	00cb      	lsls	r3, r1, #3
 8006804:	4603      	mov	r3, r0
 8006806:	3301      	adds	r3, #1
 8006808:	3307      	adds	r3, #7
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	ebad 0d03 	sub.w	sp, sp, r3
 8006812:	466b      	mov	r3, sp
 8006814:	3300      	adds	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
		g_buf_data.getFirstSendBuf(temp_data, length);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8afa      	ldrh	r2, [r7, #22]
 800681c:	4619      	mov	r1, r3
 800681e:	480c      	ldr	r0, [pc, #48]	; (8006850 <HAL_UART_RxCpltCallback+0xc4>)
 8006820:	f7fa fdfe 	bl	8001420 <_ZN7BufData15getFirstSendBufEPht>
		HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_UART_RxCpltCallback+0xc8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68f9      	ldr	r1, [r7, #12]
 800682a:	8afa      	ldrh	r2, [r7, #22]
 800682c:	4618      	mov	r0, r3
 800682e:	f001 ffe9 	bl	8008804 <HAL_UART_Transmit_IT>
 8006832:	46ad      	mov	sp, r5
	}
	else{
		g_communicating_flag = false;
	}

}
 8006834:	e002      	b.n	800683c <HAL_UART_RxCpltCallback+0xb0>
		g_communicating_flag = false;
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_UART_RxCpltCallback+0xcc>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bdb0      	pop	{r4, r5, r7, pc}
 8006844:	200002e4 	.word	0x200002e4
 8006848:	200002e8 	.word	0x200002e8
 800684c:	20000292 	.word	0x20000292
 8006850:	20000294 	.word	0x20000294
 8006854:	200002e0 	.word	0x200002e0
 8006858:	200002dc 	.word	0x200002dc

0800685c <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:

/* ------- private ------ */

/* ------- public ------- */
HAL_RS485::HAL_RS485(){}
HAL_RS485::HAL_RS485(UART_HandleTypeDef *huart_num, GPIO_TypeDef *gpio_type, uint16_t gpio_num)
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	807b      	strh	r3, [r7, #2]
{
	g_huart_num_ = huart_num;
 800686a:	4a08      	ldr	r2, [pc, #32]	; (800688c <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x30>)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6013      	str	r3, [r2, #0]
	g_gpio_type = gpio_type;
 8006870:	4a07      	ldr	r2, [pc, #28]	; (8006890 <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x34>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6013      	str	r3, [r2, #0]
	g_gpio_num = gpio_num;
 8006876:	4a07      	ldr	r2, [pc, #28]	; (8006894 <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x38>)
 8006878:	887b      	ldrh	r3, [r7, #2]
 800687a:	8013      	strh	r3, [r2, #0]
}
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	200002e0 	.word	0x200002e0
 8006890:	200002e4 	.word	0x200002e4
 8006894:	200002e8 	.word	0x200002e8

08006898 <_ZN9HAL_RS4854sendEPhh>:

void HAL_RS485::send(uint8_t *s, uint8_t size)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET);
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <_ZN9HAL_RS4854sendEPhh+0x50>)
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <_ZN9HAL_RS4854sendEPhh+0x54>)
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	2201      	movs	r2, #1
 80068b0:	4619      	mov	r1, r3
 80068b2:	f001 f89d 	bl	80079f0 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(g_huart_num_, (uint8_t*) s, size, 0xFFFF);
 80068b6:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <_ZN9HAL_RS4854sendEPhh+0x58>)
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	f001 fe5f 	bl	8008586 <HAL_UART_Transmit>
	HAL_Delay(0.2);
 80068c8:	2000      	movs	r0, #0
 80068ca:	f000 fda9 	bl	8007420 <HAL_Delay>

	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_RESET);
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <_ZN9HAL_RS4854sendEPhh+0x50>)
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <_ZN9HAL_RS4854sendEPhh+0x54>)
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	4619      	mov	r1, r3
 80068da:	f001 f889 	bl	80079f0 <HAL_GPIO_WritePin>
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200002e4 	.word	0x200002e4
 80068ec:	200002e8 	.word	0x200002e8
 80068f0:	200002e0 	.word	0x200002e0

080068f4 <_ZN9HAL_RS4854readEPhh>:

void HAL_RS485::read(uint8_t *s, uint8_t size)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(g_huart_num_, (uint8_t*) s, size, 0xFFFF);
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <_ZN9HAL_RS4854readEPhh+0x30>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	b29a      	uxth	r2, r3
 800690a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	f001 fed2 	bl	80086b8 <HAL_UART_Receive>
	HAL_Delay(0.2);
 8006914:	2000      	movs	r0, #0
 8006916:	f000 fd83 	bl	8007420 <HAL_Delay>
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200002e0 	.word	0x200002e0

08006928 <_ZN9HAL_RS4857setBufsEPhtS0_tb>:
	g_buf_data.setNoReceiveFlagBuf(flag);
}
*/

void HAL_RS485::setBufs(uint8_t *send_data, uint16_t send_data_length, uint8_t *read_data_pointer, uint16_t read_data_pointer_length, bool flag)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	80fb      	strh	r3, [r7, #6]
	g_buf_data.setSendBuf(send_data, send_data_length);
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	461a      	mov	r2, r3
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4809      	ldr	r0, [pc, #36]	; (8006964 <_ZN9HAL_RS4857setBufsEPhtS0_tb+0x3c>)
 8006940:	f7fa fcfa 	bl	8001338 <_ZN7BufData10setSendBufEPht>
	g_buf_data.setReadPointerBuf(read_data_pointer, read_data_pointer_length);
 8006944:	8b3b      	ldrh	r3, [r7, #24]
 8006946:	461a      	mov	r2, r3
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	4806      	ldr	r0, [pc, #24]	; (8006964 <_ZN9HAL_RS4857setBufsEPhtS0_tb+0x3c>)
 800694c:	f7fa fe77 	bl	800163e <_ZN7BufData17setReadPointerBufEPht>
	g_buf_data.setNoReceiveFlagBuf(flag);
 8006950:	7f3b      	ldrb	r3, [r7, #28]
 8006952:	4619      	mov	r1, r3
 8006954:	4803      	ldr	r0, [pc, #12]	; (8006964 <_ZN9HAL_RS4857setBufsEPhtS0_tb+0x3c>)
 8006956:	f7fa febf 	bl	80016d8 <_ZN7BufData19setNoReceiveFlagBufEb>

}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000294 	.word	0x20000294

08006968 <_ZN9HAL_RS48511startSendITEv>:

void HAL_RS485::startSendIT()
{
 8006968:	b5b0      	push	{r4, r5, r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[length];
	g_buf_data.getFirstSendBuf(temp_data, length);

	g_communicating_flag = true;
	HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
	HAL_Delay(1);
 8006970:	466b      	mov	r3, sp
 8006972:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET); //RS485 Send mode enable
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <_ZN9HAL_RS48511startSendITEv+0xa4>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <_ZN9HAL_RS48511startSendITEv+0xa8>)
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	2201      	movs	r2, #1
 800697e:	4619      	mov	r1, r3
 8006980:	f001 f836 	bl	80079f0 <HAL_GPIO_WritePin>
	uint16_t length = g_buf_data.getFirstSendBufLength();
 8006984:	4823      	ldr	r0, [pc, #140]	; (8006a14 <_ZN9HAL_RS48511startSendITEv+0xac>)
 8006986:	f7fa fd37 	bl	80013f8 <_ZN7BufData21getFirstSendBufLengthEv>
 800698a:	4603      	mov	r3, r0
 800698c:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_data[length];
 800698e:	8afb      	ldrh	r3, [r7, #22]
 8006990:	1e58      	subs	r0, r3, #1
 8006992:	6138      	str	r0, [r7, #16]
 8006994:	4603      	mov	r3, r0
 8006996:	3301      	adds	r3, #1
 8006998:	4619      	mov	r1, r3
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	f04f 0400 	mov.w	r4, #0
 80069a6:	00d4      	lsls	r4, r2, #3
 80069a8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80069ac:	00cb      	lsls	r3, r1, #3
 80069ae:	4603      	mov	r3, r0
 80069b0:	3301      	adds	r3, #1
 80069b2:	4619      	mov	r1, r3
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	f04f 0400 	mov.w	r4, #0
 80069c0:	00d4      	lsls	r4, r2, #3
 80069c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4603      	mov	r3, r0
 80069ca:	3301      	adds	r3, #1
 80069cc:	3307      	adds	r3, #7
 80069ce:	08db      	lsrs	r3, r3, #3
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	ebad 0d03 	sub.w	sp, sp, r3
 80069d6:	466b      	mov	r3, sp
 80069d8:	3300      	adds	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
	g_buf_data.getFirstSendBuf(temp_data, length);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8afa      	ldrh	r2, [r7, #22]
 80069e0:	4619      	mov	r1, r3
 80069e2:	480c      	ldr	r0, [pc, #48]	; (8006a14 <_ZN9HAL_RS48511startSendITEv+0xac>)
 80069e4:	f7fa fd1c 	bl	8001420 <_ZN7BufData15getFirstSendBufEPht>
	g_communicating_flag = true;
 80069e8:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <_ZN9HAL_RS48511startSendITEv+0xb0>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <_ZN9HAL_RS48511startSendITEv+0xb4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	8afa      	ldrh	r2, [r7, #22]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 ff04 	bl	8008804 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 80069fc:	2001      	movs	r0, #1
 80069fe:	f000 fd0f 	bl	8007420 <HAL_Delay>
 8006a02:	46ad      	mov	sp, r5
}
 8006a04:	bf00      	nop
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a0c:	200002e4 	.word	0x200002e4
 8006a10:	200002e8 	.word	0x200002e8
 8006a14:	20000294 	.word	0x20000294
 8006a18:	200002dc 	.word	0x200002dc
 8006a1c:	200002e0 	.word	0x200002e0

08006a20 <_ZN9HAL_RS48515isCommunicatingEv>:

bool HAL_RS485::isCommunicating()
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	return g_communicating_flag;
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <_ZN9HAL_RS48515isCommunicatingEv+0x18>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	200002dc 	.word	0x200002dc

08006a3c <_ZN7BufDataD1Ev>:

#include "stm32f4xx_hal.h"
#include <vector>
#include <algorithm>

class BufData{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3330      	adds	r3, #48	; 0x30
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f88a 	bl	8006b62 <_ZNSt6vectorIbSaIbEED1Ev>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3320      	adds	r3, #32
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f86a 	bl	8006b2c <_ZNSt6vectorItSaItEED1Ev>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 f84a 	bl	8006af6 <_ZNSt6vectorIPhSaIS0_EED1Ev>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f82a 	bl	8006ac0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <_Z41__static_initialization_and_destruction_0ii>:
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d109      	bne.n	8006a9c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d104      	bne.n	8006a9c <_Z41__static_initialization_and_destruction_0ii+0x24>
BufData g_buf_data(BUF_SIZE);
 8006a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a96:	4809      	ldr	r0, [pc, #36]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006a98:	f7fa fbff 	bl	800129a <_ZN7BufDataC1Et>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d102      	bne.n	8006ab2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8006aac:	4803      	ldr	r0, [pc, #12]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006aae:	f7ff ffc5 	bl	8006a3c <_ZN7BufDataD1Ev>
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000294 	.word	0x20000294

08006ac0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006ac0:	b5b0      	push	{r4, r5, r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681c      	ldr	r4, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fb f9d6 	bl	8001e84 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8006ad8:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ada:	461a      	mov	r2, r3
 8006adc:	4629      	mov	r1, r5
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7fb f9db 	bl	8001e9a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f854 	bl	8006b94 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bdb0      	pop	{r4, r5, r7, pc}

08006af6 <_ZNSt6vectorIPhSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006af6:	b5b0      	push	{r4, r5, r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681c      	ldr	r4, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fb f9e1 	bl	8001ed0 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 8006b0e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b10:	461a      	mov	r2, r3
 8006b12:	4629      	mov	r1, r5
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7fb f9e6 	bl	8001ee6 <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 f865 	bl	8006bec <_ZNSt12_Vector_baseIPhSaIS0_EED1Ev>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bdb0      	pop	{r4, r5, r7, pc}

08006b2c <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681c      	ldr	r4, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fb f9ec 	bl	8001f1c <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006b44:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b46:	461a      	mov	r2, r3
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7fb f9f1 	bl	8001f32 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f870 	bl	8006c38 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bdb0      	pop	{r4, r5, r7, pc}

08006b62 <_ZNSt6vectorIbSaIbEED1Ev>:
    ~vector() _GLIBCXX_NOEXCEPT { }
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f889 	bl	8006c84 <_ZNSt13_Bvector_baseISaIbEED1Ev>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f88d 	bl	8006ca4 <_ZNSaISt6vectorIhSaIhEEED1Ev>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	109b      	asrs	r3, r3, #2
 8006bae:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x3c>)
 8006bb0:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fc fafb 	bl	80031b2 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ffdc 	bl	8006b7c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	aaaaaaab 	.word	0xaaaaaaab

08006bd4 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f86d 	bl	8006cbc <_ZNSaIPhED1Ev>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <_ZNSt12_Vector_baseIPhSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6819      	ldr	r1, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006c06:	461a      	mov	r2, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fc fb07 	bl	800321c <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff ffdf 	bl	8006bd4 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implD1Ev>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f853 	bl	8006cd4 <_ZNSaItED1Ev>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	105b      	asrs	r3, r3, #1
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006c52:	461a      	mov	r2, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fc fb16 	bl	8003286 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
		      - this->_M_impl._M_start); }
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff ffdf 	bl	8006c20 <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f839 	bl	8006cec <_ZNSaImED1Ev>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fc fb32 	bl	80032f6 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ffe9 	bl	8006c6c <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <_ZNSaISt6vectorIhSaIhEEED1Ev>:
      ~allocator() throw() { }
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f829 	bl	8006d04 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <_ZNSaIPhED1Ev>:
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f828 	bl	8006d1a <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <_ZNSaItED1Ev>:
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f827 	bl	8006d30 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <_ZNSaImED1Ev>:
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f826 	bl	8006d46 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>:
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <_GLOBAL__sub_I_mon_tx_cnt>:
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d64:	2001      	movs	r0, #1
 8006d66:	f7ff fe87 	bl	8006a78 <_Z41__static_initialization_and_destruction_0ii>
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <_GLOBAL__sub_D_mon_tx_cnt>:
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d74:	2000      	movs	r0, #0
 8006d76:	f7ff fe7f 	bl	8006a78 <_Z41__static_initialization_and_destruction_0ii>
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d80:	f000 fadc 	bl	800733c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d84:	f000 f80a 	bl	8006d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d88:	f000 f8a4 	bl	8006ed4 <MX_GPIO_Init>
  MX_UART5_Init();
 8006d8c:	f000 f878 	bl	8006e80 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  cppInit(); //<- Edit
 8006d90:	f000 fa4c 	bl	800722c <cppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 cppLoop(); //<- Edit
 8006d94:	f000 fa70 	bl	8007278 <cppLoop>
 8006d98:	e7fc      	b.n	8006d94 <main+0x18>
	...

08006d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b094      	sub	sp, #80	; 0x50
 8006da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006da2:	f107 031c 	add.w	r3, r7, #28
 8006da6:	2234      	movs	r2, #52	; 0x34
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f002 fc33 	bl	8009616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	605a      	str	r2, [r3, #4]
 8006dba:	609a      	str	r2, [r3, #8]
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <SystemClock_Config+0xdc>)
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	4a2b      	ldr	r2, [pc, #172]	; (8006e78 <SystemClock_Config+0xdc>)
 8006dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dce:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd0:	4b29      	ldr	r3, [pc, #164]	; (8006e78 <SystemClock_Config+0xdc>)
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4b26      	ldr	r3, [pc, #152]	; (8006e7c <SystemClock_Config+0xe0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a25      	ldr	r2, [pc, #148]	; (8006e7c <SystemClock_Config+0xe0>)
 8006de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	4b23      	ldr	r3, [pc, #140]	; (8006e7c <SystemClock_Config+0xe0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e02:	2302      	movs	r3, #2
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006e10:	23b4      	movs	r3, #180	; 0xb4
 8006e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e14:	2302      	movs	r3, #2
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e20:	f107 031c 	add.w	r3, r7, #28
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 f907 	bl	8008038 <HAL_RCC_OscConfig>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006e30:	f000 f8be 	bl	8006fb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006e34:	f000 fdf6 	bl	8007a24 <HAL_PWREx_EnableOverDrive>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8006e3e:	f000 f8b7 	bl	8006fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e42:	230f      	movs	r3, #15
 8006e44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e46:	2302      	movs	r3, #2
 8006e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006e4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006e5a:	f107 0308 	add.w	r3, r7, #8
 8006e5e:	2105      	movs	r1, #5
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fe2f 	bl	8007ac4 <HAL_RCC_ClockConfig>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8006e6c:	f000 f8a0 	bl	8006fb0 <Error_Handler>
  }
}
 8006e70:	bf00      	nop
 8006e72:	3750      	adds	r7, #80	; 0x50
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	40007000 	.word	0x40007000

08006e80 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006e86:	4a12      	ldr	r2, [pc, #72]	; (8006ed0 <MX_UART5_Init+0x50>)
 8006e88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57143;
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006e8c:	f64d 7237 	movw	r2, #57143	; 0xdf37
 8006e90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006ea6:	220c      	movs	r2, #12
 8006ea8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006eb6:	4805      	ldr	r0, [pc, #20]	; (8006ecc <MX_UART5_Init+0x4c>)
 8006eb8:	f001 fb18 	bl	80084ec <HAL_UART_Init>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006ec2:	f000 f875 	bl	8006fb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006ec6:	bf00      	nop
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	200002f0 	.word	0x200002f0
 8006ed0:	40005000 	.word	0x40005000

08006ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	; 0x28
 8006ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eda:	f107 0314 	add.w	r3, r7, #20
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	605a      	str	r2, [r3, #4]
 8006ee4:	609a      	str	r2, [r3, #8]
 8006ee6:	60da      	str	r2, [r3, #12]
 8006ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006ef4:	f043 0304 	orr.w	r3, r3, #4
 8006ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8006efa:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	4a26      	ldr	r2, [pc, #152]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f14:	6313      	str	r3, [r2, #48]	; 0x30
 8006f16:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	4b20      	ldr	r3, [pc, #128]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	6313      	str	r3, [r2, #48]	; 0x30
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	60bb      	str	r3, [r7, #8]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	4b19      	ldr	r3, [pc, #100]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4e:	4b16      	ldr	r3, [pc, #88]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	4a11      	ldr	r2, [pc, #68]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6a:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <MX_GPIO_Init+0xd4>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_HO_GPIO_Port, RS485_HO_Pin, GPIO_PIN_RESET);
 8006f76:	2200      	movs	r2, #0
 8006f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f7c:	480b      	ldr	r0, [pc, #44]	; (8006fac <MX_GPIO_Init+0xd8>)
 8006f7e:	f000 fd37 	bl	80079f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_HO_Pin */
  GPIO_InitStruct.Pin = RS485_HO_Pin;
 8006f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f90:	2300      	movs	r3, #0
 8006f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_HO_GPIO_Port, &GPIO_InitStruct);
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4804      	ldr	r0, [pc, #16]	; (8006fac <MX_GPIO_Init+0xd8>)
 8006f9c:	f000 fb96 	bl	80076cc <HAL_GPIO_Init>

}
 8006fa0:	bf00      	nop
 8006fa2:	3728      	adds	r7, #40	; 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40020800 	.word	0x40020800

08006fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006fb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006fb6:	e7fe      	b.n	8006fb6 <Error_Handler+0x6>

08006fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	4b10      	ldr	r3, [pc, #64]	; (8007004 <HAL_MspInit+0x4c>)
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <HAL_MspInit+0x4c>)
 8006fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <HAL_MspInit+0x4c>)
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	2300      	movs	r3, #0
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <HAL_MspInit+0x4c>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	4a08      	ldr	r2, [pc, #32]	; (8007004 <HAL_MspInit+0x4c>)
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fea:	4b06      	ldr	r3, [pc, #24]	; (8007004 <HAL_MspInit+0x4c>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800

08007008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007010:	f107 0314 	add.w	r3, r7, #20
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	609a      	str	r2, [r3, #8]
 800701c:	60da      	str	r2, [r3, #12]
 800701e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2c      	ldr	r2, [pc, #176]	; (80070d8 <HAL_UART_MspInit+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d152      	bne.n	80070d0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_UART_MspInit+0xd4>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	4a2a      	ldr	r2, [pc, #168]	; (80070dc <HAL_UART_MspInit+0xd4>)
 8007034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007038:	6413      	str	r3, [r2, #64]	; 0x40
 800703a:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_UART_MspInit+0xd4>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <HAL_UART_MspInit+0xd4>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	4a23      	ldr	r2, [pc, #140]	; (80070dc <HAL_UART_MspInit+0xd4>)
 8007050:	f043 0304 	orr.w	r3, r3, #4
 8007054:	6313      	str	r3, [r2, #48]	; 0x30
 8007056:	4b21      	ldr	r3, [pc, #132]	; (80070dc <HAL_UART_MspInit+0xd4>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007062:	2300      	movs	r3, #0
 8007064:	60bb      	str	r3, [r7, #8]
 8007066:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <HAL_UART_MspInit+0xd4>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <HAL_UART_MspInit+0xd4>)
 800706c:	f043 0308 	orr.w	r3, r3, #8
 8007070:	6313      	str	r3, [r2, #48]	; 0x30
 8007072:	4b1a      	ldr	r3, [pc, #104]	; (80070dc <HAL_UART_MspInit+0xd4>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	60bb      	str	r3, [r7, #8]
 800707c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 800707e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007084:	2302      	movs	r3, #2
 8007086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007088:	2301      	movs	r3, #1
 800708a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800708c:	2303      	movs	r3, #3
 800708e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007090:	2308      	movs	r3, #8
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	4619      	mov	r1, r3
 800709a:	4811      	ldr	r0, [pc, #68]	; (80070e0 <HAL_UART_MspInit+0xd8>)
 800709c:	f000 fb16 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80070a0:	2304      	movs	r3, #4
 80070a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a4:	2302      	movs	r3, #2
 80070a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070a8:	2301      	movs	r3, #1
 80070aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ac:	2303      	movs	r3, #3
 80070ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80070b0:	2308      	movs	r3, #8
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	4619      	mov	r1, r3
 80070ba:	480a      	ldr	r0, [pc, #40]	; (80070e4 <HAL_UART_MspInit+0xdc>)
 80070bc:	f000 fb06 	bl	80076cc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	2035      	movs	r0, #53	; 0x35
 80070c6:	f000 faa8 	bl	800761a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80070ca:	2035      	movs	r0, #53	; 0x35
 80070cc:	f000 fac1 	bl	8007652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80070d0:	bf00      	nop
 80070d2:	3728      	adds	r7, #40	; 0x28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40005000 	.word	0x40005000
 80070dc:	40023800 	.word	0x40023800
 80070e0:	40020800 	.word	0x40020800
 80070e4:	40020c00 	.word	0x40020c00

080070e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070ec:	e7fe      	b.n	80070ec <NMI_Handler+0x4>

080070ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070ee:	b480      	push	{r7}
 80070f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070f2:	e7fe      	b.n	80070f2 <HardFault_Handler+0x4>

080070f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070f8:	e7fe      	b.n	80070f8 <MemManage_Handler+0x4>

080070fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070fa:	b480      	push	{r7}
 80070fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070fe:	e7fe      	b.n	80070fe <BusFault_Handler+0x4>

08007100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007104:	e7fe      	b.n	8007104 <UsageFault_Handler+0x4>

08007106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800710a:	bf00      	nop
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007118:	bf00      	nop
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007122:	b480      	push	{r7}
 8007124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007126:	bf00      	nop
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007134:	f000 f954 	bl	80073e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007138:	bf00      	nop
 800713a:	bd80      	pop	{r7, pc}

0800713c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007140:	4802      	ldr	r0, [pc, #8]	; (800714c <UART5_IRQHandler+0x10>)
 8007142:	f001 fbf9 	bl	8008938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8007146:	bf00      	nop
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200002f0 	.word	0x200002f0

08007150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
	return 1;
 8007154:	2301      	movs	r3, #1
}
 8007156:	4618      	mov	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <_kill>:

int _kill(int pid, int sig)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800716a:	f002 fa01 	bl	8009570 <__errno>
 800716e:	4602      	mov	r2, r0
 8007170:	2316      	movs	r3, #22
 8007172:	6013      	str	r3, [r2, #0]
	return -1;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <_exit>:

void _exit (int status)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007188:	f04f 31ff 	mov.w	r1, #4294967295
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff ffe7 	bl	8007160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007192:	e7fe      	b.n	8007192 <_exit+0x12>

08007194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800719c:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <_sbrk+0x5c>)
 800719e:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <_sbrk+0x60>)
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071a8:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <_sbrk+0x64>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071b0:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <_sbrk+0x64>)
 80071b2:	4a12      	ldr	r2, [pc, #72]	; (80071fc <_sbrk+0x68>)
 80071b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <_sbrk+0x64>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4413      	add	r3, r2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d207      	bcs.n	80071d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071c4:	f002 f9d4 	bl	8009570 <__errno>
 80071c8:	4602      	mov	r2, r0
 80071ca:	230c      	movs	r3, #12
 80071cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
 80071d2:	e009      	b.n	80071e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071d4:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <_sbrk+0x64>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071da:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <_sbrk+0x64>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	4a05      	ldr	r2, [pc, #20]	; (80071f8 <_sbrk+0x64>)
 80071e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20020000 	.word	0x20020000
 80071f4:	00000400 	.word	0x00000400
 80071f8:	200002ec 	.word	0x200002ec
 80071fc:	20000378 	.word	0x20000378

08007200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <SystemInit+0x28>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720a:	4a07      	ldr	r2, [pc, #28]	; (8007228 <SystemInit+0x28>)
 800720c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007214:	4b04      	ldr	r3, [pc, #16]	; (8007228 <SystemInit+0x28>)
 8007216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800721a:	609a      	str	r2, [r3, #8]
#endif
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	e000ed00 	.word	0xe000ed00

0800722c <cppInit>:
uint8_t mon_error_led, mon_error_temp;
uint16_t mon_ret;
uint8_t mon_ping;
uint8_t mon_char;

void cppInit(void){
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
	//HAL_Delay(1000);
	mon_ping = mx64.ping(DYNAMIXEL_ID);
 8007230:	2103      	movs	r1, #3
 8007232:	480e      	ldr	r0, [pc, #56]	; (800726c <cppInit+0x40>)
 8007234:	f7ff f91b 	bl	800646e <_ZN9Dynamixel4pingEh>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <cppInit+0x44>)
 800723e:	701a      	strb	r2, [r3, #0]

	mx64.setOperatingMode(DYNAMIXEL_ID, 4);
 8007240:	2204      	movs	r2, #4
 8007242:	2103      	movs	r1, #3
 8007244:	4809      	ldr	r0, [pc, #36]	; (800726c <cppInit+0x40>)
 8007246:	f7ff f9c1 	bl	80065cc <_ZN9Dynamixel16setOperatingModeEhh>
	mx64.requestInputVoltage(DYNAMIXEL_ID);
 800724a:	2103      	movs	r1, #3
 800724c:	4807      	ldr	r0, [pc, #28]	; (800726c <cppInit+0x40>)
 800724e:	f7ff f9e8 	bl	8006622 <_ZN9Dynamixel19requestInputVoltageEh>

	mx64.torque(DYNAMIXEL_ID, 1);
 8007252:	2201      	movs	r2, #1
 8007254:	2103      	movs	r1, #3
 8007256:	4805      	ldr	r0, [pc, #20]	; (800726c <cppInit+0x40>)
 8007258:	f7ff f935 	bl	80064c6 <_ZN9Dynamixel6torqueEhh>
	mx64.setGoalPosition(DYNAMIXEL_ID, 0);
 800725c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007274 <cppInit+0x48>
 8007260:	2103      	movs	r1, #3
 8007262:	4802      	ldr	r0, [pc, #8]	; (800726c <cppInit+0x40>)
 8007264:	f7ff f95c 	bl	8006520 <_ZN9Dynamixel15setGoalPositionEhf>
}
 8007268:	bf00      	nop
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000330 	.word	0x20000330
 8007270:	2000035e 	.word	0x2000035e
 8007274:	00000000 	.word	0x00000000

08007278 <cppLoop>:

void cppLoop(void){
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
	static float angle;

	mx64.setGoalPosition(DYNAMIXEL_ID, angle);
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <cppLoop+0x1c>)
 800727e:	edd3 7a00 	vldr	s15, [r3]
 8007282:	eeb0 0a67 	vmov.f32	s0, s15
 8007286:	2103      	movs	r1, #3
 8007288:	4803      	ldr	r0, [pc, #12]	; (8007298 <cppLoop+0x20>)
 800728a:	f7ff f949 	bl	8006520 <_ZN9Dynamixel15setGoalPositionEhf>

}
 800728e:	bf00      	nop
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000360 	.word	0x20000360
 8007298:	20000330 	.word	0x20000330

0800729c <_Z41__static_initialization_and_destruction_0ii>:
	//encoder.updateCnt();
	//total_cnt = encoder.getAngle();

	//encoder.clearCnt();

}
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10b      	bne.n	80072c4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d106      	bne.n	80072c4 <_Z41__static_initialization_and_destruction_0ii+0x28>
Dynamixel mx64(&huart5, GPIOC, GPIO_PIN_13);
 80072b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072ba:	4a04      	ldr	r2, [pc, #16]	; (80072cc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80072bc:	4904      	ldr	r1, [pc, #16]	; (80072d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80072be:	4805      	ldr	r0, [pc, #20]	; (80072d4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80072c0:	f7ff f8c3 	bl	800644a <_ZN9DynamixelC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40020800 	.word	0x40020800
 80072d0:	200002f0 	.word	0x200002f0
 80072d4:	20000330 	.word	0x20000330

080072d8 <_GLOBAL__sub_I_huart5>:
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
 80072dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072e0:	2001      	movs	r0, #1
 80072e2:	f7ff ffdb 	bl	800729c <_Z41__static_initialization_and_destruction_0ii>
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80072e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80072ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80072ee:	e003      	b.n	80072f8 <LoopCopyDataInit>

080072f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80072f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80072f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80072f6:	3104      	adds	r1, #4

080072f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80072f8:	480b      	ldr	r0, [pc, #44]	; (8007328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80072fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80072fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007300:	d3f6      	bcc.n	80072f0 <CopyDataInit>
  ldr  r2, =_sbss
 8007302:	4a0b      	ldr	r2, [pc, #44]	; (8007330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007304:	e002      	b.n	800730c <LoopFillZerobss>

08007306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007308:	f842 3b04 	str.w	r3, [r2], #4

0800730c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800730e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007310:	d3f9      	bcc.n	8007306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007312:	f7ff ff75 	bl	8007200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007316:	f002 f931 	bl	800957c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800731a:	f7ff fd2f 	bl	8006d7c <main>
  bx  lr    
 800731e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007320:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007324:	080098ac 	.word	0x080098ac
  ldr  r0, =_sdata
 8007328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800732c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8007330:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8007334:	20000378 	.word	0x20000378

08007338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007338:	e7fe      	b.n	8007338 <ADC_IRQHandler>
	...

0800733c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <HAL_Init+0x40>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0d      	ldr	r2, [pc, #52]	; (800737c <HAL_Init+0x40>)
 8007346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800734a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_Init+0x40>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_Init+0x40>)
 8007352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <HAL_Init+0x40>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a07      	ldr	r2, [pc, #28]	; (800737c <HAL_Init+0x40>)
 800735e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007364:	2003      	movs	r0, #3
 8007366:	f000 f94d 	bl	8007604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800736a:	2000      	movs	r0, #0
 800736c:	f000 f808 	bl	8007380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007370:	f7ff fe22 	bl	8006fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40023c00 	.word	0x40023c00

08007380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007388:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <HAL_InitTick+0x54>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_InitTick+0x58>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007396:	fbb3 f3f1 	udiv	r3, r3, r1
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 f965 	bl	800766e <HAL_SYSTICK_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e00e      	b.n	80073cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b0f      	cmp	r3, #15
 80073b2:	d80a      	bhi.n	80073ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073b4:	2200      	movs	r2, #0
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	f000 f92d 	bl	800761a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073c0:	4a06      	ldr	r2, [pc, #24]	; (80073dc <HAL_InitTick+0x5c>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e000      	b.n	80073cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000000 	.word	0x20000000
 80073d8:	20000008 	.word	0x20000008
 80073dc:	20000004 	.word	0x20000004

080073e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <HAL_IncTick+0x20>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <HAL_IncTick+0x24>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4413      	add	r3, r2
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <HAL_IncTick+0x24>)
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000008 	.word	0x20000008
 8007404:	20000370 	.word	0x20000370

08007408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  return uwTick;
 800740c:	4b03      	ldr	r3, [pc, #12]	; (800741c <HAL_GetTick+0x14>)
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	20000370 	.word	0x20000370

08007420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007428:	f7ff ffee 	bl	8007408 <HAL_GetTick>
 800742c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d005      	beq.n	8007446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <HAL_Delay+0x40>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007446:	bf00      	nop
 8007448:	f7ff ffde 	bl	8007408 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	429a      	cmp	r2, r3
 8007456:	d8f7      	bhi.n	8007448 <HAL_Delay+0x28>
  {
  }
}
 8007458:	bf00      	nop
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000008 	.word	0x20000008

08007464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007480:	4013      	ands	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800748c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007496:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	60d3      	str	r3, [r2, #12]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	e000ed00 	.word	0xe000ed00

080074ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <__NVIC_GetPriorityGrouping+0x18>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	f003 0307 	and.w	r3, r3, #7
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	e000ed00 	.word	0xe000ed00

080074c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	db0b      	blt.n	80074f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	f003 021f 	and.w	r2, r3, #31
 80074e0:	4907      	ldr	r1, [pc, #28]	; (8007500 <__NVIC_EnableIRQ+0x38>)
 80074e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	2001      	movs	r0, #1
 80074ea:	fa00 f202 	lsl.w	r2, r0, r2
 80074ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	e000e100 	.word	0xe000e100

08007504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007514:	2b00      	cmp	r3, #0
 8007516:	db0a      	blt.n	800752e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	b2da      	uxtb	r2, r3
 800751c:	490c      	ldr	r1, [pc, #48]	; (8007550 <__NVIC_SetPriority+0x4c>)
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	0112      	lsls	r2, r2, #4
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	440b      	add	r3, r1
 8007528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800752c:	e00a      	b.n	8007544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	b2da      	uxtb	r2, r3
 8007532:	4908      	ldr	r1, [pc, #32]	; (8007554 <__NVIC_SetPriority+0x50>)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	3b04      	subs	r3, #4
 800753c:	0112      	lsls	r2, r2, #4
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	440b      	add	r3, r1
 8007542:	761a      	strb	r2, [r3, #24]
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	e000e100 	.word	0xe000e100
 8007554:	e000ed00 	.word	0xe000ed00

08007558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007558:	b480      	push	{r7}
 800755a:	b089      	sub	sp, #36	; 0x24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f1c3 0307 	rsb	r3, r3, #7
 8007572:	2b04      	cmp	r3, #4
 8007574:	bf28      	it	cs
 8007576:	2304      	movcs	r3, #4
 8007578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	3304      	adds	r3, #4
 800757e:	2b06      	cmp	r3, #6
 8007580:	d902      	bls.n	8007588 <NVIC_EncodePriority+0x30>
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	3b03      	subs	r3, #3
 8007586:	e000      	b.n	800758a <NVIC_EncodePriority+0x32>
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	43da      	mvns	r2, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	401a      	ands	r2, r3
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075a0:	f04f 31ff 	mov.w	r1, #4294967295
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	fa01 f303 	lsl.w	r3, r1, r3
 80075aa:	43d9      	mvns	r1, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b0:	4313      	orrs	r3, r2
         );
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3724      	adds	r7, #36	; 0x24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d0:	d301      	bcc.n	80075d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075d2:	2301      	movs	r3, #1
 80075d4:	e00f      	b.n	80075f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075d6:	4a0a      	ldr	r2, [pc, #40]	; (8007600 <SysTick_Config+0x40>)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3b01      	subs	r3, #1
 80075dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075de:	210f      	movs	r1, #15
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	f7ff ff8e 	bl	8007504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075e8:	4b05      	ldr	r3, [pc, #20]	; (8007600 <SysTick_Config+0x40>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075ee:	4b04      	ldr	r3, [pc, #16]	; (8007600 <SysTick_Config+0x40>)
 80075f0:	2207      	movs	r2, #7
 80075f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	e000e010 	.word	0xe000e010

08007604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ff29 	bl	8007464 <__NVIC_SetPriorityGrouping>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	4603      	mov	r3, r0
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800762c:	f7ff ff3e 	bl	80074ac <__NVIC_GetPriorityGrouping>
 8007630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	6978      	ldr	r0, [r7, #20]
 8007638:	f7ff ff8e 	bl	8007558 <NVIC_EncodePriority>
 800763c:	4602      	mov	r2, r0
 800763e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff ff5d 	bl	8007504 <__NVIC_SetPriority>
}
 800764a:	bf00      	nop
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	4603      	mov	r3, r0
 800765a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800765c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff ff31 	bl	80074c8 <__NVIC_EnableIRQ>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ffa2 	bl	80075c0 <SysTick_Config>
 800767c:	4603      	mov	r3, r0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d004      	beq.n	80076a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e00c      	b.n	80076be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2205      	movs	r2, #5
 80076a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e165      	b.n	80079b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076e8:	2201      	movs	r2, #1
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4013      	ands	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	429a      	cmp	r2, r3
 8007702:	f040 8154 	bne.w	80079ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d00b      	beq.n	8007726 <HAL_GPIO_Init+0x5a>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d007      	beq.n	8007726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800771a:	2b11      	cmp	r3, #17
 800771c:	d003      	beq.n	8007726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b12      	cmp	r3, #18
 8007724:	d130      	bne.n	8007788 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	2203      	movs	r2, #3
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43db      	mvns	r3, r3
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	4013      	ands	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	4313      	orrs	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800775c:	2201      	movs	r2, #1
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	4013      	ands	r3, r2
 800776a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	f003 0201 	and.w	r2, r3, #1
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4313      	orrs	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	2203      	movs	r2, #3
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d003      	beq.n	80077c8 <HAL_GPIO_Init+0xfc>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2b12      	cmp	r3, #18
 80077c6:	d123      	bne.n	8007810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	08da      	lsrs	r2, r3, #3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3208      	adds	r2, #8
 80077d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	220f      	movs	r2, #15
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	08da      	lsrs	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3208      	adds	r2, #8
 800780a:	69b9      	ldr	r1, [r7, #24]
 800780c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	2203      	movs	r2, #3
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4013      	ands	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f003 0203 	and.w	r2, r3, #3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80ae 	beq.w	80079ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	4b5c      	ldr	r3, [pc, #368]	; (80079c8 <HAL_GPIO_Init+0x2fc>)
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	4a5b      	ldr	r2, [pc, #364]	; (80079c8 <HAL_GPIO_Init+0x2fc>)
 800785c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007860:	6453      	str	r3, [r2, #68]	; 0x44
 8007862:	4b59      	ldr	r3, [pc, #356]	; (80079c8 <HAL_GPIO_Init+0x2fc>)
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800786e:	4a57      	ldr	r2, [pc, #348]	; (80079cc <HAL_GPIO_Init+0x300>)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	3302      	adds	r3, #2
 8007876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	220f      	movs	r2, #15
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a4e      	ldr	r2, [pc, #312]	; (80079d0 <HAL_GPIO_Init+0x304>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d025      	beq.n	80078e6 <HAL_GPIO_Init+0x21a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a4d      	ldr	r2, [pc, #308]	; (80079d4 <HAL_GPIO_Init+0x308>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01f      	beq.n	80078e2 <HAL_GPIO_Init+0x216>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a4c      	ldr	r2, [pc, #304]	; (80079d8 <HAL_GPIO_Init+0x30c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d019      	beq.n	80078de <HAL_GPIO_Init+0x212>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a4b      	ldr	r2, [pc, #300]	; (80079dc <HAL_GPIO_Init+0x310>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_GPIO_Init+0x20e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a4a      	ldr	r2, [pc, #296]	; (80079e0 <HAL_GPIO_Init+0x314>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00d      	beq.n	80078d6 <HAL_GPIO_Init+0x20a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a49      	ldr	r2, [pc, #292]	; (80079e4 <HAL_GPIO_Init+0x318>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <HAL_GPIO_Init+0x206>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a48      	ldr	r2, [pc, #288]	; (80079e8 <HAL_GPIO_Init+0x31c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_GPIO_Init+0x202>
 80078ca:	2306      	movs	r3, #6
 80078cc:	e00c      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078ce:	2307      	movs	r3, #7
 80078d0:	e00a      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078d2:	2305      	movs	r3, #5
 80078d4:	e008      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078d6:	2304      	movs	r3, #4
 80078d8:	e006      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078da:	2303      	movs	r3, #3
 80078dc:	e004      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078de:	2302      	movs	r3, #2
 80078e0:	e002      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078e6:	2300      	movs	r3, #0
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	f002 0203 	and.w	r2, r2, #3
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	4093      	lsls	r3, r2
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078f8:	4934      	ldr	r1, [pc, #208]	; (80079cc <HAL_GPIO_Init+0x300>)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	089b      	lsrs	r3, r3, #2
 80078fe:	3302      	adds	r3, #2
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007906:	4b39      	ldr	r3, [pc, #228]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	43db      	mvns	r3, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4013      	ands	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800792a:	4a30      	ldr	r2, [pc, #192]	; (80079ec <HAL_GPIO_Init+0x320>)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007930:	4b2e      	ldr	r3, [pc, #184]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	43db      	mvns	r3, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4013      	ands	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007954:	4a25      	ldr	r2, [pc, #148]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800795a:	4b24      	ldr	r3, [pc, #144]	; (80079ec <HAL_GPIO_Init+0x320>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	43db      	mvns	r3, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4013      	ands	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007984:	4b19      	ldr	r3, [pc, #100]	; (80079ec <HAL_GPIO_Init+0x320>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079a8:	4a10      	ldr	r2, [pc, #64]	; (80079ec <HAL_GPIO_Init+0x320>)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	f67f ae96 	bls.w	80076e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80079bc:	bf00      	nop
 80079be:	3724      	adds	r7, #36	; 0x24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40013800 	.word	0x40013800
 80079d0:	40020000 	.word	0x40020000
 80079d4:	40020400 	.word	0x40020400
 80079d8:	40020800 	.word	0x40020800
 80079dc:	40020c00 	.word	0x40020c00
 80079e0:	40021000 	.word	0x40021000
 80079e4:	40021400 	.word	0x40021400
 80079e8:	40021800 	.word	0x40021800
 80079ec:	40013c00 	.word	0x40013c00

080079f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	807b      	strh	r3, [r7, #2]
 80079fc:	4613      	mov	r3, r2
 80079fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a00:	787b      	ldrb	r3, [r7, #1]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a06:	887a      	ldrh	r2, [r7, #2]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a0c:	e003      	b.n	8007a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a0e:	887b      	ldrh	r3, [r7, #2]
 8007a10:	041a      	lsls	r2, r3, #16
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	619a      	str	r2, [r3, #24]
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
	...

08007a24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007a2e:	2300      	movs	r3, #0
 8007a30:	603b      	str	r3, [r7, #0]
 8007a32:	4b20      	ldr	r3, [pc, #128]	; (8007ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a3e:	4b1d      	ldr	r3, [pc, #116]	; (8007ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <HAL_PWREx_EnableOverDrive+0x94>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a50:	f7ff fcda 	bl	8007408 <HAL_GetTick>
 8007a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a56:	e009      	b.n	8007a6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a58:	f7ff fcd6 	bl	8007408 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a66:	d901      	bls.n	8007a6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e01f      	b.n	8007aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a6c:	4b13      	ldr	r3, [pc, #76]	; (8007abc <HAL_PWREx_EnableOverDrive+0x98>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a78:	d1ee      	bne.n	8007a58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007a7a:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a80:	f7ff fcc2 	bl	8007408 <HAL_GetTick>
 8007a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a86:	e009      	b.n	8007a9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a88:	f7ff fcbe 	bl	8007408 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a96:	d901      	bls.n	8007a9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e007      	b.n	8007aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a9c:	4b07      	ldr	r3, [pc, #28]	; (8007abc <HAL_PWREx_EnableOverDrive+0x98>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa8:	d1ee      	bne.n	8007a88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	420e0040 	.word	0x420e0040
 8007abc:	40007000 	.word	0x40007000
 8007ac0:	420e0044 	.word	0x420e0044

08007ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0cc      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad8:	4b68      	ldr	r3, [pc, #416]	; (8007c7c <HAL_RCC_ClockConfig+0x1b8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d90c      	bls.n	8007b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae6:	4b65      	ldr	r3, [pc, #404]	; (8007c7c <HAL_RCC_ClockConfig+0x1b8>)
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aee:	4b63      	ldr	r3, [pc, #396]	; (8007c7c <HAL_RCC_ClockConfig+0x1b8>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d001      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e0b8      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d020      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b18:	4b59      	ldr	r3, [pc, #356]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4a58      	ldr	r2, [pc, #352]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b30:	4b53      	ldr	r3, [pc, #332]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	4a52      	ldr	r2, [pc, #328]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b3c:	4b50      	ldr	r3, [pc, #320]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	494d      	ldr	r1, [pc, #308]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d044      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d107      	bne.n	8007b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	4b47      	ldr	r3, [pc, #284]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d119      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e07f      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d003      	beq.n	8007b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d107      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b82:	4b3f      	ldr	r3, [pc, #252]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e06f      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b92:	4b3b      	ldr	r3, [pc, #236]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e067      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ba2:	4b37      	ldr	r3, [pc, #220]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f023 0203 	bic.w	r2, r3, #3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4934      	ldr	r1, [pc, #208]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bb4:	f7ff fc28 	bl	8007408 <HAL_GetTick>
 8007bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bba:	e00a      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bbc:	f7ff fc24 	bl	8007408 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e04f      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd2:	4b2b      	ldr	r3, [pc, #172]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 020c 	and.w	r2, r3, #12
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d1eb      	bne.n	8007bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007be4:	4b25      	ldr	r3, [pc, #148]	; (8007c7c <HAL_RCC_ClockConfig+0x1b8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d20c      	bcs.n	8007c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bf2:	4b22      	ldr	r3, [pc, #136]	; (8007c7c <HAL_RCC_ClockConfig+0x1b8>)
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfa:	4b20      	ldr	r3, [pc, #128]	; (8007c7c <HAL_RCC_ClockConfig+0x1b8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d001      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e032      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c18:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4916      	ldr	r1, [pc, #88]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	490e      	ldr	r1, [pc, #56]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c4a:	f000 f855 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007c4e:	4601      	mov	r1, r0
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	091b      	lsrs	r3, r3, #4
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	4a0a      	ldr	r2, [pc, #40]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007c5c:	5cd3      	ldrb	r3, [r2, r3]
 8007c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8007c62:	4a09      	ldr	r2, [pc, #36]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <HAL_RCC_ClockConfig+0x1c8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fb88 	bl	8007380 <HAL_InitTick>

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023c00 	.word	0x40023c00
 8007c80:	40023800 	.word	0x40023800
 8007c84:	08009878 	.word	0x08009878
 8007c88:	20000000 	.word	0x20000000
 8007c8c:	20000004 	.word	0x20000004

08007c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000000 	.word	0x20000000

08007ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cac:	f7ff fff0 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	0a9b      	lsrs	r3, r3, #10
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	4a03      	ldr	r2, [pc, #12]	; (8007ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cbe:	5cd3      	ldrb	r3, [r2, r3]
 8007cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	08009888 	.word	0x08009888

08007cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007cd4:	f7ff ffdc 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007cd8:	4601      	mov	r1, r0
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	0b5b      	lsrs	r3, r3, #13
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	4a03      	ldr	r2, [pc, #12]	; (8007cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ce6:	5cd3      	ldrb	r3, [r2, r3]
 8007ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40023800 	.word	0x40023800
 8007cf4:	08009888 	.word	0x08009888

08007cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d12:	4bc6      	ldr	r3, [pc, #792]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 030c 	and.w	r3, r3, #12
 8007d1a:	2b0c      	cmp	r3, #12
 8007d1c:	f200 817e 	bhi.w	800801c <HAL_RCC_GetSysClockFreq+0x324>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <HAL_RCC_GetSysClockFreq+0x30>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d5d 	.word	0x08007d5d
 8007d2c:	0800801d 	.word	0x0800801d
 8007d30:	0800801d 	.word	0x0800801d
 8007d34:	0800801d 	.word	0x0800801d
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	0800801d 	.word	0x0800801d
 8007d40:	0800801d 	.word	0x0800801d
 8007d44:	0800801d 	.word	0x0800801d
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	0800801d 	.word	0x0800801d
 8007d50:	0800801d 	.word	0x0800801d
 8007d54:	0800801d 	.word	0x0800801d
 8007d58:	08007ec5 	.word	0x08007ec5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d5c:	4bb4      	ldr	r3, [pc, #720]	; (8008030 <HAL_RCC_GetSysClockFreq+0x338>)
 8007d5e:	613b      	str	r3, [r7, #16]
       break;
 8007d60:	e15f      	b.n	8008022 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d62:	4bb4      	ldr	r3, [pc, #720]	; (8008034 <HAL_RCC_GetSysClockFreq+0x33c>)
 8007d64:	613b      	str	r3, [r7, #16]
      break;
 8007d66:	e15c      	b.n	8008022 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d68:	4bb0      	ldr	r3, [pc, #704]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d70:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d72:	4bae      	ldr	r3, [pc, #696]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04a      	beq.n	8007e14 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d7e:	4bab      	ldr	r3, [pc, #684]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	099b      	lsrs	r3, r3, #6
 8007d84:	f04f 0400 	mov.w	r4, #0
 8007d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	ea03 0501 	and.w	r5, r3, r1
 8007d94:	ea04 0602 	and.w	r6, r4, r2
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4632      	mov	r2, r6
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	f04f 0400 	mov.w	r4, #0
 8007da4:	0154      	lsls	r4, r2, #5
 8007da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007daa:	014b      	lsls	r3, r1, #5
 8007dac:	4619      	mov	r1, r3
 8007dae:	4622      	mov	r2, r4
 8007db0:	1b49      	subs	r1, r1, r5
 8007db2:	eb62 0206 	sbc.w	r2, r2, r6
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	f04f 0400 	mov.w	r4, #0
 8007dbe:	0194      	lsls	r4, r2, #6
 8007dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007dc4:	018b      	lsls	r3, r1, #6
 8007dc6:	1a5b      	subs	r3, r3, r1
 8007dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8007dcc:	f04f 0100 	mov.w	r1, #0
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	00e2      	lsls	r2, r4, #3
 8007dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007dda:	00d9      	lsls	r1, r3, #3
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4614      	mov	r4, r2
 8007de0:	195b      	adds	r3, r3, r5
 8007de2:	eb44 0406 	adc.w	r4, r4, r6
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	0262      	lsls	r2, r4, #9
 8007df0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007df4:	0259      	lsls	r1, r3, #9
 8007df6:	460b      	mov	r3, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f04f 0400 	mov.w	r4, #0
 8007e04:	461a      	mov	r2, r3
 8007e06:	4623      	mov	r3, r4
 8007e08:	f7f8 fdf4 	bl	80009f4 <__aeabi_uldivmod>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	e049      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e14:	4b85      	ldr	r3, [pc, #532]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	099b      	lsrs	r3, r3, #6
 8007e1a:	f04f 0400 	mov.w	r4, #0
 8007e1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	ea03 0501 	and.w	r5, r3, r1
 8007e2a:	ea04 0602 	and.w	r6, r4, r2
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4632      	mov	r2, r6
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	f04f 0400 	mov.w	r4, #0
 8007e3a:	0154      	lsls	r4, r2, #5
 8007e3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007e40:	014b      	lsls	r3, r1, #5
 8007e42:	4619      	mov	r1, r3
 8007e44:	4622      	mov	r2, r4
 8007e46:	1b49      	subs	r1, r1, r5
 8007e48:	eb62 0206 	sbc.w	r2, r2, r6
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	f04f 0400 	mov.w	r4, #0
 8007e54:	0194      	lsls	r4, r2, #6
 8007e56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007e5a:	018b      	lsls	r3, r1, #6
 8007e5c:	1a5b      	subs	r3, r3, r1
 8007e5e:	eb64 0402 	sbc.w	r4, r4, r2
 8007e62:	f04f 0100 	mov.w	r1, #0
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	00e2      	lsls	r2, r4, #3
 8007e6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007e70:	00d9      	lsls	r1, r3, #3
 8007e72:	460b      	mov	r3, r1
 8007e74:	4614      	mov	r4, r2
 8007e76:	195b      	adds	r3, r3, r5
 8007e78:	eb44 0406 	adc.w	r4, r4, r6
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	02a2      	lsls	r2, r4, #10
 8007e86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007e8a:	0299      	lsls	r1, r3, #10
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4614      	mov	r4, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	4621      	mov	r1, r4
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f04f 0400 	mov.w	r4, #0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	f7f8 fda9 	bl	80009f4 <__aeabi_uldivmod>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ea8:	4b60      	ldr	r3, [pc, #384]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	613b      	str	r3, [r7, #16]
      break;
 8007ec2:	e0ae      	b.n	8008022 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ec4:	4b59      	ldr	r3, [pc, #356]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ecc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ece:	4b57      	ldr	r3, [pc, #348]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d04a      	beq.n	8007f70 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eda:	4b54      	ldr	r3, [pc, #336]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	f04f 0400 	mov.w	r4, #0
 8007ee4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	ea03 0501 	and.w	r5, r3, r1
 8007ef0:	ea04 0602 	and.w	r6, r4, r2
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	f04f 0400 	mov.w	r4, #0
 8007f00:	0154      	lsls	r4, r2, #5
 8007f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f06:	014b      	lsls	r3, r1, #5
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	1b49      	subs	r1, r1, r5
 8007f0e:	eb62 0206 	sbc.w	r2, r2, r6
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	f04f 0400 	mov.w	r4, #0
 8007f1a:	0194      	lsls	r4, r2, #6
 8007f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f20:	018b      	lsls	r3, r1, #6
 8007f22:	1a5b      	subs	r3, r3, r1
 8007f24:	eb64 0402 	sbc.w	r4, r4, r2
 8007f28:	f04f 0100 	mov.w	r1, #0
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	00e2      	lsls	r2, r4, #3
 8007f32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f36:	00d9      	lsls	r1, r3, #3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	195b      	adds	r3, r3, r5
 8007f3e:	eb44 0406 	adc.w	r4, r4, r6
 8007f42:	f04f 0100 	mov.w	r1, #0
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	0262      	lsls	r2, r4, #9
 8007f4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007f50:	0259      	lsls	r1, r3, #9
 8007f52:	460b      	mov	r3, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	4621      	mov	r1, r4
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f04f 0400 	mov.w	r4, #0
 8007f60:	461a      	mov	r2, r3
 8007f62:	4623      	mov	r3, r4
 8007f64:	f7f8 fd46 	bl	80009f4 <__aeabi_uldivmod>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	e049      	b.n	8008004 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f70:	4b2e      	ldr	r3, [pc, #184]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	099b      	lsrs	r3, r3, #6
 8007f76:	f04f 0400 	mov.w	r4, #0
 8007f7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	ea03 0501 	and.w	r5, r3, r1
 8007f86:	ea04 0602 	and.w	r6, r4, r2
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	f04f 0400 	mov.w	r4, #0
 8007f96:	0154      	lsls	r4, r2, #5
 8007f98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f9c:	014b      	lsls	r3, r1, #5
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	1b49      	subs	r1, r1, r5
 8007fa4:	eb62 0206 	sbc.w	r2, r2, r6
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	f04f 0400 	mov.w	r4, #0
 8007fb0:	0194      	lsls	r4, r2, #6
 8007fb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007fb6:	018b      	lsls	r3, r1, #6
 8007fb8:	1a5b      	subs	r3, r3, r1
 8007fba:	eb64 0402 	sbc.w	r4, r4, r2
 8007fbe:	f04f 0100 	mov.w	r1, #0
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	00e2      	lsls	r2, r4, #3
 8007fc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007fcc:	00d9      	lsls	r1, r3, #3
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	195b      	adds	r3, r3, r5
 8007fd4:	eb44 0406 	adc.w	r4, r4, r6
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	02a2      	lsls	r2, r4, #10
 8007fe2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007fe6:	0299      	lsls	r1, r3, #10
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4614      	mov	r4, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	4621      	mov	r1, r4
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f04f 0400 	mov.w	r4, #0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	f7f8 fcfb 	bl	80009f4 <__aeabi_uldivmod>
 8007ffe:	4603      	mov	r3, r0
 8008000:	460c      	mov	r4, r1
 8008002:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <HAL_RCC_GetSysClockFreq+0x334>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	0f1b      	lsrs	r3, r3, #28
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	fbb2 f3f3 	udiv	r3, r2, r3
 8008018:	613b      	str	r3, [r7, #16]
      break;
 800801a:	e002      	b.n	8008022 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <HAL_RCC_GetSysClockFreq+0x338>)
 800801e:	613b      	str	r3, [r7, #16]
      break;
 8008020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008022:	693b      	ldr	r3, [r7, #16]
}
 8008024:	4618      	mov	r0, r3
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802c:	40023800 	.word	0x40023800
 8008030:	00f42400 	.word	0x00f42400
 8008034:	007a1200 	.word	0x007a1200

08008038 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8083 	beq.w	8008158 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008052:	4b95      	ldr	r3, [pc, #596]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 030c 	and.w	r3, r3, #12
 800805a:	2b04      	cmp	r3, #4
 800805c:	d019      	beq.n	8008092 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800805e:	4b92      	ldr	r3, [pc, #584]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008066:	2b08      	cmp	r3, #8
 8008068:	d106      	bne.n	8008078 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800806a:	4b8f      	ldr	r3, [pc, #572]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008076:	d00c      	beq.n	8008092 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008078:	4b8b      	ldr	r3, [pc, #556]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008080:	2b0c      	cmp	r3, #12
 8008082:	d112      	bne.n	80080aa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008084:	4b88      	ldr	r3, [pc, #544]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008090:	d10b      	bne.n	80080aa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008092:	4b85      	ldr	r3, [pc, #532]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05b      	beq.n	8008156 <HAL_RCC_OscConfig+0x11e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d157      	bne.n	8008156 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e216      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b2:	d106      	bne.n	80080c2 <HAL_RCC_OscConfig+0x8a>
 80080b4:	4b7c      	ldr	r3, [pc, #496]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a7b      	ldr	r2, [pc, #492]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e01d      	b.n	80080fe <HAL_RCC_OscConfig+0xc6>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080ca:	d10c      	bne.n	80080e6 <HAL_RCC_OscConfig+0xae>
 80080cc:	4b76      	ldr	r3, [pc, #472]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a75      	ldr	r2, [pc, #468]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	4b73      	ldr	r3, [pc, #460]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a72      	ldr	r2, [pc, #456]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	e00b      	b.n	80080fe <HAL_RCC_OscConfig+0xc6>
 80080e6:	4b70      	ldr	r3, [pc, #448]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6f      	ldr	r2, [pc, #444]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	4b6d      	ldr	r3, [pc, #436]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a6c      	ldr	r2, [pc, #432]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80080f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d013      	beq.n	800812e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008106:	f7ff f97f 	bl	8007408 <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800810e:	f7ff f97b 	bl	8007408 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b64      	cmp	r3, #100	; 0x64
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e1db      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008120:	4b61      	ldr	r3, [pc, #388]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0xd6>
 800812c:	e014      	b.n	8008158 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812e:	f7ff f96b 	bl	8007408 <HAL_GetTick>
 8008132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008134:	e008      	b.n	8008148 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008136:	f7ff f967 	bl	8007408 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b64      	cmp	r3, #100	; 0x64
 8008142:	d901      	bls.n	8008148 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e1c7      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008148:	4b57      	ldr	r3, [pc, #348]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f0      	bne.n	8008136 <HAL_RCC_OscConfig+0xfe>
 8008154:	e000      	b.n	8008158 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008156:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d06f      	beq.n	8008244 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008164:	4b50      	ldr	r3, [pc, #320]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 030c 	and.w	r3, r3, #12
 800816c:	2b00      	cmp	r3, #0
 800816e:	d017      	beq.n	80081a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008170:	4b4d      	ldr	r3, [pc, #308]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008178:	2b08      	cmp	r3, #8
 800817a:	d105      	bne.n	8008188 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800817c:	4b4a      	ldr	r3, [pc, #296]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008188:	4b47      	ldr	r3, [pc, #284]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008190:	2b0c      	cmp	r3, #12
 8008192:	d11c      	bne.n	80081ce <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008194:	4b44      	ldr	r3, [pc, #272]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d116      	bne.n	80081ce <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081a0:	4b41      	ldr	r3, [pc, #260]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <HAL_RCC_OscConfig+0x180>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e18f      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b8:	4b3b      	ldr	r3, [pc, #236]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4938      	ldr	r1, [pc, #224]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081cc:	e03a      	b.n	8008244 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d020      	beq.n	8008218 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081d6:	4b35      	ldr	r3, [pc, #212]	; (80082ac <HAL_RCC_OscConfig+0x274>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081dc:	f7ff f914 	bl	8007408 <HAL_GetTick>
 80081e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081e4:	f7ff f910 	bl	8007408 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e170      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081f6:	4b2c      	ldr	r3, [pc, #176]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008202:	4b29      	ldr	r3, [pc, #164]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4925      	ldr	r1, [pc, #148]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]
 8008216:	e015      	b.n	8008244 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008218:	4b24      	ldr	r3, [pc, #144]	; (80082ac <HAL_RCC_OscConfig+0x274>)
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800821e:	f7ff f8f3 	bl	8007408 <HAL_GetTick>
 8008222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008224:	e008      	b.n	8008238 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008226:	f7ff f8ef 	bl	8007408 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	d901      	bls.n	8008238 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e14f      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008238:	4b1b      	ldr	r3, [pc, #108]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1f0      	bne.n	8008226 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d037      	beq.n	80082c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d016      	beq.n	8008286 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <HAL_RCC_OscConfig+0x278>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800825e:	f7ff f8d3 	bl	8007408 <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008266:	f7ff f8cf 	bl	8007408 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e12f      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <HAL_RCC_OscConfig+0x270>)
 800827a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0f0      	beq.n	8008266 <HAL_RCC_OscConfig+0x22e>
 8008284:	e01c      	b.n	80082c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008286:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <HAL_RCC_OscConfig+0x278>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828c:	f7ff f8bc 	bl	8007408 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008292:	e00f      	b.n	80082b4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008294:	f7ff f8b8 	bl	8007408 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d908      	bls.n	80082b4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e118      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
 80082a6:	bf00      	nop
 80082a8:	40023800 	.word	0x40023800
 80082ac:	42470000 	.word	0x42470000
 80082b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b4:	4b8a      	ldr	r3, [pc, #552]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80082b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e9      	bne.n	8008294 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8097 	beq.w	80083fc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082d2:	4b83      	ldr	r3, [pc, #524]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10f      	bne.n	80082fe <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	4b7f      	ldr	r3, [pc, #508]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	4a7e      	ldr	r2, [pc, #504]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ec:	6413      	str	r3, [r2, #64]	; 0x40
 80082ee:	4b7c      	ldr	r3, [pc, #496]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80082fa:	2301      	movs	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082fe:	4b79      	ldr	r3, [pc, #484]	; (80084e4 <HAL_RCC_OscConfig+0x4ac>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d118      	bne.n	800833c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800830a:	4b76      	ldr	r3, [pc, #472]	; (80084e4 <HAL_RCC_OscConfig+0x4ac>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a75      	ldr	r2, [pc, #468]	; (80084e4 <HAL_RCC_OscConfig+0x4ac>)
 8008310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008316:	f7ff f877 	bl	8007408 <HAL_GetTick>
 800831a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800831e:	f7ff f873 	bl	8007408 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e0d3      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008330:	4b6c      	ldr	r3, [pc, #432]	; (80084e4 <HAL_RCC_OscConfig+0x4ac>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0f0      	beq.n	800831e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <HAL_RCC_OscConfig+0x31a>
 8008344:	4b66      	ldr	r3, [pc, #408]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008348:	4a65      	ldr	r2, [pc, #404]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6713      	str	r3, [r2, #112]	; 0x70
 8008350:	e01c      	b.n	800838c <HAL_RCC_OscConfig+0x354>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b05      	cmp	r3, #5
 8008358:	d10c      	bne.n	8008374 <HAL_RCC_OscConfig+0x33c>
 800835a:	4b61      	ldr	r3, [pc, #388]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	4a60      	ldr	r2, [pc, #384]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008360:	f043 0304 	orr.w	r3, r3, #4
 8008364:	6713      	str	r3, [r2, #112]	; 0x70
 8008366:	4b5e      	ldr	r3, [pc, #376]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	4a5d      	ldr	r2, [pc, #372]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	6713      	str	r3, [r2, #112]	; 0x70
 8008372:	e00b      	b.n	800838c <HAL_RCC_OscConfig+0x354>
 8008374:	4b5a      	ldr	r3, [pc, #360]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008378:	4a59      	ldr	r2, [pc, #356]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	6713      	str	r3, [r2, #112]	; 0x70
 8008380:	4b57      	ldr	r3, [pc, #348]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	4a56      	ldr	r2, [pc, #344]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008386:	f023 0304 	bic.w	r3, r3, #4
 800838a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d015      	beq.n	80083c0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008394:	f7ff f838 	bl	8007408 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800839a:	e00a      	b.n	80083b2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800839c:	f7ff f834 	bl	8007408 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e092      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b2:	4b4b      	ldr	r3, [pc, #300]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0ee      	beq.n	800839c <HAL_RCC_OscConfig+0x364>
 80083be:	e014      	b.n	80083ea <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c0:	f7ff f822 	bl	8007408 <HAL_GetTick>
 80083c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083c6:	e00a      	b.n	80083de <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c8:	f7ff f81e 	bl	8007408 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e07c      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083de:	4b40      	ldr	r3, [pc, #256]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1ee      	bne.n	80083c8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d105      	bne.n	80083fc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083f0:	4b3b      	ldr	r3, [pc, #236]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	4a3a      	ldr	r2, [pc, #232]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80083f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d068      	beq.n	80084d6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008404:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 030c 	and.w	r3, r3, #12
 800840c:	2b08      	cmp	r3, #8
 800840e:	d060      	beq.n	80084d2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d145      	bne.n	80084a4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008418:	4b33      	ldr	r3, [pc, #204]	; (80084e8 <HAL_RCC_OscConfig+0x4b0>)
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841e:	f7fe fff3 	bl	8007408 <HAL_GetTick>
 8008422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008424:	e008      	b.n	8008438 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008426:	f7fe ffef 	bl	8007408 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e04f      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008438:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1f0      	bne.n	8008426 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	019b      	lsls	r3, r3, #6
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	3b01      	subs	r3, #1
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	061b      	lsls	r3, r3, #24
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	071b      	lsls	r3, r3, #28
 8008470:	491b      	ldr	r1, [pc, #108]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008472:	4313      	orrs	r3, r2
 8008474:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008476:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <HAL_RCC_OscConfig+0x4b0>)
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fe ffc4 	bl	8007408 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008484:	f7fe ffc0 	bl	8007408 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e020      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008496:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0f0      	beq.n	8008484 <HAL_RCC_OscConfig+0x44c>
 80084a2:	e018      	b.n	80084d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084a4:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <HAL_RCC_OscConfig+0x4b0>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084aa:	f7fe ffad 	bl	8007408 <HAL_GetTick>
 80084ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084b2:	f7fe ffa9 	bl	8007408 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e009      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084c4:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <HAL_RCC_OscConfig+0x4a8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1f0      	bne.n	80084b2 <HAL_RCC_OscConfig+0x47a>
 80084d0:	e001      	b.n	80084d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40023800 	.word	0x40023800
 80084e4:	40007000 	.word	0x40007000
 80084e8:	42470060 	.word	0x42470060

080084ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e03f      	b.n	800857e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fe fd78 	bl	8007008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2224      	movs	r2, #36	; 0x24
 800851c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800852e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fc77 	bl	8008e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	695a      	ldr	r2, [r3, #20]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b088      	sub	sp, #32
 800858a:	af02      	add	r7, sp, #8
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	603b      	str	r3, [r7, #0]
 8008592:	4613      	mov	r3, r2
 8008594:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	f040 8083 	bne.w	80086ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <HAL_UART_Transmit+0x2e>
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e07b      	b.n	80086b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_UART_Transmit+0x40>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e074      	b.n	80086b0 <HAL_UART_Transmit+0x12a>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2221      	movs	r2, #33	; 0x21
 80085d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80085dc:	f7fe ff14 	bl	8007408 <HAL_GetTick>
 80085e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	88fa      	ldrh	r2, [r7, #6]
 80085e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80085f6:	e042      	b.n	800867e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860e:	d122      	bne.n	8008656 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2200      	movs	r2, #0
 8008618:	2180      	movs	r1, #128	; 0x80
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fa96 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e042      	b.n	80086b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800863c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	3302      	adds	r3, #2
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	e017      	b.n	800867e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	3301      	adds	r3, #1
 8008652:	60bb      	str	r3, [r7, #8]
 8008654:	e013      	b.n	800867e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2200      	movs	r2, #0
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fa73 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e01f      	b.n	80086b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	60ba      	str	r2, [r7, #8]
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1b7      	bne.n	80085f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	2140      	movs	r1, #64	; 0x40
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 fa5a 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e006      	b.n	80086b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e000      	b.n	80086b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80086ae:	2302      	movs	r3, #2
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	f040 8090 	bne.w	80087fa <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_UART_Receive+0x2e>
 80086e0:	88fb      	ldrh	r3, [r7, #6]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e088      	b.n	80087fc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_UART_Receive+0x40>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e081      	b.n	80087fc <HAL_UART_Receive+0x144>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2222      	movs	r2, #34	; 0x22
 800870a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800870e:	f7fe fe7b 	bl	8007408 <HAL_GetTick>
 8008712:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	88fa      	ldrh	r2, [r7, #6]
 8008718:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	88fa      	ldrh	r2, [r7, #6]
 800871e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008728:	e05c      	b.n	80087e4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800872e:	b29b      	uxth	r3, r3
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008740:	d12b      	bne.n	800879a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2200      	movs	r2, #0
 800874a:	2120      	movs	r1, #32
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f9fd 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e04f      	b.n	80087fc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10c      	bne.n	8008782 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	b29b      	uxth	r3, r3
 8008770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008774:	b29a      	uxth	r2, r3
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3302      	adds	r3, #2
 800877e:	60bb      	str	r3, [r7, #8]
 8008780:	e030      	b.n	80087e4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	b29b      	uxth	r3, r3
 800878a:	b2db      	uxtb	r3, r3
 800878c:	b29a      	uxth	r2, r3
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3301      	adds	r3, #1
 8008796:	60bb      	str	r3, [r7, #8]
 8008798:	e024      	b.n	80087e4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2200      	movs	r2, #0
 80087a2:	2120      	movs	r1, #32
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f9d1 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e023      	b.n	80087fc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6859      	ldr	r1, [r3, #4]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	60ba      	str	r2, [r7, #8]
 80087c8:	b2ca      	uxtb	r2, r1
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	e00a      	b.n	80087e4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	1c59      	adds	r1, r3, #1
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d19d      	bne.n	800872a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e000      	b.n	80087fc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80087fa:	2302      	movs	r3, #2
  }
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b20      	cmp	r3, #32
 800881c:	d130      	bne.n	8008880 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <HAL_UART_Transmit_IT+0x26>
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e029      	b.n	8008882 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_UART_Transmit_IT+0x38>
 8008838:	2302      	movs	r3, #2
 800883a:	e022      	b.n	8008882 <HAL_UART_Transmit_IT+0x7e>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	88fa      	ldrh	r2, [r7, #6]
 800884e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2221      	movs	r2, #33	; 0x21
 8008860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800887a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	e000      	b.n	8008882 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008880:	2302      	movs	r3, #2
  }
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	4613      	mov	r3, r2
 800889a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d140      	bne.n	800892a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_UART_Receive_IT+0x26>
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e039      	b.n	800892c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d101      	bne.n	80088c6 <HAL_UART_Receive_IT+0x38>
 80088c2:	2302      	movs	r3, #2
 80088c4:	e032      	b.n	800892c <HAL_UART_Receive_IT+0x9e>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	88fa      	ldrh	r2, [r7, #6]
 80088d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2222      	movs	r2, #34	; 0x22
 80088ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008904:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695a      	ldr	r2, [r3, #20]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0201 	orr.w	r2, r2, #1
 8008914:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 0220 	orr.w	r2, r2, #32
 8008924:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	e000      	b.n	800892c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800892a:	2302      	movs	r3, #2
  }
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10d      	bne.n	800898a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d008      	beq.n	800898a <HAL_UART_IRQHandler+0x52>
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9cc 	bl	8008d20 <UART_Receive_IT>
      return;
 8008988:	e0d1      	b.n	8008b2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80b0 	beq.w	8008af2 <HAL_UART_IRQHandler+0x1ba>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d105      	bne.n	80089a8 <HAL_UART_IRQHandler+0x70>
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 80a5 	beq.w	8008af2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <HAL_UART_IRQHandler+0x90>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c0:	f043 0201 	orr.w	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <HAL_UART_IRQHandler+0xb0>
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	f043 0202 	orr.w	r2, r3, #2
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_UART_IRQHandler+0xd0>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a00:	f043 0204 	orr.w	r2, r3, #4
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00f      	beq.n	8008a32 <HAL_UART_IRQHandler+0xfa>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <HAL_UART_IRQHandler+0xee>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	f043 0208 	orr.w	r2, r3, #8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d078      	beq.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <HAL_UART_IRQHandler+0x11c>
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f966 	bl	8008d20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <HAL_UART_IRQHandler+0x144>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d031      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f8af 	bl	8008be0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d123      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d013      	beq.n	8008ad0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aac:	4a21      	ldr	r2, [pc, #132]	; (8008b34 <HAL_UART_IRQHandler+0x1fc>)
 8008aae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe fde6 	bl	8007686 <HAL_DMA_Abort_IT>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d016      	beq.n	8008aee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ace:	e00e      	b.n	8008aee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f831 	bl	8008b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad6:	e00a      	b.n	8008aee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f82d 	bl	8008b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ade:	e006      	b.n	8008aee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f829 	bl	8008b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008aec:	e01e      	b.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aee:	bf00      	nop
    return;
 8008af0:	e01c      	b.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d008      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f89c 	bl	8008c44 <UART_Transmit_IT>
    return;
 8008b0c:	e00f      	b.n	8008b2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00a      	beq.n	8008b2e <HAL_UART_IRQHandler+0x1f6>
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8e4 	bl	8008cf0 <UART_EndTransmit_IT>
    return;
 8008b28:	bf00      	nop
 8008b2a:	e000      	b.n	8008b2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8008b2c:	bf00      	nop
  }
}
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	08008c1d 	.word	0x08008c1d

08008b38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5c:	e02c      	b.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b64:	d028      	beq.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b6c:	f7fe fc4c 	bl	8007408 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d21d      	bcs.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e00f      	b.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	bf0c      	ite	eq
 8008bc8:	2301      	moveq	r3, #1
 8008bca:	2300      	movne	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	461a      	mov	r2, r3
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d0c3      	beq.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695a      	ldr	r2, [r3, #20]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0201 	bic.w	r2, r2, #1
 8008c06:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff ff7e 	bl	8008b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b21      	cmp	r3, #33	; 0x21
 8008c56:	d144      	bne.n	8008ce2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c60:	d11a      	bne.n	8008c98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d105      	bne.n	8008c8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a1b      	ldr	r3, [r3, #32]
 8008c84:	1c9a      	adds	r2, r3, #2
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	621a      	str	r2, [r3, #32]
 8008c8a:	e00e      	b.n	8008caa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	621a      	str	r2, [r3, #32]
 8008c96:	e008      	b.n	8008caa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	1c59      	adds	r1, r3, #1
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6211      	str	r1, [r2, #32]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10f      	bne.n	8008cde <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e000      	b.n	8008ce4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008ce2:	2302      	movs	r3, #2
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fd fcb1 	bl	8006678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b22      	cmp	r3, #34	; 0x22
 8008d32:	d171      	bne.n	8008e18 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3c:	d123      	bne.n	8008d86 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10e      	bne.n	8008d6a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	1c9a      	adds	r2, r3, #2
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
 8008d68:	e029      	b.n	8008dbe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	629a      	str	r2, [r3, #40]	; 0x28
 8008d84:	e01b      	b.n	8008dbe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10a      	bne.n	8008da4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6858      	ldr	r0, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	1c59      	adds	r1, r3, #1
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6291      	str	r1, [r2, #40]	; 0x28
 8008d9e:	b2c2      	uxtb	r2, r0
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	e00c      	b.n	8008dbe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	1c58      	adds	r0, r3, #1
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	6288      	str	r0, [r1, #40]	; 0x28
 8008db6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d120      	bne.n	8008e14 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0220 	bic.w	r2, r2, #32
 8008de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0201 	bic.w	r2, r2, #1
 8008e00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fd fcbe 	bl	800678c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	e002      	b.n	8008e1a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e000      	b.n	8008e1a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008e18:	2302      	movs	r3, #2
  }
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008e66:	f023 030c 	bic.w	r3, r3, #12
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	430b      	orrs	r3, r1
 8008e72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e92:	f040 818b 	bne.w	80091ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4ac1      	ldr	r2, [pc, #772]	; (80091a0 <UART_SetConfig+0x37c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d005      	beq.n	8008eac <UART_SetConfig+0x88>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4abf      	ldr	r2, [pc, #764]	; (80091a4 <UART_SetConfig+0x380>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	f040 80bd 	bne.w	8009026 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eac:	f7fe ff10 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 8008eb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	461d      	mov	r5, r3
 8008eb6:	f04f 0600 	mov.w	r6, #0
 8008eba:	46a8      	mov	r8, r5
 8008ebc:	46b1      	mov	r9, r6
 8008ebe:	eb18 0308 	adds.w	r3, r8, r8
 8008ec2:	eb49 0409 	adc.w	r4, r9, r9
 8008ec6:	4698      	mov	r8, r3
 8008ec8:	46a1      	mov	r9, r4
 8008eca:	eb18 0805 	adds.w	r8, r8, r5
 8008ece:	eb49 0906 	adc.w	r9, r9, r6
 8008ed2:	f04f 0100 	mov.w	r1, #0
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ede:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ee2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ee6:	4688      	mov	r8, r1
 8008ee8:	4691      	mov	r9, r2
 8008eea:	eb18 0005 	adds.w	r0, r8, r5
 8008eee:	eb49 0106 	adc.w	r1, r9, r6
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	f04f 0600 	mov.w	r6, #0
 8008efc:	196b      	adds	r3, r5, r5
 8008efe:	eb46 0406 	adc.w	r4, r6, r6
 8008f02:	461a      	mov	r2, r3
 8008f04:	4623      	mov	r3, r4
 8008f06:	f7f7 fd75 	bl	80009f4 <__aeabi_uldivmod>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4ba5      	ldr	r3, [pc, #660]	; (80091a8 <UART_SetConfig+0x384>)
 8008f12:	fba3 2302 	umull	r2, r3, r3, r2
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	461d      	mov	r5, r3
 8008f20:	f04f 0600 	mov.w	r6, #0
 8008f24:	46a9      	mov	r9, r5
 8008f26:	46b2      	mov	sl, r6
 8008f28:	eb19 0309 	adds.w	r3, r9, r9
 8008f2c:	eb4a 040a 	adc.w	r4, sl, sl
 8008f30:	4699      	mov	r9, r3
 8008f32:	46a2      	mov	sl, r4
 8008f34:	eb19 0905 	adds.w	r9, r9, r5
 8008f38:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f3c:	f04f 0100 	mov.w	r1, #0
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f50:	4689      	mov	r9, r1
 8008f52:	4692      	mov	sl, r2
 8008f54:	eb19 0005 	adds.w	r0, r9, r5
 8008f58:	eb4a 0106 	adc.w	r1, sl, r6
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	461d      	mov	r5, r3
 8008f62:	f04f 0600 	mov.w	r6, #0
 8008f66:	196b      	adds	r3, r5, r5
 8008f68:	eb46 0406 	adc.w	r4, r6, r6
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	4623      	mov	r3, r4
 8008f70:	f7f7 fd40 	bl	80009f4 <__aeabi_uldivmod>
 8008f74:	4603      	mov	r3, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4b8b      	ldr	r3, [pc, #556]	; (80091a8 <UART_SetConfig+0x384>)
 8008f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	2164      	movs	r1, #100	; 0x64
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	3332      	adds	r3, #50	; 0x32
 8008f8e:	4a86      	ldr	r2, [pc, #536]	; (80091a8 <UART_SetConfig+0x384>)
 8008f90:	fba2 2303 	umull	r2, r3, r2, r3
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f9c:	4498      	add	r8, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	461d      	mov	r5, r3
 8008fa2:	f04f 0600 	mov.w	r6, #0
 8008fa6:	46a9      	mov	r9, r5
 8008fa8:	46b2      	mov	sl, r6
 8008faa:	eb19 0309 	adds.w	r3, r9, r9
 8008fae:	eb4a 040a 	adc.w	r4, sl, sl
 8008fb2:	4699      	mov	r9, r3
 8008fb4:	46a2      	mov	sl, r4
 8008fb6:	eb19 0905 	adds.w	r9, r9, r5
 8008fba:	eb4a 0a06 	adc.w	sl, sl, r6
 8008fbe:	f04f 0100 	mov.w	r1, #0
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fd2:	4689      	mov	r9, r1
 8008fd4:	4692      	mov	sl, r2
 8008fd6:	eb19 0005 	adds.w	r0, r9, r5
 8008fda:	eb4a 0106 	adc.w	r1, sl, r6
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	f04f 0600 	mov.w	r6, #0
 8008fe8:	196b      	adds	r3, r5, r5
 8008fea:	eb46 0406 	adc.w	r4, r6, r6
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	f7f7 fcff 	bl	80009f4 <__aeabi_uldivmod>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4b6a      	ldr	r3, [pc, #424]	; (80091a8 <UART_SetConfig+0x384>)
 8008ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	2164      	movs	r1, #100	; 0x64
 8009006:	fb01 f303 	mul.w	r3, r1, r3
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	3332      	adds	r3, #50	; 0x32
 8009010:	4a65      	ldr	r2, [pc, #404]	; (80091a8 <UART_SetConfig+0x384>)
 8009012:	fba2 2303 	umull	r2, r3, r2, r3
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	f003 0207 	and.w	r2, r3, #7
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4442      	add	r2, r8
 8009022:	609a      	str	r2, [r3, #8]
 8009024:	e26f      	b.n	8009506 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009026:	f7fe fe3f 	bl	8007ca8 <HAL_RCC_GetPCLK1Freq>
 800902a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	461d      	mov	r5, r3
 8009030:	f04f 0600 	mov.w	r6, #0
 8009034:	46a8      	mov	r8, r5
 8009036:	46b1      	mov	r9, r6
 8009038:	eb18 0308 	adds.w	r3, r8, r8
 800903c:	eb49 0409 	adc.w	r4, r9, r9
 8009040:	4698      	mov	r8, r3
 8009042:	46a1      	mov	r9, r4
 8009044:	eb18 0805 	adds.w	r8, r8, r5
 8009048:	eb49 0906 	adc.w	r9, r9, r6
 800904c:	f04f 0100 	mov.w	r1, #0
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009058:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800905c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009060:	4688      	mov	r8, r1
 8009062:	4691      	mov	r9, r2
 8009064:	eb18 0005 	adds.w	r0, r8, r5
 8009068:	eb49 0106 	adc.w	r1, r9, r6
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	461d      	mov	r5, r3
 8009072:	f04f 0600 	mov.w	r6, #0
 8009076:	196b      	adds	r3, r5, r5
 8009078:	eb46 0406 	adc.w	r4, r6, r6
 800907c:	461a      	mov	r2, r3
 800907e:	4623      	mov	r3, r4
 8009080:	f7f7 fcb8 	bl	80009f4 <__aeabi_uldivmod>
 8009084:	4603      	mov	r3, r0
 8009086:	460c      	mov	r4, r1
 8009088:	461a      	mov	r2, r3
 800908a:	4b47      	ldr	r3, [pc, #284]	; (80091a8 <UART_SetConfig+0x384>)
 800908c:	fba3 2302 	umull	r2, r3, r3, r2
 8009090:	095b      	lsrs	r3, r3, #5
 8009092:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	461d      	mov	r5, r3
 800909a:	f04f 0600 	mov.w	r6, #0
 800909e:	46a9      	mov	r9, r5
 80090a0:	46b2      	mov	sl, r6
 80090a2:	eb19 0309 	adds.w	r3, r9, r9
 80090a6:	eb4a 040a 	adc.w	r4, sl, sl
 80090aa:	4699      	mov	r9, r3
 80090ac:	46a2      	mov	sl, r4
 80090ae:	eb19 0905 	adds.w	r9, r9, r5
 80090b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80090b6:	f04f 0100 	mov.w	r1, #0
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090ca:	4689      	mov	r9, r1
 80090cc:	4692      	mov	sl, r2
 80090ce:	eb19 0005 	adds.w	r0, r9, r5
 80090d2:	eb4a 0106 	adc.w	r1, sl, r6
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	461d      	mov	r5, r3
 80090dc:	f04f 0600 	mov.w	r6, #0
 80090e0:	196b      	adds	r3, r5, r5
 80090e2:	eb46 0406 	adc.w	r4, r6, r6
 80090e6:	461a      	mov	r2, r3
 80090e8:	4623      	mov	r3, r4
 80090ea:	f7f7 fc83 	bl	80009f4 <__aeabi_uldivmod>
 80090ee:	4603      	mov	r3, r0
 80090f0:	460c      	mov	r4, r1
 80090f2:	461a      	mov	r2, r3
 80090f4:	4b2c      	ldr	r3, [pc, #176]	; (80091a8 <UART_SetConfig+0x384>)
 80090f6:	fba3 1302 	umull	r1, r3, r3, r2
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	2164      	movs	r1, #100	; 0x64
 80090fe:	fb01 f303 	mul.w	r3, r1, r3
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	3332      	adds	r3, #50	; 0x32
 8009108:	4a27      	ldr	r2, [pc, #156]	; (80091a8 <UART_SetConfig+0x384>)
 800910a:	fba2 2303 	umull	r2, r3, r2, r3
 800910e:	095b      	lsrs	r3, r3, #5
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009116:	4498      	add	r8, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	461d      	mov	r5, r3
 800911c:	f04f 0600 	mov.w	r6, #0
 8009120:	46a9      	mov	r9, r5
 8009122:	46b2      	mov	sl, r6
 8009124:	eb19 0309 	adds.w	r3, r9, r9
 8009128:	eb4a 040a 	adc.w	r4, sl, sl
 800912c:	4699      	mov	r9, r3
 800912e:	46a2      	mov	sl, r4
 8009130:	eb19 0905 	adds.w	r9, r9, r5
 8009134:	eb4a 0a06 	adc.w	sl, sl, r6
 8009138:	f04f 0100 	mov.w	r1, #0
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800914c:	4689      	mov	r9, r1
 800914e:	4692      	mov	sl, r2
 8009150:	eb19 0005 	adds.w	r0, r9, r5
 8009154:	eb4a 0106 	adc.w	r1, sl, r6
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	461d      	mov	r5, r3
 800915e:	f04f 0600 	mov.w	r6, #0
 8009162:	196b      	adds	r3, r5, r5
 8009164:	eb46 0406 	adc.w	r4, r6, r6
 8009168:	461a      	mov	r2, r3
 800916a:	4623      	mov	r3, r4
 800916c:	f7f7 fc42 	bl	80009f4 <__aeabi_uldivmod>
 8009170:	4603      	mov	r3, r0
 8009172:	460c      	mov	r4, r1
 8009174:	461a      	mov	r2, r3
 8009176:	4b0c      	ldr	r3, [pc, #48]	; (80091a8 <UART_SetConfig+0x384>)
 8009178:	fba3 1302 	umull	r1, r3, r3, r2
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	2164      	movs	r1, #100	; 0x64
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	3332      	adds	r3, #50	; 0x32
 800918a:	4a07      	ldr	r2, [pc, #28]	; (80091a8 <UART_SetConfig+0x384>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	f003 0207 	and.w	r2, r3, #7
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4442      	add	r2, r8
 800919c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800919e:	e1b2      	b.n	8009506 <UART_SetConfig+0x6e2>
 80091a0:	40011000 	.word	0x40011000
 80091a4:	40011400 	.word	0x40011400
 80091a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4ad7      	ldr	r2, [pc, #860]	; (8009510 <UART_SetConfig+0x6ec>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d005      	beq.n	80091c2 <UART_SetConfig+0x39e>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4ad6      	ldr	r2, [pc, #856]	; (8009514 <UART_SetConfig+0x6f0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	f040 80d1 	bne.w	8009364 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80091c2:	f7fe fd85 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 80091c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	469a      	mov	sl, r3
 80091cc:	f04f 0b00 	mov.w	fp, #0
 80091d0:	46d0      	mov	r8, sl
 80091d2:	46d9      	mov	r9, fp
 80091d4:	eb18 0308 	adds.w	r3, r8, r8
 80091d8:	eb49 0409 	adc.w	r4, r9, r9
 80091dc:	4698      	mov	r8, r3
 80091de:	46a1      	mov	r9, r4
 80091e0:	eb18 080a 	adds.w	r8, r8, sl
 80091e4:	eb49 090b 	adc.w	r9, r9, fp
 80091e8:	f04f 0100 	mov.w	r1, #0
 80091ec:	f04f 0200 	mov.w	r2, #0
 80091f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80091f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80091f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80091fc:	4688      	mov	r8, r1
 80091fe:	4691      	mov	r9, r2
 8009200:	eb1a 0508 	adds.w	r5, sl, r8
 8009204:	eb4b 0609 	adc.w	r6, fp, r9
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4619      	mov	r1, r3
 800920e:	f04f 0200 	mov.w	r2, #0
 8009212:	f04f 0300 	mov.w	r3, #0
 8009216:	f04f 0400 	mov.w	r4, #0
 800921a:	0094      	lsls	r4, r2, #2
 800921c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009220:	008b      	lsls	r3, r1, #2
 8009222:	461a      	mov	r2, r3
 8009224:	4623      	mov	r3, r4
 8009226:	4628      	mov	r0, r5
 8009228:	4631      	mov	r1, r6
 800922a:	f7f7 fbe3 	bl	80009f4 <__aeabi_uldivmod>
 800922e:	4603      	mov	r3, r0
 8009230:	460c      	mov	r4, r1
 8009232:	461a      	mov	r2, r3
 8009234:	4bb8      	ldr	r3, [pc, #736]	; (8009518 <UART_SetConfig+0x6f4>)
 8009236:	fba3 2302 	umull	r2, r3, r3, r2
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	469b      	mov	fp, r3
 8009244:	f04f 0c00 	mov.w	ip, #0
 8009248:	46d9      	mov	r9, fp
 800924a:	46e2      	mov	sl, ip
 800924c:	eb19 0309 	adds.w	r3, r9, r9
 8009250:	eb4a 040a 	adc.w	r4, sl, sl
 8009254:	4699      	mov	r9, r3
 8009256:	46a2      	mov	sl, r4
 8009258:	eb19 090b 	adds.w	r9, r9, fp
 800925c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009260:	f04f 0100 	mov.w	r1, #0
 8009264:	f04f 0200 	mov.w	r2, #0
 8009268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800926c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009270:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009274:	4689      	mov	r9, r1
 8009276:	4692      	mov	sl, r2
 8009278:	eb1b 0509 	adds.w	r5, fp, r9
 800927c:	eb4c 060a 	adc.w	r6, ip, sl
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	4619      	mov	r1, r3
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	f04f 0300 	mov.w	r3, #0
 800928e:	f04f 0400 	mov.w	r4, #0
 8009292:	0094      	lsls	r4, r2, #2
 8009294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009298:	008b      	lsls	r3, r1, #2
 800929a:	461a      	mov	r2, r3
 800929c:	4623      	mov	r3, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	4631      	mov	r1, r6
 80092a2:	f7f7 fba7 	bl	80009f4 <__aeabi_uldivmod>
 80092a6:	4603      	mov	r3, r0
 80092a8:	460c      	mov	r4, r1
 80092aa:	461a      	mov	r2, r3
 80092ac:	4b9a      	ldr	r3, [pc, #616]	; (8009518 <UART_SetConfig+0x6f4>)
 80092ae:	fba3 1302 	umull	r1, r3, r3, r2
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	2164      	movs	r1, #100	; 0x64
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	3332      	adds	r3, #50	; 0x32
 80092c0:	4a95      	ldr	r2, [pc, #596]	; (8009518 <UART_SetConfig+0x6f4>)
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
 80092c6:	095b      	lsrs	r3, r3, #5
 80092c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092cc:	4498      	add	r8, r3
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	469b      	mov	fp, r3
 80092d2:	f04f 0c00 	mov.w	ip, #0
 80092d6:	46d9      	mov	r9, fp
 80092d8:	46e2      	mov	sl, ip
 80092da:	eb19 0309 	adds.w	r3, r9, r9
 80092de:	eb4a 040a 	adc.w	r4, sl, sl
 80092e2:	4699      	mov	r9, r3
 80092e4:	46a2      	mov	sl, r4
 80092e6:	eb19 090b 	adds.w	r9, r9, fp
 80092ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80092ee:	f04f 0100 	mov.w	r1, #0
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009302:	4689      	mov	r9, r1
 8009304:	4692      	mov	sl, r2
 8009306:	eb1b 0509 	adds.w	r5, fp, r9
 800930a:	eb4c 060a 	adc.w	r6, ip, sl
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	4619      	mov	r1, r3
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	f04f 0400 	mov.w	r4, #0
 8009320:	0094      	lsls	r4, r2, #2
 8009322:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009326:	008b      	lsls	r3, r1, #2
 8009328:	461a      	mov	r2, r3
 800932a:	4623      	mov	r3, r4
 800932c:	4628      	mov	r0, r5
 800932e:	4631      	mov	r1, r6
 8009330:	f7f7 fb60 	bl	80009f4 <__aeabi_uldivmod>
 8009334:	4603      	mov	r3, r0
 8009336:	460c      	mov	r4, r1
 8009338:	461a      	mov	r2, r3
 800933a:	4b77      	ldr	r3, [pc, #476]	; (8009518 <UART_SetConfig+0x6f4>)
 800933c:	fba3 1302 	umull	r1, r3, r3, r2
 8009340:	095b      	lsrs	r3, r3, #5
 8009342:	2164      	movs	r1, #100	; 0x64
 8009344:	fb01 f303 	mul.w	r3, r1, r3
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	011b      	lsls	r3, r3, #4
 800934c:	3332      	adds	r3, #50	; 0x32
 800934e:	4a72      	ldr	r2, [pc, #456]	; (8009518 <UART_SetConfig+0x6f4>)
 8009350:	fba2 2303 	umull	r2, r3, r2, r3
 8009354:	095b      	lsrs	r3, r3, #5
 8009356:	f003 020f 	and.w	r2, r3, #15
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4442      	add	r2, r8
 8009360:	609a      	str	r2, [r3, #8]
 8009362:	e0d0      	b.n	8009506 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009364:	f7fe fca0 	bl	8007ca8 <HAL_RCC_GetPCLK1Freq>
 8009368:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	469a      	mov	sl, r3
 800936e:	f04f 0b00 	mov.w	fp, #0
 8009372:	46d0      	mov	r8, sl
 8009374:	46d9      	mov	r9, fp
 8009376:	eb18 0308 	adds.w	r3, r8, r8
 800937a:	eb49 0409 	adc.w	r4, r9, r9
 800937e:	4698      	mov	r8, r3
 8009380:	46a1      	mov	r9, r4
 8009382:	eb18 080a 	adds.w	r8, r8, sl
 8009386:	eb49 090b 	adc.w	r9, r9, fp
 800938a:	f04f 0100 	mov.w	r1, #0
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009396:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800939a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800939e:	4688      	mov	r8, r1
 80093a0:	4691      	mov	r9, r2
 80093a2:	eb1a 0508 	adds.w	r5, sl, r8
 80093a6:	eb4b 0609 	adc.w	r6, fp, r9
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	4619      	mov	r1, r3
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	f04f 0400 	mov.w	r4, #0
 80093bc:	0094      	lsls	r4, r2, #2
 80093be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093c2:	008b      	lsls	r3, r1, #2
 80093c4:	461a      	mov	r2, r3
 80093c6:	4623      	mov	r3, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	4631      	mov	r1, r6
 80093cc:	f7f7 fb12 	bl	80009f4 <__aeabi_uldivmod>
 80093d0:	4603      	mov	r3, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	461a      	mov	r2, r3
 80093d6:	4b50      	ldr	r3, [pc, #320]	; (8009518 <UART_SetConfig+0x6f4>)
 80093d8:	fba3 2302 	umull	r2, r3, r3, r2
 80093dc:	095b      	lsrs	r3, r3, #5
 80093de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	469b      	mov	fp, r3
 80093e6:	f04f 0c00 	mov.w	ip, #0
 80093ea:	46d9      	mov	r9, fp
 80093ec:	46e2      	mov	sl, ip
 80093ee:	eb19 0309 	adds.w	r3, r9, r9
 80093f2:	eb4a 040a 	adc.w	r4, sl, sl
 80093f6:	4699      	mov	r9, r3
 80093f8:	46a2      	mov	sl, r4
 80093fa:	eb19 090b 	adds.w	r9, r9, fp
 80093fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009402:	f04f 0100 	mov.w	r1, #0
 8009406:	f04f 0200 	mov.w	r2, #0
 800940a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800940e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009416:	4689      	mov	r9, r1
 8009418:	4692      	mov	sl, r2
 800941a:	eb1b 0509 	adds.w	r5, fp, r9
 800941e:	eb4c 060a 	adc.w	r6, ip, sl
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	4619      	mov	r1, r3
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	f04f 0300 	mov.w	r3, #0
 8009430:	f04f 0400 	mov.w	r4, #0
 8009434:	0094      	lsls	r4, r2, #2
 8009436:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800943a:	008b      	lsls	r3, r1, #2
 800943c:	461a      	mov	r2, r3
 800943e:	4623      	mov	r3, r4
 8009440:	4628      	mov	r0, r5
 8009442:	4631      	mov	r1, r6
 8009444:	f7f7 fad6 	bl	80009f4 <__aeabi_uldivmod>
 8009448:	4603      	mov	r3, r0
 800944a:	460c      	mov	r4, r1
 800944c:	461a      	mov	r2, r3
 800944e:	4b32      	ldr	r3, [pc, #200]	; (8009518 <UART_SetConfig+0x6f4>)
 8009450:	fba3 1302 	umull	r1, r3, r3, r2
 8009454:	095b      	lsrs	r3, r3, #5
 8009456:	2164      	movs	r1, #100	; 0x64
 8009458:	fb01 f303 	mul.w	r3, r1, r3
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	011b      	lsls	r3, r3, #4
 8009460:	3332      	adds	r3, #50	; 0x32
 8009462:	4a2d      	ldr	r2, [pc, #180]	; (8009518 <UART_SetConfig+0x6f4>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	095b      	lsrs	r3, r3, #5
 800946a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800946e:	4498      	add	r8, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	469b      	mov	fp, r3
 8009474:	f04f 0c00 	mov.w	ip, #0
 8009478:	46d9      	mov	r9, fp
 800947a:	46e2      	mov	sl, ip
 800947c:	eb19 0309 	adds.w	r3, r9, r9
 8009480:	eb4a 040a 	adc.w	r4, sl, sl
 8009484:	4699      	mov	r9, r3
 8009486:	46a2      	mov	sl, r4
 8009488:	eb19 090b 	adds.w	r9, r9, fp
 800948c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800949c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094a4:	4689      	mov	r9, r1
 80094a6:	4692      	mov	sl, r2
 80094a8:	eb1b 0509 	adds.w	r5, fp, r9
 80094ac:	eb4c 060a 	adc.w	r6, ip, sl
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	f04f 0400 	mov.w	r4, #0
 80094c2:	0094      	lsls	r4, r2, #2
 80094c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094c8:	008b      	lsls	r3, r1, #2
 80094ca:	461a      	mov	r2, r3
 80094cc:	4623      	mov	r3, r4
 80094ce:	4628      	mov	r0, r5
 80094d0:	4631      	mov	r1, r6
 80094d2:	f7f7 fa8f 	bl	80009f4 <__aeabi_uldivmod>
 80094d6:	4603      	mov	r3, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	461a      	mov	r2, r3
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <UART_SetConfig+0x6f4>)
 80094de:	fba3 1302 	umull	r1, r3, r3, r2
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	2164      	movs	r1, #100	; 0x64
 80094e6:	fb01 f303 	mul.w	r3, r1, r3
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	3332      	adds	r3, #50	; 0x32
 80094f0:	4a09      	ldr	r2, [pc, #36]	; (8009518 <UART_SetConfig+0x6f4>)
 80094f2:	fba2 2303 	umull	r2, r3, r2, r3
 80094f6:	095b      	lsrs	r3, r3, #5
 80094f8:	f003 020f 	and.w	r2, r3, #15
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4442      	add	r2, r8
 8009502:	609a      	str	r2, [r3, #8]
}
 8009504:	e7ff      	b.n	8009506 <UART_SetConfig+0x6e2>
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	40011000 	.word	0x40011000
 8009514:	40011400 	.word	0x40011400
 8009518:	51eb851f 	.word	0x51eb851f

0800951c <_Znwj>:
 800951c:	b510      	push	{r4, lr}
 800951e:	2800      	cmp	r0, #0
 8009520:	bf14      	ite	ne
 8009522:	4604      	movne	r4, r0
 8009524:	2401      	moveq	r4, #1
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f84c 	bl	80095c4 <malloc>
 800952c:	b930      	cbnz	r0, 800953c <_Znwj+0x20>
 800952e:	f000 f807 	bl	8009540 <_ZSt15get_new_handlerv>
 8009532:	b908      	cbnz	r0, 8009538 <_Znwj+0x1c>
 8009534:	f000 f814 	bl	8009560 <abort>
 8009538:	4780      	blx	r0
 800953a:	e7f4      	b.n	8009526 <_Znwj+0xa>
 800953c:	bd10      	pop	{r4, pc}
	...

08009540 <_ZSt15get_new_handlerv>:
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <_ZSt15get_new_handlerv+0xc>)
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	f3bf 8f5b 	dmb	ish
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000364 	.word	0x20000364

08009550 <_ZdlPv>:
 8009550:	f000 b840 	b.w	80095d4 <free>

08009554 <_ZSt17__throw_bad_allocv>:
 8009554:	b508      	push	{r3, lr}
 8009556:	f000 f803 	bl	8009560 <abort>

0800955a <_ZSt20__throw_length_errorPKc>:
 800955a:	b508      	push	{r3, lr}
 800955c:	f000 f800 	bl	8009560 <abort>

08009560 <abort>:
 8009560:	b508      	push	{r3, lr}
 8009562:	2006      	movs	r0, #6
 8009564:	f000 f940 	bl	80097e8 <raise>
 8009568:	2001      	movs	r0, #1
 800956a:	f7fd fe09 	bl	8007180 <_exit>
	...

08009570 <__errno>:
 8009570:	4b01      	ldr	r3, [pc, #4]	; (8009578 <__errno+0x8>)
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	2000000c 	.word	0x2000000c

0800957c <__libc_init_array>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0d      	ldr	r6, [pc, #52]	; (80095b4 <__libc_init_array+0x38>)
 8009580:	4c0d      	ldr	r4, [pc, #52]	; (80095b8 <__libc_init_array+0x3c>)
 8009582:	1ba4      	subs	r4, r4, r6
 8009584:	10a4      	asrs	r4, r4, #2
 8009586:	2500      	movs	r5, #0
 8009588:	42a5      	cmp	r5, r4
 800958a:	d109      	bne.n	80095a0 <__libc_init_array+0x24>
 800958c:	4e0b      	ldr	r6, [pc, #44]	; (80095bc <__libc_init_array+0x40>)
 800958e:	4c0c      	ldr	r4, [pc, #48]	; (80095c0 <__libc_init_array+0x44>)
 8009590:	f000 f948 	bl	8009824 <_init>
 8009594:	1ba4      	subs	r4, r4, r6
 8009596:	10a4      	asrs	r4, r4, #2
 8009598:	2500      	movs	r5, #0
 800959a:	42a5      	cmp	r5, r4
 800959c:	d105      	bne.n	80095aa <__libc_init_array+0x2e>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095a4:	4798      	blx	r3
 80095a6:	3501      	adds	r5, #1
 80095a8:	e7ee      	b.n	8009588 <__libc_init_array+0xc>
 80095aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095ae:	4798      	blx	r3
 80095b0:	3501      	adds	r5, #1
 80095b2:	e7f2      	b.n	800959a <__libc_init_array+0x1e>
 80095b4:	08009898 	.word	0x08009898
 80095b8:	08009898 	.word	0x08009898
 80095bc:	08009898 	.word	0x08009898
 80095c0:	080098a4 	.word	0x080098a4

080095c4 <malloc>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <malloc+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f000 b87b 	b.w	80096c4 <_malloc_r>
 80095ce:	bf00      	nop
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <free>:
 80095d4:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <free+0xc>)
 80095d6:	4601      	mov	r1, r0
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f000 b825 	b.w	8009628 <_free_r>
 80095de:	bf00      	nop
 80095e0:	2000000c 	.word	0x2000000c

080095e4 <memmove>:
 80095e4:	4288      	cmp	r0, r1
 80095e6:	b510      	push	{r4, lr}
 80095e8:	eb01 0302 	add.w	r3, r1, r2
 80095ec:	d807      	bhi.n	80095fe <memmove+0x1a>
 80095ee:	1e42      	subs	r2, r0, #1
 80095f0:	4299      	cmp	r1, r3
 80095f2:	d00a      	beq.n	800960a <memmove+0x26>
 80095f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095fc:	e7f8      	b.n	80095f0 <memmove+0xc>
 80095fe:	4283      	cmp	r3, r0
 8009600:	d9f5      	bls.n	80095ee <memmove+0xa>
 8009602:	1881      	adds	r1, r0, r2
 8009604:	1ad2      	subs	r2, r2, r3
 8009606:	42d3      	cmn	r3, r2
 8009608:	d100      	bne.n	800960c <memmove+0x28>
 800960a:	bd10      	pop	{r4, pc}
 800960c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009610:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009614:	e7f7      	b.n	8009606 <memmove+0x22>

08009616 <memset>:
 8009616:	4402      	add	r2, r0
 8009618:	4603      	mov	r3, r0
 800961a:	4293      	cmp	r3, r2
 800961c:	d100      	bne.n	8009620 <memset+0xa>
 800961e:	4770      	bx	lr
 8009620:	f803 1b01 	strb.w	r1, [r3], #1
 8009624:	e7f9      	b.n	800961a <memset+0x4>
	...

08009628 <_free_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4605      	mov	r5, r0
 800962c:	2900      	cmp	r1, #0
 800962e:	d045      	beq.n	80096bc <_free_r+0x94>
 8009630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009634:	1f0c      	subs	r4, r1, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	bfb8      	it	lt
 800963a:	18e4      	addlt	r4, r4, r3
 800963c:	f000 f8f0 	bl	8009820 <__malloc_lock>
 8009640:	4a1f      	ldr	r2, [pc, #124]	; (80096c0 <_free_r+0x98>)
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	4610      	mov	r0, r2
 8009646:	b933      	cbnz	r3, 8009656 <_free_r+0x2e>
 8009648:	6063      	str	r3, [r4, #4]
 800964a:	6014      	str	r4, [r2, #0]
 800964c:	4628      	mov	r0, r5
 800964e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009652:	f000 b8e6 	b.w	8009822 <__malloc_unlock>
 8009656:	42a3      	cmp	r3, r4
 8009658:	d90c      	bls.n	8009674 <_free_r+0x4c>
 800965a:	6821      	ldr	r1, [r4, #0]
 800965c:	1862      	adds	r2, r4, r1
 800965e:	4293      	cmp	r3, r2
 8009660:	bf04      	itt	eq
 8009662:	681a      	ldreq	r2, [r3, #0]
 8009664:	685b      	ldreq	r3, [r3, #4]
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	bf04      	itt	eq
 800966a:	1852      	addeq	r2, r2, r1
 800966c:	6022      	streq	r2, [r4, #0]
 800966e:	6004      	str	r4, [r0, #0]
 8009670:	e7ec      	b.n	800964c <_free_r+0x24>
 8009672:	4613      	mov	r3, r2
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	b10a      	cbz	r2, 800967c <_free_r+0x54>
 8009678:	42a2      	cmp	r2, r4
 800967a:	d9fa      	bls.n	8009672 <_free_r+0x4a>
 800967c:	6819      	ldr	r1, [r3, #0]
 800967e:	1858      	adds	r0, r3, r1
 8009680:	42a0      	cmp	r0, r4
 8009682:	d10b      	bne.n	800969c <_free_r+0x74>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	4401      	add	r1, r0
 8009688:	1858      	adds	r0, r3, r1
 800968a:	4282      	cmp	r2, r0
 800968c:	6019      	str	r1, [r3, #0]
 800968e:	d1dd      	bne.n	800964c <_free_r+0x24>
 8009690:	6810      	ldr	r0, [r2, #0]
 8009692:	6852      	ldr	r2, [r2, #4]
 8009694:	605a      	str	r2, [r3, #4]
 8009696:	4401      	add	r1, r0
 8009698:	6019      	str	r1, [r3, #0]
 800969a:	e7d7      	b.n	800964c <_free_r+0x24>
 800969c:	d902      	bls.n	80096a4 <_free_r+0x7c>
 800969e:	230c      	movs	r3, #12
 80096a0:	602b      	str	r3, [r5, #0]
 80096a2:	e7d3      	b.n	800964c <_free_r+0x24>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	1821      	adds	r1, r4, r0
 80096a8:	428a      	cmp	r2, r1
 80096aa:	bf04      	itt	eq
 80096ac:	6811      	ldreq	r1, [r2, #0]
 80096ae:	6852      	ldreq	r2, [r2, #4]
 80096b0:	6062      	str	r2, [r4, #4]
 80096b2:	bf04      	itt	eq
 80096b4:	1809      	addeq	r1, r1, r0
 80096b6:	6021      	streq	r1, [r4, #0]
 80096b8:	605c      	str	r4, [r3, #4]
 80096ba:	e7c7      	b.n	800964c <_free_r+0x24>
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop
 80096c0:	20000368 	.word	0x20000368

080096c4 <_malloc_r>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	1ccd      	adds	r5, r1, #3
 80096c8:	f025 0503 	bic.w	r5, r5, #3
 80096cc:	3508      	adds	r5, #8
 80096ce:	2d0c      	cmp	r5, #12
 80096d0:	bf38      	it	cc
 80096d2:	250c      	movcc	r5, #12
 80096d4:	2d00      	cmp	r5, #0
 80096d6:	4606      	mov	r6, r0
 80096d8:	db01      	blt.n	80096de <_malloc_r+0x1a>
 80096da:	42a9      	cmp	r1, r5
 80096dc:	d903      	bls.n	80096e6 <_malloc_r+0x22>
 80096de:	230c      	movs	r3, #12
 80096e0:	6033      	str	r3, [r6, #0]
 80096e2:	2000      	movs	r0, #0
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	f000 f89b 	bl	8009820 <__malloc_lock>
 80096ea:	4a21      	ldr	r2, [pc, #132]	; (8009770 <_malloc_r+0xac>)
 80096ec:	6814      	ldr	r4, [r2, #0]
 80096ee:	4621      	mov	r1, r4
 80096f0:	b991      	cbnz	r1, 8009718 <_malloc_r+0x54>
 80096f2:	4c20      	ldr	r4, [pc, #128]	; (8009774 <_malloc_r+0xb0>)
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	b91b      	cbnz	r3, 8009700 <_malloc_r+0x3c>
 80096f8:	4630      	mov	r0, r6
 80096fa:	f000 f83d 	bl	8009778 <_sbrk_r>
 80096fe:	6020      	str	r0, [r4, #0]
 8009700:	4629      	mov	r1, r5
 8009702:	4630      	mov	r0, r6
 8009704:	f000 f838 	bl	8009778 <_sbrk_r>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d124      	bne.n	8009756 <_malloc_r+0x92>
 800970c:	230c      	movs	r3, #12
 800970e:	6033      	str	r3, [r6, #0]
 8009710:	4630      	mov	r0, r6
 8009712:	f000 f886 	bl	8009822 <__malloc_unlock>
 8009716:	e7e4      	b.n	80096e2 <_malloc_r+0x1e>
 8009718:	680b      	ldr	r3, [r1, #0]
 800971a:	1b5b      	subs	r3, r3, r5
 800971c:	d418      	bmi.n	8009750 <_malloc_r+0x8c>
 800971e:	2b0b      	cmp	r3, #11
 8009720:	d90f      	bls.n	8009742 <_malloc_r+0x7e>
 8009722:	600b      	str	r3, [r1, #0]
 8009724:	50cd      	str	r5, [r1, r3]
 8009726:	18cc      	adds	r4, r1, r3
 8009728:	4630      	mov	r0, r6
 800972a:	f000 f87a 	bl	8009822 <__malloc_unlock>
 800972e:	f104 000b 	add.w	r0, r4, #11
 8009732:	1d23      	adds	r3, r4, #4
 8009734:	f020 0007 	bic.w	r0, r0, #7
 8009738:	1ac3      	subs	r3, r0, r3
 800973a:	d0d3      	beq.n	80096e4 <_malloc_r+0x20>
 800973c:	425a      	negs	r2, r3
 800973e:	50e2      	str	r2, [r4, r3]
 8009740:	e7d0      	b.n	80096e4 <_malloc_r+0x20>
 8009742:	428c      	cmp	r4, r1
 8009744:	684b      	ldr	r3, [r1, #4]
 8009746:	bf16      	itet	ne
 8009748:	6063      	strne	r3, [r4, #4]
 800974a:	6013      	streq	r3, [r2, #0]
 800974c:	460c      	movne	r4, r1
 800974e:	e7eb      	b.n	8009728 <_malloc_r+0x64>
 8009750:	460c      	mov	r4, r1
 8009752:	6849      	ldr	r1, [r1, #4]
 8009754:	e7cc      	b.n	80096f0 <_malloc_r+0x2c>
 8009756:	1cc4      	adds	r4, r0, #3
 8009758:	f024 0403 	bic.w	r4, r4, #3
 800975c:	42a0      	cmp	r0, r4
 800975e:	d005      	beq.n	800976c <_malloc_r+0xa8>
 8009760:	1a21      	subs	r1, r4, r0
 8009762:	4630      	mov	r0, r6
 8009764:	f000 f808 	bl	8009778 <_sbrk_r>
 8009768:	3001      	adds	r0, #1
 800976a:	d0cf      	beq.n	800970c <_malloc_r+0x48>
 800976c:	6025      	str	r5, [r4, #0]
 800976e:	e7db      	b.n	8009728 <_malloc_r+0x64>
 8009770:	20000368 	.word	0x20000368
 8009774:	2000036c 	.word	0x2000036c

08009778 <_sbrk_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4c06      	ldr	r4, [pc, #24]	; (8009794 <_sbrk_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4605      	mov	r5, r0
 8009780:	4608      	mov	r0, r1
 8009782:	6023      	str	r3, [r4, #0]
 8009784:	f7fd fd06 	bl	8007194 <_sbrk>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_sbrk_r+0x1a>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	b103      	cbz	r3, 8009792 <_sbrk_r+0x1a>
 8009790:	602b      	str	r3, [r5, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20000374 	.word	0x20000374

08009798 <_raise_r>:
 8009798:	291f      	cmp	r1, #31
 800979a:	b538      	push	{r3, r4, r5, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	460d      	mov	r5, r1
 80097a0:	d904      	bls.n	80097ac <_raise_r+0x14>
 80097a2:	2316      	movs	r3, #22
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	f04f 30ff 	mov.w	r0, #4294967295
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097ae:	b112      	cbz	r2, 80097b6 <_raise_r+0x1e>
 80097b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097b4:	b94b      	cbnz	r3, 80097ca <_raise_r+0x32>
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f830 	bl	800981c <_getpid_r>
 80097bc:	462a      	mov	r2, r5
 80097be:	4601      	mov	r1, r0
 80097c0:	4620      	mov	r0, r4
 80097c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c6:	f000 b817 	b.w	80097f8 <_kill_r>
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d00a      	beq.n	80097e4 <_raise_r+0x4c>
 80097ce:	1c59      	adds	r1, r3, #1
 80097d0:	d103      	bne.n	80097da <_raise_r+0x42>
 80097d2:	2316      	movs	r3, #22
 80097d4:	6003      	str	r3, [r0, #0]
 80097d6:	2001      	movs	r0, #1
 80097d8:	e7e7      	b.n	80097aa <_raise_r+0x12>
 80097da:	2400      	movs	r4, #0
 80097dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097e0:	4628      	mov	r0, r5
 80097e2:	4798      	blx	r3
 80097e4:	2000      	movs	r0, #0
 80097e6:	e7e0      	b.n	80097aa <_raise_r+0x12>

080097e8 <raise>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <raise+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f7ff bfd3 	b.w	8009798 <_raise_r>
 80097f2:	bf00      	nop
 80097f4:	2000000c 	.word	0x2000000c

080097f8 <_kill_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4c07      	ldr	r4, [pc, #28]	; (8009818 <_kill_r+0x20>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4605      	mov	r5, r0
 8009800:	4608      	mov	r0, r1
 8009802:	4611      	mov	r1, r2
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	f7fd fcab 	bl	8007160 <_kill>
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	d102      	bne.n	8009814 <_kill_r+0x1c>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	b103      	cbz	r3, 8009814 <_kill_r+0x1c>
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	bd38      	pop	{r3, r4, r5, pc}
 8009816:	bf00      	nop
 8009818:	20000374 	.word	0x20000374

0800981c <_getpid_r>:
 800981c:	f7fd bc98 	b.w	8007150 <_getpid>

08009820 <__malloc_lock>:
 8009820:	4770      	bx	lr

08009822 <__malloc_unlock>:
 8009822:	4770      	bx	lr

08009824 <_init>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr

08009830 <_fini>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	bf00      	nop
 8009834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009836:	bc08      	pop	{r3}
 8009838:	469e      	mov	lr, r3
 800983a:	4770      	bx	lr
