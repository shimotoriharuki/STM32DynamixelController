
STM32DynamixelController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800c180  0800c180  0001c180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4c8  0800c4c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4c8  0800c4c8  0001c4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4d0  0800c4d0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c4d0  0800c4d0  0001c4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c4dc  0800c4dc  0001c4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001dc  0800c6c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800c6c0  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028dda  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003501  00000000  00000000  00048fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001760  00000000  00000000  0004c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001650  00000000  00000000  0004dc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c7c  00000000  00000000  0004f298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5b3  00000000  00000000  00074f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df995  00000000  00000000  000834c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162e5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007868  00000000  00000000  00162ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c168 	.word	0x0800c168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c168 	.word	0x0800c168

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_ZNKSt14_Bit_referencecvbEv>:

    _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }

    operator bool() const _GLIBCXX_NOEXCEPT
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d009      	beq.n	8000f76 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e009      	b.n	8000f8a <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	43da      	mvns	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	400a      	ands	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
      return *this;
 8000f8a:	687b      	ldr	r3, [r7, #4]
    }
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZNSt14_Bit_referenceaSERKS_>:

    _Bit_reference&
    operator=(const _Bit_reference& __x) _GLIBCXX_NOEXCEPT
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    { return *this = bool(__x); }
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	f7ff ffbf 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffcf 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZSt4swapSt14_Bit_referenceS_>:
  };

#if __cplusplus >= 201103L
  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	f107 0408 	add.w	r4, r7, #8
 8000fc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fca:	4639      	mov	r1, r7
 8000fcc:	e881 000c 	stmia.w	r1, {r2, r3}
    bool __tmp = __x;
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffa6 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]
    __x = __y;
 8000fde:	463a      	mov	r2, r7
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffd6 	bl	8000f98 <_ZNSt14_Bit_referenceaSERKS_>
    __y = __tmp;
 8000fec:	7dfa      	ldrb	r2, [r7, #23]
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffac 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
  }
 8000ff8:	bf00      	nop
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}

08001000 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>:

    void
    _M_bump_up()
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	1c59      	adds	r1, r3, #1
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6051      	str	r1, [r2, #4]
 8001038:	2b1f      	cmp	r3, #31
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <_ZNSt18_Bit_iterator_base10_M_bump_upEv+0x30>
	{
	  _M_offset = 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
	  ++_M_p;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1d1a      	adds	r2, r3, #4
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
	}
    }
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_ZNSt18_Bit_iterator_base12_M_bump_downEv>:

    void
    _M_bump_down()
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    {
      if (_M_offset-- == 0)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	1e59      	subs	r1, r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6051      	str	r1, [r2, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <_ZNSt18_Bit_iterator_base12_M_bump_downEv+0x30>
	{
	  _M_offset = int(_S_word_bit) - 1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	221f      	movs	r2, #31
 8001086:	605a      	str	r2, [r3, #4]
	  --_M_p;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1f1a      	subs	r2, r3, #4
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
	}
    }
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_ZNSt18_Bit_iterator_base7_M_incrEi>:

    void
    _M_incr(ptrdiff_t __i)
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da00      	bge.n	80010be <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 80010bc:	331f      	adds	r3, #31
 80010be:	115b      	asrs	r3, r3, #5
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	441a      	add	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	425a      	negs	r2, r3
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	f002 021f 	and.w	r2, r2, #31
 80010d4:	bf58      	it	pl
 80010d6:	4253      	negpl	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da07      	bge.n	80010f0 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3320      	adds	r3, #32
 80010e4:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1f1a      	subs	r2, r3, #4
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]
    }
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_ZNKSt18_Bit_iterator_baseeqERKS_>:

    bool
    operator==(const _Bit_iterator_base& __i) const
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d107      	bne.n	8001128 <_ZNKSt18_Bit_iterator_baseeqERKS_+0x26>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d101      	bne.n	8001128 <_ZNKSt18_Bit_iterator_baseeqERKS_+0x26>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <_ZNKSt18_Bit_iterator_baseeqERKS_+0x28>
 8001128:	2300      	movs	r3, #0
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_ZNKSt18_Bit_iterator_baseneERKS_>:
      return _M_p < __i._M_p
	     || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
    { return !(*this == __i); }
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffdd 	bl	8001102 <_ZNKSt18_Bit_iterator_baseeqERKS_>
 8001148:	4603      	mov	r3, r0
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>:
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	109b      	asrs	r3, r3, #2
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	461a      	mov	r2, r3
	    + __x._M_offset - __y._M_offset);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	441a      	add	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	1ad3      	subs	r3, r2, r3
  }
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt13_Bit_iteratorC1Ev>:
  {
    typedef _Bit_reference  reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff30 	bl	8001000 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff1f 	bl	8001000 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe8a 	bl	8000f00 <_ZNSt14_Bit_referenceC1EPmm>
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_ZNSt13_Bit_iteratorppEv>:

    iterator&
    operator++()
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff11 	bl	8001026 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001204:	687b      	ldr	r3, [r7, #4]
    }
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_ZNSt13_Bit_iteratormmEv>:
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
    {
      _M_bump_down();
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff22 	bl	8001062 <_ZNSt18_Bit_iterator_base12_M_bump_downEv>
      return *this;
 800121e:	687b      	ldr	r3, [r7, #4]
    }
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff31 	bl	800109e <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 800123c:	687b      	ldr	r3, [r7, #4]
    }
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_ZNSt13_Bit_iteratormIEi>:

    iterator&
    operator-=(difference_type __i)
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
    {
      *this += -__i;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	425b      	negs	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffe6 	bl	8001228 <_ZNSt13_Bit_iteratorpLEi>
      return *this;
 800125c:	687b      	ldr	r3, [r7, #4]
    }
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZNKSt13_Bit_iteratorplEi>:

    iterator
    operator+(difference_type __i) const
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = *this;
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127c:	e883 0003 	stmia.w	r3, {r0, r1}
      return __tmp += __i;
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffce 	bl	8001228 <_ZNSt13_Bit_iteratorpLEi>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001294:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZNKSt13_Bit_iteratormiEi>:

    iterator
    operator-(difference_type __i) const
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = *this;
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b6:	e883 0003 	stmia.w	r3, {r0, r1}
      return __tmp -= __i;
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffc0 	bl	8001246 <_ZNSt13_Bit_iteratormIEi>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZNSt19_Bit_const_iteratorC1EPmj>:
    typedef const bool*          pointer;
    typedef _Bit_const_iterator  const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe87 	bl	8001000 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>:

    _Bit_const_iterator(const _Bit_iterator& __x)
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6819      	ldr	r1, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	461a      	mov	r2, r3
 8001312:	f7ff fe75 	bl	8001000 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZNKSt19_Bit_const_iterator13_M_const_castEv>:

    _Bit_iterator
    _M_const_cast() const
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    { return _Bit_iterator(_M_p, _M_offset); }
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6819      	ldr	r1, [r3, #0]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	461a      	mov	r2, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff38 	bl	80011aa <_ZNSt13_Bit_iteratorC1EPmj>
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZNKSt19_Bit_const_iteratordeEv>:

    const_reference
    operator*() const
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
    { return _Bit_reference(_M_p, 1UL << _M_offset); }
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	409a      	lsls	r2, r3
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fdd0 	bl	8000f00 <_ZNSt14_Bit_referenceC1EPmm>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fdde 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 800136a:	4603      	mov	r3, r0
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZNSt19_Bit_const_iteratorppEv>:

    const_iterator&
    operator++()
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    {
      _M_bump_up();
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe51 	bl	8001026 <_ZNSt18_Bit_iterator_base10_M_bump_upEv>
      return *this;
 8001384:	687b      	ldr	r3, [r7, #4]
    }
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>:
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
 800138e:	b590      	push	{r4, r7, lr}
 8001390:	b087      	sub	sp, #28
 8001392:	af00      	add	r7, sp, #0
 8001394:	f107 0408 	add.w	r4, r7, #8
 8001398:	e884 0003 	stmia.w	r4, {r0, r1}
 800139c:	4639      	mov	r1, r7
 800139e:	e881 000c 	stmia.w	r1, {r2, r3}
    for (; __first != __last; ++__first)
 80013a2:	463a      	mov	r2, r7
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fec3 	bl	8001136 <_ZNKSt18_Bit_iterator_baseneERKS_>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d015      	beq.n	80013e2 <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b+0x54>
      *__first = __x;
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	f107 0208 	add.w	r2, r7, #8
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff03 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 80013c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fdbd 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
    for (; __first != __last; ++__first)
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff0a 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
 80013e0:	e7df      	b.n	80013a2 <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b+0x14>
  }
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}

080013ea <_ZSt4fillSt13_Bit_iteratorS_RKb>:

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
 80013ea:	b590      	push	{r4, r7, lr}
 80013ec:	b08d      	sub	sp, #52	; 0x34
 80013ee:	af02      	add	r7, sp, #8
 80013f0:	f107 0408 	add.w	r4, r7, #8
 80013f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80013f8:	4639      	mov	r1, r7
 80013fa:	e881 000c 	stmia.w	r1, {r2, r3}
    if (__first._M_p != __last._M_p)
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d035      	beq.n	8001472 <_ZSt4fillSt13_Bit_iteratorS_RKb+0x88>
      {
	std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1d18      	adds	r0, r3, #4
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <_ZSt4fillSt13_Bit_iteratorS_RKb+0x30>
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	e000      	b.n	800141c <_ZSt4fillSt13_Bit_iteratorS_RKb+0x32>
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	461a      	mov	r2, r3
 8001424:	f000 fab7 	bl	8001996 <_ZSt4fillIPmiEvT_S1_RKT0_>
	__fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1d19      	adds	r1, r3, #4
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	2200      	movs	r2, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff feb9 	bl	80011aa <_ZNSt13_Bit_iteratorC1EPmj>
 8001438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	cb0c      	ldmia	r3, {r2, r3}
 8001444:	f107 0108 	add.w	r1, r7, #8
 8001448:	c903      	ldmia	r1, {r0, r1}
 800144a:	f7ff ffa0 	bl	800138e <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>
	__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	2200      	movs	r2, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fea7 	bl	80011aa <_ZNSt13_Bit_iteratorC1EPmj>
 800145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	463b      	mov	r3, r7
 8001464:	cb0c      	ldmia	r3, {r2, r3}
 8001466:	f107 0120 	add.w	r1, r7, #32
 800146a:	c903      	ldmia	r1, {r0, r1}
 800146c:	f7ff ff8f 	bl	800138e <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>
      }
    else
      __fill_bvector(__first, __last, __x);
  }
 8001470:	e009      	b.n	8001486 <_ZSt4fillSt13_Bit_iteratorS_RKb+0x9c>
      __fill_bvector(__first, __last, __x);
 8001472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	463b      	mov	r3, r7
 800147a:	cb0c      	ldmia	r3, {r2, r3}
 800147c:	f107 0108 	add.w	r1, r7, #8
 8001480:	c903      	ldmia	r1, {r0, r1}
 8001482:	f7ff ff84 	bl	800138e <_ZSt14__fill_bvectorSt13_Bit_iteratorS_b>
  }
 8001486:	bf00      	nop
 8001488:	372c      	adds	r7, #44	; 0x2c
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}

0800148e <_ZN7BufDataC1Et>:

/* ----private----*/


/* ----public-----*/
BufData::BufData(uint16_t buf_length) : buf_length_(buf_length), send_idx_(0), read_pointer_idx_(0), no_receive_flag_idx_(0)
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	887a      	ldrh	r2, [r7, #2]
 800149e:	801a      	strh	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3304      	adds	r3, #4
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fa8d 	bl	80019c4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	821a      	strh	r2, [r3, #16]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3314      	adds	r3, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fa92 	bl	80019de <_ZNSt6vectorIPhSaIS0_EEC1Ev>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3320      	adds	r3, #32
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fa9a 	bl	80019f8 <_ZNSt6vectorItSaItEEC1Ev>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3330      	adds	r3, #48	; 0x30
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fa9f 	bl	8001a12 <_ZNSt6vectorIbSaIbEEC1Ev>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
{
	send_buf_.resize(buf_length_);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1d1a      	adds	r2, r3, #4
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f000 faa0 	bl	8001a2c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj>
	read_pointer_buf_.resize(buf_length_);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f103 0214 	add.w	r2, r3, #20
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f000 facf 	bl	8001a9c <_ZNSt6vectorIPhSaIS0_EE6resizeEj>
	read_pointer_length_buf_.resize(buf_length_);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f103 0220 	add.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f000 fafb 	bl	8001b06 <_ZNSt6vectorItSaItEE6resizeEj>
	no_receive_flag_buf_.resize(buf_length_);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	f000 fb27 	bl	8001b70 <_ZNSt6vectorIbSaIbEE6resizeEjb>

}
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN7BufData10setSendBufEPht>:

void BufData::setSendBuf(uint8_t *data, uint16_t send_length)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	80fb      	strh	r3, [r7, #6]
	send_buf_[send_idx_].resize(send_length);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1d1a      	adds	r2, r3, #4
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8a1b      	ldrh	r3, [r3, #16]
 8001542:	4619      	mov	r1, r3
 8001544:	4610      	mov	r0, r2
 8001546:	f000 fb5f 	bl	8001c08 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 800154a:	4602      	mov	r2, r0
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f000 fb6c 	bl	8001c2e <_ZNSt6vectorIhSaIhEE6resizeEj>
	for(uint16_t i = 0; i < send_length; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	82fb      	strh	r3, [r7, #22]
 800155a:	8afa      	ldrh	r2, [r7, #22]
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	429a      	cmp	r2, r3
 8001560:	d22c      	bcs.n	80015bc <_ZN7BufData10setSendBufEPht+0x90>
		send_buf_[send_idx_][i] = data[i];
 8001562:	8afb      	ldrh	r3, [r7, #22]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	18d4      	adds	r4, r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1d1a      	adds	r2, r3, #4
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8a1b      	ldrh	r3, [r3, #16]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f000 fb48 	bl	8001c08 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8001578:	4602      	mov	r2, r0
 800157a:	8afb      	ldrh	r3, [r7, #22]
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f000 fb89 	bl	8001c96 <_ZNSt6vectorIhSaIhEEixEj>
 8001584:	4603      	mov	r3, r0
 8001586:	7822      	ldrb	r2, [r4, #0]
 8001588:	701a      	strb	r2, [r3, #0]
		mon_send_buf[mon_send_buf_idx] = data[i];
 800158a:	8afb      	ldrh	r3, [r7, #22]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_ZN7BufData10setSendBufEPht+0xb8>)
 8001592:	8812      	ldrh	r2, [r2, #0]
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <_ZN7BufData10setSendBufEPht+0xbc>)
 8001598:	5499      	strb	r1, [r3, r2]
		mon_send_buf_idx++;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <_ZN7BufData10setSendBufEPht+0xb8>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_ZN7BufData10setSendBufEPht+0xb8>)
 80015a4:	801a      	strh	r2, [r3, #0]
		if(mon_send_buf_idx >= 256) mon_send_buf_idx = 0;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <_ZN7BufData10setSendBufEPht+0xb8>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d902      	bls.n	80015b4 <_ZN7BufData10setSendBufEPht+0x88>
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <_ZN7BufData10setSendBufEPht+0xb8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < send_length; i++){
 80015b4:	8afb      	ldrh	r3, [r7, #22]
 80015b6:	3301      	adds	r3, #1
 80015b8:	82fb      	strh	r3, [r7, #22]
 80015ba:	e7ce      	b.n	800155a <_ZN7BufData10setSendBufEPht+0x2e>
	}

	send_idx_++;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8a1b      	ldrh	r3, [r3, #16]
 80015c0:	3301      	adds	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	821a      	strh	r2, [r3, #16]
	if(send_idx_ >= buf_length_) send_idx_ = 0;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8a1a      	ldrh	r2, [r3, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d302      	bcc.n	80015da <_ZN7BufData10setSendBufEPht+0xae>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	821a      	strh	r2, [r3, #16]

}
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200002f8 	.word	0x200002f8
 80015e8:	200001f8 	.word	0x200001f8

080015ec <_ZN7BufData21getFirstSendBufLengthEv>:

uint16_t BufData::getFirstSendBufLength()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	return send_buf_[0].size();
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3304      	adds	r3, #4
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fb04 	bl	8001c08 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fb56 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001608:	4603      	mov	r3, r0
 800160a:	b29b      	uxth	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN7BufData15getFirstSendBufEPht>:

void BufData::getFirstSendBuf(uint8_t *data, uint16_t length)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	4613      	mov	r3, r2
 8001620:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < length; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	8afa      	ldrh	r2, [r7, #22]
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	429a      	cmp	r2, r3
 800162c:	d215      	bcs.n	800165a <_ZN7BufData15getFirstSendBufEPht+0x46>
		data[i] = send_buf_[0][i];
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fae7 	bl	8001c08 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 800163a:	4602      	mov	r2, r0
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	4619      	mov	r1, r3
 8001640:	4610      	mov	r0, r2
 8001642:	f000 fb28 	bl	8001c96 <_ZNSt6vectorIhSaIhEEixEj>
 8001646:	4601      	mov	r1, r0
 8001648:	8afb      	ldrh	r3, [r7, #22]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	780a      	ldrb	r2, [r1, #0]
 8001650:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < length; i++){
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	3301      	adds	r3, #1
 8001656:	82fb      	strh	r3, [r7, #22]
 8001658:	e7e5      	b.n	8001626 <_ZN7BufData15getFirstSendBufEPht+0x12>
	}

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZN7BufData14deleteFirstBufEv>:

void BufData::deleteFirstBuf()
{
 8001662:	b5b0      	push	{r4, r5, r7, lr}
 8001664:	b096      	sub	sp, #88	; 0x58
 8001666:	af04      	add	r7, sp, #16
 8001668:	6078      	str	r0, [r7, #4]
	std::rotate(send_buf_.begin(), send_buf_.begin() + 1, send_buf_.end());
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fb30 	bl	8001cd4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 8001674:	4604      	mov	r4, r0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fb2a 	bl	8001cd4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 8001680:	4603      	mov	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fb32 	bl	8001cf4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 8001690:	4605      	mov	r5, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fb47 	bl	8001d2a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4629      	mov	r1, r5
 80016a2:	4620      	mov	r0, r4
 80016a4:	f000 fb5c 	bl	8001d60 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_>
	std::rotate(read_pointer_buf_.begin(), read_pointer_buf_.begin() + 1, read_pointer_buf_.end());
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3314      	adds	r3, #20
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fb6d 	bl	8001d8c <_ZNSt6vectorIPhSaIS0_EE5beginEv>
 80016b2:	4604      	mov	r4, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3314      	adds	r3, #20
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fb67 	bl	8001d8c <_ZNSt6vectorIPhSaIS0_EE5beginEv>
 80016be:	4603      	mov	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	2101      	movs	r1, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fb6f 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 80016ce:	4605      	mov	r5, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3314      	adds	r3, #20
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fb81 	bl	8001ddc <_ZNSt6vectorIPhSaIS0_EE3endEv>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4629      	mov	r1, r5
 80016e0:	4620      	mov	r0, r4
 80016e2:	f000 fb96 	bl	8001e12 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_>
	std::rotate(read_pointer_length_buf_.begin(), read_pointer_length_buf_.begin() + 1, read_pointer_length_buf_.end());
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3320      	adds	r3, #32
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fba7 	bl	8001e3e <_ZNSt6vectorItSaItEE5beginEv>
 80016f0:	4604      	mov	r4, r0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3320      	adds	r3, #32
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fba1 	bl	8001e3e <_ZNSt6vectorItSaItEE5beginEv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2101      	movs	r1, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fba9 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 800170c:	4605      	mov	r5, r0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3320      	adds	r3, #32
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fbbb 	bl	8001e8e <_ZNSt6vectorItSaItEE3endEv>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4629      	mov	r1, r5
 800171e:	4620      	mov	r0, r4
 8001720:	f000 fbd0 	bl	8001ec4 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_>
	std::rotate(no_receive_flag_buf_.begin(), no_receive_flag_buf_.begin() + 1, no_receive_flag_buf_.end());
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fbdd 	bl	8001ef0 <_ZNSt6vectorIbSaIbEE5beginEv>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800173c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fbd4 	bl	8001ef0 <_ZNSt6vectorIbSaIbEE5beginEv>
 8001748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001750:	2201      	movs	r2, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fd87 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800175e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fbd4 	bl	8001f12 <_ZNSt6vectorIbSaIbEE3endEv>
 800176a:	f107 0418 	add.w	r4, r7, #24
 800176e:	aa01      	add	r2, sp, #4
 8001770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001778:	e882 0003 	stmia.w	r2, {r0, r1}
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001782:	f107 0220 	add.w	r2, r7, #32
 8001786:	ca06      	ldmia	r2, {r1, r2}
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fbde 	bl	8001f4a <_ZNSt3_V26rotateISt13_Bit_iteratorEET_S2_S2_S2_>
	send_idx_--;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8a1b      	ldrh	r3, [r3, #16]
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	821a      	strh	r2, [r3, #16]
	read_pointer_idx_--;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	859a      	strh	r2, [r3, #44]	; 0x2c
	no_receive_flag_idx_--;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	send_buf_[buf_length_ - 1].resize(0);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	1d1a      	adds	r2, r3, #4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	3b01      	subs	r3, #1
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f000 fa20 	bl	8001c08 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fa2e 	bl	8001c2e <_ZNSt6vectorIhSaIhEE6resizeEj>
	read_pointer_buf_[buf_length_ - 1] = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f103 0214 	add.w	r2, r3, #20
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f000 fbd8 	bl	8001f96 <_ZNSt6vectorIPhSaIS0_EEixEj>
 80017e6:	4602      	mov	r2, r0
 80017e8:	2300      	movs	r3, #0
 80017ea:	6013      	str	r3, [r2, #0]
	read_pointer_length_buf_[buf_length_ - 1] = 0;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f103 0220 	add.w	r2, r3, #32
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 fbdb 	bl	8001fb6 <_ZNSt6vectorItSaItEEixEj>
 8001800:	4603      	mov	r3, r0
 8001802:	2200      	movs	r2, #0
 8001804:	801a      	strh	r2, [r3, #0]
	no_receive_flag_buf_[buf_length_ - 1] = 0;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	3b01      	subs	r3, #1
 8001812:	461a      	mov	r2, r3
 8001814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fbdc 	bl	8001fd6 <_ZNSt6vectorIbSaIbEEixEj>
 800181e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fb93 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
}
 800182a:	bf00      	nop
 800182c:	3748      	adds	r7, #72	; 0x48
 800182e:	46bd      	mov	sp, r7
 8001830:	bdb0      	pop	{r4, r5, r7, pc}

08001832 <_ZN7BufData17setReadPointerBufEPht>:

void BufData::setReadPointerBuf(uint8_t *pointer, uint16_t length)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	4613      	mov	r3, r2
 800183e:	80fb      	strh	r3, [r7, #6]
	read_pointer_buf_[read_pointer_idx_] = pointer;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f103 0214 	add.w	r2, r3, #20
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f000 fba2 	bl	8001f96 <_ZNSt6vectorIPhSaIS0_EEixEj>
 8001852:	4602      	mov	r2, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	6013      	str	r3, [r2, #0]
	read_pointer_length_buf_[read_pointer_idx_] = length;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f103 0220 	add.w	r2, r3, #32
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f000 fba6 	bl	8001fb6 <_ZNSt6vectorItSaItEEixEj>
 800186a:	4602      	mov	r2, r0
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	8013      	strh	r3, [r2, #0]

	read_pointer_idx_++;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001874:	3301      	adds	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	859a      	strh	r2, [r3, #44]	; 0x2c
	if(read_pointer_idx_ >= buf_length_) read_pointer_idx_ = 0;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d302      	bcc.n	800188e <_ZN7BufData17setReadPointerBufEPht+0x5c>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_ZN7BufData22getFirstReadPointerBufEPt>:

uint8_t *BufData::getFirstReadPointerBuf(uint16_t *length)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
	*length = read_pointer_length_buf_[0];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3320      	adds	r3, #32
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fb85 	bl	8001fb6 <_ZNSt6vectorItSaItEEixEj>
 80018ac:	4603      	mov	r3, r0
 80018ae:	881a      	ldrh	r2, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	801a      	strh	r2, [r3, #0]

	return read_pointer_buf_[0];
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3314      	adds	r3, #20
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fb6b 	bl	8001f96 <_ZNSt6vectorIPhSaIS0_EEixEj>
 80018c0:	4603      	mov	r3, r0
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZN7BufData19setNoReceiveFlagBufEb>:

void BufData::setNoReceiveFlagBuf(bool flag)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
	no_receive_flag_buf_[no_receive_flag_idx_] = flag;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018e4:	461a      	mov	r2, r3
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fb73 	bl	8001fd6 <_ZNSt6vectorIbSaIbEEixEj>
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fb29 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>

	no_receive_flag_idx_++;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001904:	3301      	adds	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if(no_receive_flag_idx_>= buf_length_) no_receive_flag_idx_ = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d303      	bcc.n	8001924 <_ZN7BufData19setNoReceiveFlagBufEb+0x58>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for(uint16_t i = 0; i < 256; i++){
 8001924:	2300      	movs	r3, #0
 8001926:	83fb      	strh	r3, [r7, #30]
 8001928:	8bfb      	ldrh	r3, [r7, #30]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d816      	bhi.n	800195c <_ZN7BufData19setNoReceiveFlagBufEb+0x90>
		mon_bool[i] = no_receive_flag_buf_[i];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001934:	8bfa      	ldrh	r2, [r7, #30]
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb4b 	bl	8001fd6 <_ZNSt6vectorIbSaIbEEixEj>
 8001940:	8bfc      	ldrh	r4, [r7, #30]
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff faed 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <_ZN7BufData19setNoReceiveFlagBufEb+0x98>)
 8001952:	551a      	strb	r2, [r3, r4]
	for(uint16_t i = 0; i < 256; i++){
 8001954:	8bfb      	ldrh	r3, [r7, #30]
 8001956:	3301      	adds	r3, #1
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	e7e5      	b.n	8001928 <_ZN7BufData19setNoReceiveFlagBufEb+0x5c>
	}
}
 800195c:	bf00      	nop
 800195e:	3724      	adds	r7, #36	; 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	200002fc 	.word	0x200002fc

08001968 <_ZN7BufData24getFirstNoReceiveFlagBufEv>:

bool BufData::getFirstNoReceiveFlagBuf()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	return no_receive_flag_buf_[0];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	2200      	movs	r2, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fb2a 	bl	8001fd6 <_ZNSt6vectorIbSaIbEEixEj>
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff facd 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZSt4fillIPmiEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fb36 	bl	8002014 <_ZSt12__niter_baseIPmET_S1_>
 80019a8:	4604      	mov	r4, r0
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f000 fb32 	bl	8002014 <_ZSt12__niter_baseIPmET_S1_>
 80019b0:	4603      	mov	r3, r0
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4620      	mov	r0, r4
 80019b8:	f000 fb37 	bl	800202a <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}

080019c4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fb45 	bl	800205e <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_ZNSt6vectorIPhSaIS0_EEC1Ev>:
      vector()
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fb5e 	bl	80020aa <_ZNSt12_Vector_baseIPhSaIS0_EEC1Ev>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_ZNSt6vectorItSaItEEC1Ev>:
      vector()
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fb77 	bl	80020f6 <_ZNSt12_Vector_baseItSaItEEC1Ev>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZNSt6vectorIbSaIbEEC1Ev>:
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<allocator_type>::value)
#endif
    : _Base() { }
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fb90 	bl	8002142 <_ZNSt13_Bvector_baseISaIbEEC1Ev>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fb90 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf8c      	ite	hi
 8001a44:	2301      	movhi	r3, #1
 8001a46:	2300      	movls	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00a      	beq.n	8001a64 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fb84 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fb93 	bl	8002188 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8001a62:	e017      	b.n	8001a94 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj+0x68>
	else if (__new_size < size())
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fb79 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	bf34      	ite	cc
 8001a72:	2301      	movcc	r3, #1
 8001a74:	2300      	movcs	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEj+0x68>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fc02 	bl	8002298 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_ZNSt6vectorIPhSaIS0_EE6resizeEj>:
      resize(size_type __new_size)
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fc0e 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	bf8c      	ite	hi
 8001ab4:	2301      	movhi	r3, #1
 8001ab6:	2300      	movls	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <_ZNSt6vectorIPhSaIS0_EE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fc02 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fc0d 	bl	80022ec <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj>
      }
 8001ad2:	e014      	b.n	8001afe <_ZNSt6vectorIPhSaIS0_EE6resizeEj+0x62>
	else if (__new_size < size())
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fbf7 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	bf34      	ite	cc
 8001ae2:	2301      	movcc	r3, #1
 8001ae4:	2300      	movcs	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <_ZNSt6vectorIPhSaIS0_EE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fc73 	bl	80023e4 <_ZNSt6vectorIPhSaIS0_EE15_M_erase_at_endEPS0_>
      }
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_ZNSt6vectorItSaItEE6resizeEj>:
      resize(size_type __new_size)
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fc7f 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	bf8c      	ite	hi
 8001b1e:	2301      	movhi	r3, #1
 8001b20:	2300      	movls	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00a      	beq.n	8001b3e <_ZNSt6vectorItSaItEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fc73 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fc7e 	bl	8002438 <_ZNSt6vectorItSaItEE17_M_default_appendEj>
      }
 8001b3c:	e014      	b.n	8001b68 <_ZNSt6vectorItSaItEE6resizeEj+0x62>
	else if (__new_size < size())
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fc68 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf34      	ite	cc
 8001b4c:	2301      	movcc	r3, #1
 8001b4e:	2300      	movcs	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <_ZNSt6vectorItSaItEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fce4 	bl	8002530 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>
      }
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZNSt6vectorIbSaIbEE6resizeEjb>:
    erase(iterator __first, iterator __last)
#endif
    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b090      	sub	sp, #64	; 0x40
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	71fb      	strb	r3, [r7, #7]
    {
      if (__new_size < size())
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fcee 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	bf34      	ite	cc
 8001b8c:	2301      	movcc	r3, #1
 8001b8e:	2300      	movcs	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d015      	beq.n	8001bc2 <_ZNSt6vectorIbSaIbEE6resizeEjb+0x52>
        _M_erase_at_end(begin() + difference_type(__new_size));
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f9a7 	bl	8001ef0 <_ZNSt6vectorIbSaIbEE5beginEv>
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	f107 0110 	add.w	r1, r7, #16
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb5a 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fced 	bl	800259a <_ZNSt6vectorIbSaIbEE15_M_erase_at_endESt13_Bit_iterator>
      else
        insert(end(), __new_size - size(), __x);
    }
 8001bc0:	e01e      	b.n	8001c00 <_ZNSt6vectorIbSaIbEE6resizeEjb+0x90>
        insert(end(), __new_size - size(), __x);
 8001bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc6:	68f9      	ldr	r1, [r7, #12]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f9a2 	bl	8001f12 <_ZNSt6vectorIbSaIbEE3endEv>
 8001bce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb8f 	bl	80012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fcbe 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	f107 0020 	add.w	r0, r7, #32
 8001bee:	1dfa      	adds	r2, r7, #7
 8001bf0:	9201      	str	r2, [sp, #4]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf8:	cb0c      	ldmia	r3, {r2, r3}
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	f000 fce1 	bl	80025c2 <_ZNSt6vectorIbSaIbEE6insertESt19_Bit_const_iteratorjRKb>
    }
 8001c00:	bf00      	nop
 8001c02:	3738      	adds	r7, #56	; 0x38
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
      }
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_ZNSt6vectorIhSaIhEE6resizeEj>:
      resize(size_type __new_size)
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f83b 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	bf8c      	ite	hi
 8001c46:	2301      	movhi	r3, #1
 8001c48:	2300      	movls	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00a      	beq.n	8001c66 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f82f 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fce8 	bl	8002634 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
      }
 8001c64:	e013      	b.n	8001c8e <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f824 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf34      	ite	cc
 8001c74:	2301      	movcc	r3, #1
 8001c76:	2300      	movcs	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fd4d 	bl	8002728 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4413      	add	r3, r2
      }
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fd37 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	f107 020c 	add.w	r2, r7, #12
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fd1c 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	1d1a      	adds	r2, r3, #4
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fd0b 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_>:
   *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
   *  for each @p n in the range @p [0,__last-__first).
  */
  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __middle);
      __glibcxx_requires_valid_range(__middle, __last);

      return std::__rotate(__first, __middle, __last,
			   std::__iterator_category(__first));
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ffeb 	bl	8001d4c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
 8001d76:	4623      	mov	r3, r4
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fd06 	bl	800278e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag>
 8001d82:	4603      	mov	r3, r0
    }
 8001d84:	4618      	mov	r0, r3
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}

08001d8c <_ZNSt6vectorIPhSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fdd5 	bl	800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	f107 020c 	add.w	r2, r7, #12
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fdbd 	bl	800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZNSt6vectorIPhSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1d1a      	adds	r2, r3, #4
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fdac 	bl	800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>:
    __iterator_category(const _Iter&)
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001e12:	b590      	push	{r4, r7, lr}
 8001e14:	b087      	sub	sp, #28
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ffeb 	bl	8001dfe <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>
 8001e28:	4623      	mov	r3, r4
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fd9c 	bl	800296c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag>
 8001e34:	4603      	mov	r3, r0
    }
 8001e36:	4618      	mov	r0, r3
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}

08001e3e <_ZNSt6vectorItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fefd 	bl	8002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	f107 020c 	add.w	r2, r7, #12
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fee5 	bl	8002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_ZNSt6vectorItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1d1a      	adds	r2, r3, #4
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fed4 	bl	8002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ffeb 	bl	8001eb0 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
 8001eda:	4623      	mov	r3, r4
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fec4 	bl	8002c6e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 8001ee6:	4603      	mov	r3, r0
    }
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <_ZNSt6vectorIbSaIbEE5beginEv>:
    begin() _GLIBCXX_NOEXCEPT
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_start; }
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f02:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_ZNSt6vectorIbSaIbEE3endEv>:
    end() _GLIBCXX_NOEXCEPT
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_finish; }
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	3308      	adds	r3, #8
 8001f22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f26:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_ZSt19__iterator_categoryISt13_Bit_iteratorENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_ZNSt3_V26rotateISt13_Bit_iteratorEET_S2_S2_S2_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	b5b0      	push	{r4, r5, r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	1d38      	adds	r0, r7, #4
 8001f56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			   std::__iterator_category(__first));
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ffe9 	bl	8001f36 <_ZSt19__iterator_categoryISt13_Bit_iteratorENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001f64:	68fc      	ldr	r4, [r7, #12]
 8001f66:	f88d 500c 	strb.w	r5, [sp, #12]
 8001f6a:	aa01      	add	r2, sp, #4
 8001f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f74:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	1d3a      	adds	r2, r7, #4
 8001f80:	ca06      	ldmia	r2, {r1, r2}
 8001f82:	4620      	mov	r0, r4
 8001f84:	f000 ffef 	bl	8002f66 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag>
    }
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f92:	b002      	add	sp, #8
 8001f94:	4770      	bx	lr

08001f96 <_ZNSt6vectorIPhSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
      }
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZNSt6vectorItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
      }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_ZNSt6vectorIbSaIbEEixEj>:
    operator[](size_type __n)
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
      return *iterator(this->_M_impl._M_start._M_p
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	681a      	ldr	r2, [r3, #0]
		       + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	009b      	lsls	r3, r3, #2
      return *iterator(this->_M_impl._M_start._M_p
 8001fec:	18d1      	adds	r1, r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f8d6 	bl	80011aa <_ZNSt13_Bit_iteratorC1EPmj>
		       + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f107 0210 	add.w	r2, r7, #16
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f8e0 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
    }
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 800202a:	b480      	push	{r7}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	429a      	cmp	r2, r3
 8002042:	d006      	beq.n	8002052 <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e7f4      	b.n	800203c <_ZSt8__fill_aIPmiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      _Vector_base()
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f001 f987 	bl	800337c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f001 f995 	bl	80033cc <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
    }
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_ZNSt12_Vector_baseIPhSaIS0_EEC1Ev>:
      _Vector_base()
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f996 	bl	80033e6 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implC1Ev>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f001 f9a4 	bl	8003436 <_ZSt8_DestroyIPPhEvT_S2_>
    }
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZNSt12_Vector_baseItSaItEEC1Ev>:
      _Vector_base()
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f001 f9a5 	bl	8003450 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f001 f9b3 	bl	80034a0 <_ZSt8_DestroyIPtEvT_S1_>
    }
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_ZNSt13_Bvector_baseISaIbEEC1Ev>:
      _Bvector_base()
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f9b4 	bl	80034ba <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1Ev>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	461a      	mov	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	109b      	asrs	r3, r3, #2
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv+0x28>)
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	aaaaaaab 	.word	0xaaaaaaab

08002188 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d077      	beq.n	8002288 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x100>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	109b      	asrs	r3, r3, #2
 80021a6:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x108>)
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d80f      	bhi.n	80021d4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x4c>
	    {
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff5c 	bl	8002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80021c0:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80021c2:	461a      	mov	r2, r3
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	4620      	mov	r0, r4
 80021c8:	f001 f9c9 	bl	800355e <_ZSt27__uninitialized_default_n_aIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RSaIT1_E>
 80021cc:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 80021d2:	e059      	b.n	8002288 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x100>
	      const size_type __len =
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x10c>)
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f001 f9cf 	bl	800357c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>
 80021de:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffbb 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80021e6:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6979      	ldr	r1, [r7, #20]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fa0d 	bl	800360c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>
 80021f2:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff38 	bl	8002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002208:	4603      	mov	r3, r0
		  __new_finish
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4629      	mov	r1, r5
 800220e:	4620      	mov	r0, r4
 8002210:	f001 fa10 	bl	8003634 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8002214:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff2d 	bl	8002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800221e:	4603      	mov	r3, r0
		  __new_finish =
 8002220:	461a      	mov	r2, r3
 8002222:	6839      	ldr	r1, [r7, #0]
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	f001 f99a 	bl	800355e <_ZSt27__uninitialized_default_n_aIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RSaIT1_E>
 800222a:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681c      	ldr	r4, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff1e 	bl	8002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800223c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800223e:	461a      	mov	r2, r3
 8002240:	4629      	mov	r1, r5
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff ff23 	bl	800208e <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	109b      	asrs	r3, r3, #2
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_default_appendEj+0x108>)
 800225e:	fb02 f303 	mul.w	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8002262:	461a      	mov	r2, r3
 8002264:	f001 f89f 	bl	80033a6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __new_start;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	441a      	add	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
    }
 8002288:	bf00      	nop
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bdb0      	pop	{r4, r5, r7, pc}
 8002290:	aaaaaaab 	.word	0xaaaaaaab
 8002294:	0800c180 	.word	0x0800c180

08002298 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685c      	ldr	r4, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fee5 	bl	8002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4621      	mov	r1, r4
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f7ff feea 	bl	800208e <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	605a      	str	r2, [r3, #4]
      }
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}

080022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	109b      	asrs	r3, r3, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
      if (__n != 0)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d06d      	beq.n	80023d8 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0xec>
	  if (size_type(this->_M_impl._M_end_of_storage
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	109b      	asrs	r3, r3, #2
 800230a:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4293      	cmp	r3, r2
 8002310:	d80f      	bhi.n	8002332 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0x46>
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fed3 	bl	80020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 800231e:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002320:	461a      	mov	r2, r3
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	4620      	mov	r0, r4
 8002326:	f001 f99e 	bl	8003666 <_ZSt27__uninitialized_default_n_aIPPhjS0_ET_S2_T0_RSaIT1_E>
 800232a:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	605a      	str	r2, [r3, #4]
    }
 8002330:	e052      	b.n	80023d8 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0xec>
	      const size_type __len =
 8002332:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <_ZNSt6vectorIPhSaIS0_EE17_M_default_appendEj+0xf4>)
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f001 f9a4 	bl	8003684 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc>
 800233c:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffc2 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 8002344:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6979      	ldr	r1, [r7, #20]
 800234a:	4618      	mov	r0, r3
 800234c:	f001 f9e2 	bl	8003714 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj>
 8002350:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681c      	ldr	r4, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff feaf 	bl	80020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 8002366:	4603      	mov	r3, r0
		  __new_finish
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4629      	mov	r1, r5
 800236c:	4620      	mov	r0, r4
 800236e:	f001 f9e5 	bl	800373c <_ZSt34__uninitialized_move_if_noexcept_aIPPhS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002372:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fea4 	bl	80020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 800237c:	4603      	mov	r3, r0
		  __new_finish =
 800237e:	461a      	mov	r2, r3
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	68b8      	ldr	r0, [r7, #8]
 8002384:	f001 f96f 	bl	8003666 <_ZSt27__uninitialized_default_n_aIPPhjS0_ET_S2_T0_RSaIT1_E>
 8002388:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681c      	ldr	r4, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fe95 	bl	80020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 800239a:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800239c:	461a      	mov	r2, r3
 800239e:	4629      	mov	r1, r5
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7ff fe9a 	bl	80020da <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 80023ba:	461a      	mov	r2, r3
 80023bc:	f001 f828 	bl	8003410 <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j>
	      this->_M_impl._M_start = __new_start;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	441a      	add	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
    }
 80023d8:	bf00      	nop
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bdb0      	pop	{r4, r5, r7, pc}
 80023e0:	0800c180 	.word	0x0800c180

080023e4 <_ZNSt6vectorIPhSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685c      	ldr	r4, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe65 	bl	80020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4621      	mov	r1, r4
 8002400:	6838      	ldr	r0, [r7, #0]
 8002402:	f7ff fe6a 	bl	80020da <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
      }
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	105b      	asrs	r3, r3, #1
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <_ZNSt6vectorItSaItEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
      if (__n != 0)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d06d      	beq.n	8002524 <_ZNSt6vectorItSaItEE17_M_default_appendEj+0xec>
	  if (size_type(this->_M_impl._M_end_of_storage
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	105b      	asrs	r3, r3, #1
 8002456:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4293      	cmp	r3, r2
 800245c:	d80f      	bhi.n	800247e <_ZNSt6vectorItSaItEE17_M_default_appendEj+0x46>
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fe53 	bl	8002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800246a:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800246c:	461a      	mov	r2, r3
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	4620      	mov	r0, r4
 8002472:	f001 f97c 	bl	800376e <_ZSt27__uninitialized_default_n_aIPtjtET_S1_T0_RSaIT1_E>
 8002476:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]
    }
 800247c:	e052      	b.n	8002524 <_ZNSt6vectorItSaItEE17_M_default_appendEj+0xec>
	      const size_type __len =
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <_ZNSt6vectorItSaItEE17_M_default_appendEj+0xf4>)
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 f982 	bl	800378c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 8002488:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffc2 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 8002490:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	4618      	mov	r0, r3
 8002498:	f001 f9c0 	bl	800381c <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 800249c:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681c      	ldr	r4, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fe2f 	bl	8002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80024b2:	4603      	mov	r3, r0
		  __new_finish
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4629      	mov	r1, r5
 80024b8:	4620      	mov	r0, r4
 80024ba:	f001 f9c3 	bl	8003844 <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 80024be:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fe24 	bl	8002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80024c8:	4603      	mov	r3, r0
		  __new_finish =
 80024ca:	461a      	mov	r2, r3
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f001 f94d 	bl	800376e <_ZSt27__uninitialized_default_n_aIPtjtET_S1_T0_RSaIT1_E>
 80024d4:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681c      	ldr	r4, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe15 	bl	8002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80024e6:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024e8:	461a      	mov	r2, r3
 80024ea:	4629      	mov	r1, r5
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff fe1a 	bl	8002126 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	105b      	asrs	r3, r3, #1
	      _M_deallocate(this->_M_impl._M_start,
 8002506:	461a      	mov	r2, r3
 8002508:	f000 ffb7 	bl	800347a <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
	      this->_M_impl._M_start = __new_start;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	441a      	add	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]
    }
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bdb0      	pop	{r4, r5, r7, pc}
 800252c:	0800c180 	.word	0x0800c180

08002530 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685c      	ldr	r4, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fde5 	bl	8002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4621      	mov	r1, r4
 800254c:	6838      	ldr	r0, [r7, #0]
 800254e:	f7ff fdea 	bl	8002126 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	605a      	str	r2, [r3, #4]
      }
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}

08002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>:
    size() const _GLIBCXX_NOEXCEPT
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    { return size_type(end() - begin()); }
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f001 f981 	bl	8003876 <_ZNKSt6vectorIbSaIbEE3endEv>
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	f001 f98a 	bl	8003894 <_ZNKSt6vectorIbSaIbEE5beginEv>
 8002580:	f107 0210 	add.w	r2, r7, #16
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fde4 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8002590:	4603      	mov	r3, r0
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_ZNSt6vectorIbSaIbEE15_M_erase_at_endESt13_Bit_iterator>:
      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	e883 0006 	stmia.w	r3, {r1, r2}
    { this->_M_impl._M_finish = __pos; }
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3308      	adds	r3, #8
 80025ac:	1d3a      	adds	r2, r7, #4
 80025ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_ZNSt6vectorIbSaIbEE6insertESt19_Bit_const_iteratorjRKb>:
    insert(const_iterator __position, size_type __n, const bool& __x)
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08e      	sub	sp, #56	; 0x38
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	4639      	mov	r1, r7
 80025ce:	e881 000c 	stmia.w	r1, {r2, r3}
      difference_type __offset = __position - cbegin();
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 f969 	bl	80038b0 <_ZNKSt6vectorIbSaIbEE6cbeginEv>
 80025de:	f107 0214 	add.w	r2, r7, #20
 80025e2:	463b      	mov	r3, r7
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fdb6 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 80025ec:	62f8      	str	r0, [r7, #44]	; 0x2c
      _M_fill_insert(__position._M_const_cast(), __n, __x);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	463a      	mov	r2, r7
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fe92 	bl	8001320 <_ZNKSt19_Bit_const_iterator13_M_const_castEv>
 80025fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	f107 021c 	add.w	r2, r7, #28
 8002608:	ca06      	ldmia	r2, {r1, r2}
 800260a:	68b8      	ldr	r0, [r7, #8]
 800260c:	f001 f95e 	bl	80038cc <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb>
      return begin() + __offset;
 8002610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc6a 	bl	8001ef0 <_ZNSt6vectorIbSaIbEE5beginEv>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fe1e 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
    }
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	3730      	adds	r7, #48	; 0x30
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
      if (__n != 0)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06a      	beq.n	800271a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xe6>
	  if (size_type(this->_M_impl._M_end_of_storage
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4293      	cmp	r3, r2
 8002656:	d80f      	bhi.n	8002678 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x44>
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fa22 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002664:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002666:	461a      	mov	r2, r3
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	4620      	mov	r0, r4
 800266c:	f001 fa27 	bl	8003abe <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8002670:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	605a      	str	r2, [r3, #4]
    }
 8002676:	e050      	b.n	800271a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xe6>
	      const size_type __len =
 8002678:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xf0>)
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f001 fa2d 	bl	8003adc <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8002682:	6178      	str	r0, [r7, #20]
	      const size_type __old_size = this->size();
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fb15 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800268a:	6138      	str	r0, [r7, #16]
	      pointer __new_start(this->_M_allocate(__len));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6979      	ldr	r1, [r7, #20]
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fa6b 	bl	8003b6c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8002696:	60f8      	str	r0, [r7, #12]
	      pointer __new_finish(__new_start);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	60bb      	str	r3, [r7, #8]
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681c      	ldr	r4, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685d      	ldr	r5, [r3, #4]
		     __new_start, _M_get_Tp_allocator());
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f9fe 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80026ac:	4603      	mov	r3, r0
		  __new_finish
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4629      	mov	r1, r5
 80026b2:	4620      	mov	r0, r4
 80026b4:	f001 fa6e 	bl	8003b94 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80026b8:	60b8      	str	r0, [r7, #8]
						     _M_get_Tp_allocator());
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 f9f3 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80026c2:	4603      	mov	r3, r0
		  __new_finish =
 80026c4:	461a      	mov	r2, r3
 80026c6:	6839      	ldr	r1, [r7, #0]
 80026c8:	68b8      	ldr	r0, [r7, #8]
 80026ca:	f001 f9f8 	bl	8003abe <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80026ce:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f9e4 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80026e0:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80026e2:	461a      	mov	r2, r3
 80026e4:	4629      	mov	r1, r5
 80026e6:	4620      	mov	r0, r4
 80026e8:	f001 fa6d 	bl	8003bc6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 80026fe:	461a      	mov	r2, r3
 8002700:	f001 fa6f 	bl	8003be2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]
    }
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	0800c180 	.word	0x0800c180

08002728 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685c      	ldr	r4, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f9b5 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4621      	mov	r1, r4
 8002744:	6838      	ldr	r0, [r7, #0]
 8002746:	f001 fa3e 	bl	8003bc6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]
      }
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 800278e:	b580      	push	{r7, lr}
 8002790:	b098      	sub	sp, #96	; 0x60
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 800279c:	f107 0208 	add.w	r2, r7, #8
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 fa2e 	bl	8003c08 <_ZN9__gnu_cxxeqIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x28>
	return __last;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	e0c6      	b.n	8002944 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
      else if (__last  == __middle)
 80027b6:	f107 0208 	add.w	r2, r7, #8
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fa22 	bl	8003c08 <_ZN9__gnu_cxxeqIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x40>
	return __first;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	e0ba      	b.n	8002944 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
      _Distance __n = __last   - __first;
 80027ce:	f107 020c 	add.w	r2, r7, #12
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 fa2e 	bl	8003c38 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80027dc:	4603      	mov	r3, r0
 80027de:	643b      	str	r3, [r7, #64]	; 0x40
      _Distance __k = __middle - __first;
 80027e0:	f107 020c 	add.w	r2, r7, #12
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fa24 	bl	8003c38 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80027f0:	4603      	mov	r3, r0
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (__k == __n - __k)
 80027f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f8:	1ad2      	subs	r2, r2, r3
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f001 fa33 	bl	8003c70 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_>
	  return __middle;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	e09a      	b.n	8002944 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
      _RandomAccessIterator __p = __first;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
      _RandomAccessIterator __ret = __first + (__last - __middle);
 8002812:	f107 0208 	add.w	r2, r7, #8
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f001 fa0c 	bl	8003c38 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002820:	4602      	mov	r2, r0
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fa63 	bl	8001cf4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 800282e:	4603      	mov	r3, r0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__k < __n - __k)
 8002832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002836:	1ad2      	subs	r2, r2, r3
 8002838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283a:	429a      	cmp	r2, r3
 800283c:	dd3c      	ble.n	80028b8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x12a>
	      _RandomAccessIterator __q = __p + __k;
 800283e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fa54 	bl	8001cf4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 800284c:	4603      	mov	r3, r0
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002850:	2300      	movs	r3, #0
 8002852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800285c:	429a      	cmp	r2, r3
 800285e:	da11      	bge.n	8002884 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xf6>
		  std::iter_swap(__p, __q);
 8002860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002862:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002864:	f001 fa7e 	bl	8003d64 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>
		  ++__p;
 8002868:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fa90 	bl	8003d92 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
		  ++__q;
 8002872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002876:	4618      	mov	r0, r3
 8002878:	f001 fa8b 	bl	8003d92 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 800287c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287e:	3301      	adds	r3, #1
 8002880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002882:	e7e7      	b.n	8002854 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xc6>
	      __n %= __k;
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002888:	fb93 f1f2 	sdiv	r1, r3, r2
 800288c:	fb02 f201 	mul.w	r2, r2, r1
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	643b      	str	r3, [r7, #64]	; 0x40
	      if (__n == 0)
 8002894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x110>
		return __ret;
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	e052      	b.n	8002944 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
	      std::swap(__n, __k);
 800289e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fa8e 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 80028ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	e7bc      	b.n	8002832 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 80028b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
	      _RandomAccessIterator __q = __p + __n;
 80028c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fa13 	bl	8001cf4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEplEi>
 80028ce:	4603      	mov	r3, r0
 80028d0:	623b      	str	r3, [r7, #32]
	      __p = __q - __k;
 80028d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d4:	f107 0320 	add.w	r3, r7, #32
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fa26 	bl	8003d2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmiEi>
 80028e0:	4603      	mov	r3, r0
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80028e4:	2300      	movs	r3, #0
 80028e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80028e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028f0:	429a      	cmp	r2, r3
 80028f2:	da11      	bge.n	8002918 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x18a>
		  --__p;
 80028f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fa85 	bl	8003e08 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmmEv>
		  --__q;
 80028fe:	f107 0320 	add.w	r3, r7, #32
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fa80 	bl	8003e08 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmmEv>
		  std::iter_swap(__p, __q);
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800290c:	f001 fa2a 	bl	8003d64 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002912:	3301      	adds	r3, #1
 8002914:	65bb      	str	r3, [r7, #88]	; 0x58
 8002916:	e7e7      	b.n	80028e8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x15a>
	      __n %= __k;
 8002918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800291c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002920:	fb02 f201 	mul.w	r2, r2, r1
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	643b      	str	r3, [r7, #64]	; 0x40
	      if (__n == 0)
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1a4>
		return __ret;
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	e008      	b.n	8002944 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0x1b6>
	      std::swap(__n, __k);
 8002932:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f001 fa44 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8002942:	e776      	b.n	8002832 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES3_IS5_SaIS5_EEEEEET_SA_SA_SA_St26random_access_iterator_tag+0xa4>
    }
 8002944:	4618      	mov	r0, r3
 8002946:	3760      	adds	r7, #96	; 0x60
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b095      	sub	sp, #84	; 0x54
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 800297a:	f107 0208 	add.w	r2, r7, #8
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fa50 	bl	8003e2a <_ZN9__gnu_cxxeqIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x28>
	return __last;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	e158      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
      else if (__last  == __middle)
 8002994:	f107 0208 	add.w	r2, r7, #8
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f001 fa44 	bl	8003e2a <_ZN9__gnu_cxxeqIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x40>
	return __first;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	e14c      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 fa50 	bl	8003e5a <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80029ba:	4603      	mov	r3, r0
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __k = __middle - __first;
 80029be:	f107 020c 	add.w	r2, r7, #12
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fa46 	bl	8003e5a <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80029ce:	4603      	mov	r3, r0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__k == __n - __k)
 80029d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	1ad2      	subs	r2, r2, r3
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	429a      	cmp	r2, r3
 80029dc:	d106      	bne.n	80029ec <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f001 fa4f 	bl	8003e86 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
	  return __middle;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	e12c      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 80029f0:	f107 0208 	add.w	r2, r7, #8
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fa2e 	bl	8003e5a <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80029fe:	4602      	mov	r2, r0
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f9d0 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__k < __n - __k)
 8002a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f340 8081 	ble.w	8002b20 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d140      	bne.n	8002aa6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8002a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fa50 	bl	8003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fa58 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002a36:	4603      	mov	r3, r0
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8002a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f9b2 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f9aa 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f001 fa4c 	bl	8003efc <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fa3c 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002a6e:	4604      	mov	r4, r0
 8002a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f997 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 fa4f 	bl	8003f2c <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
 8002a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fa19 	bl	8003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	6013      	str	r3, [r2, #0]
		  return __ret;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	e0cf      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f97c 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	da11      	bge.n	8002aec <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x180>
		  std::iter_swap(__p, __q);
 8002ac8:	6a39      	ldr	r1, [r7, #32]
 8002aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002acc:	f001 fa47 	bl	8003f5e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>
		  ++__p;
 8002ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fa59 	bl	8003f8c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
		  ++__q;
 8002ada:	f107 0320 	add.w	r3, r7, #32
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 fa54 	bl	8003f8c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aea:	e7e7      	b.n	8002abc <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x150>
	      __n %= __k;
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af0:	fb93 f1f2 	sdiv	r1, r3, r2
 8002af4:	fb02 f201 	mul.w	r2, r2, r1
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x19a>
		return __ret;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	e09f      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002b06:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 f95a 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8002b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	e777      	b.n	8002a10 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 8002b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d149      	bne.n	8002bc2 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f938 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f9f0 	bl	8003f2c <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 f9ba 	bl	8003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f9c2 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002b62:	4603      	mov	r3, r0
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f91b 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002b76:	4603      	mov	r3, r0
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 f9d3 	bl	8003f2c <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 8002b86:	4604      	mov	r4, r0
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f90b 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b9e:	f001 fa05 	bl	8003fac <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
		  *__p = _GLIBCXX_MOVE(__t);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f99d 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002bac:	4604      	mov	r4, r0
 8002bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f98b 	bl	8003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	6013      	str	r3, [r2, #0]
		  return __ret;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	e041      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 8002bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f8ee 	bl	8001dac <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEplEi>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	f107 0318 	add.w	r3, r7, #24
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f9a5 	bl	8003f2c <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>
 8002be2:	4603      	mov	r3, r0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002be6:	2300      	movs	r3, #0
 8002be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	da11      	bge.n	8002c1a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2ae>
		  --__p;
 8002bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 f9ee 	bl	8003fdc <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmmEv>
		  --__q;
 8002c00:	f107 0318 	add.w	r3, r7, #24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 f9e9 	bl	8003fdc <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmmEv>
		  std::iter_swap(__p, __q);
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0e:	f001 f9a6 	bl	8003f5e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c14:	3301      	adds	r3, #1
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c18:	e7e7      	b.n	8002bea <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x27e>
	      __n %= __k;
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c22:	fb02 f201 	mul.w	r2, r2, r1
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	e008      	b.n	8002c46 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002c34:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f8c3 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8002c44:	e6e4      	b.n	8002a10 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS3_SaIS3_EEEEEET_S9_S9_S9_St26random_access_iterator_tag+0xa4>
    }
 8002c46:	4618      	mov	r0, r3
 8002c48:	3754      	adds	r7, #84	; 0x54
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b095      	sub	sp, #84	; 0x54
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8002c7c:	f107 0208 	add.w	r2, r7, #8
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f9b8 	bl	8003ffc <_ZN9__gnu_cxxeqIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	e158      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last  == __middle)
 8002c96:	f107 0208 	add.w	r2, r7, #8
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 f9ac 	bl	8003ffc <_ZN9__gnu_cxxeqIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	e14c      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 8002cae:	f107 020c 	add.w	r2, r7, #12
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 f9b8 	bl	800402c <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __k = __middle - __first;
 8002cc0:	f107 020c 	add.w	r2, r7, #12
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f9ae 	bl	800402c <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__k == __n - __k)
 8002cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f001 f9b7 	bl	8004058 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>
	  return __middle;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	e12c      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 8002cf2:	f107 0208 	add.w	r2, r7, #8
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f996 	bl	800402c <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f8a8 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__k < __n - __k)
 8002d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	f340 8081 	ble.w	8002e22 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d140      	bne.n	8002da8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8002d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 f9b8 	bl	80040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 f9c0 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	83fb      	strh	r3, [r7, #30]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8002d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f88a 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f882 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4620      	mov	r0, r4
 8002d62:	f001 f9b4 	bl	80040ce <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8002d66:	f107 031e 	add.w	r3, r7, #30
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f9a4 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002d70:	4604      	mov	r4, r0
 8002d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f86f 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002d80:	4603      	mov	r3, r0
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f9b7 	bl	80040fe <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002d90:	4603      	mov	r3, r0
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
 8002d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 f981 	bl	80040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	8822      	ldrh	r2, [r4, #0]
 8002da2:	801a      	strh	r2, [r3, #0]
		  return __ret;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	e0cf      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 8002da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f854 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002db6:	4603      	mov	r3, r0
 8002db8:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	da11      	bge.n	8002dee <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x180>
		  std::iter_swap(__p, __q);
 8002dca:	6a39      	ldr	r1, [r7, #32]
 8002dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dce:	f001 f9af 	bl	8004130 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>
		  ++__p;
 8002dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 f9c1 	bl	800415e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
		  ++__q;
 8002ddc:	f107 0320 	add.w	r3, r7, #32
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 f9bc 	bl	800415e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de8:	3301      	adds	r3, #1
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dec:	e7e7      	b.n	8002dbe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x150>
	      __n %= __k;
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	fb93 f1f2 	sdiv	r1, r3, r2
 8002df6:	fb02 f201 	mul.w	r2, r2, r1
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	e09f      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002e08:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 ffd9 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e20:	e777      	b.n	8002d12 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 8002e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d149      	bne.n	8002ec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8002e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f810 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	643b      	str	r3, [r7, #64]	; 0x40
 8002e42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e46:	2101      	movs	r1, #1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f958 	bl	80040fe <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f922 	bl	80040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 f92a 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002e64:	4603      	mov	r3, r0
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	82fb      	strh	r3, [r7, #22]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8002e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fff3 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f93b 	bl	80040fe <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe ffe3 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea0:	f001 f96d 	bl	800417e <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 8002ea4:	f107 0316 	add.w	r3, r7, #22
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f905 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 f8f3 	bl	80040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	8822      	ldrh	r2, [r4, #0]
 8002ebe:	801a      	strh	r2, [r3, #0]
		  return __ret;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	e041      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 8002ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe ffc6 	bl	8001e5e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEplEi>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 8002ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed8:	f107 0318 	add.w	r3, r7, #24
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f90d 	bl	80040fe <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	da11      	bge.n	8002f1c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2ae>
		  --__p;
 8002ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 f956 	bl	80041ae <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmmEv>
		  --__q;
 8002f02:	f107 0318 	add.w	r3, r7, #24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f951 	bl	80041ae <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmmEv>
		  std::iter_swap(__p, __q);
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f10:	f001 f90e 	bl	8004130 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8002f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f16:	3301      	adds	r3, #1
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f1a:	e7e7      	b.n	8002eec <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x27e>
	      __n %= __k;
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f20:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f24:	fb02 f201 	mul.w	r2, r2, r1
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
	      if (__n == 0)
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	e008      	b.n	8002f48 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8002f36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002f3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 ff42 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8002f46:	e6e4      	b.n	8002d12 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3754      	adds	r7, #84	; 0x54
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8002f66:	b082      	sub	sp, #8
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b0b9      	sub	sp, #228	; 0xe4
 8002f6c:	af04      	add	r7, sp, #16
 8002f6e:	6178      	str	r0, [r7, #20]
 8002f70:	f107 000c 	add.w	r0, r7, #12
 8002f74:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      if (__first == __middle)
 8002f7c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f8bb 	bl	8001102 <_ZNKSt18_Bit_iterator_baseeqERKS_>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x3e>
	return __last;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f9e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002fa2:	e1e4      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
      else if (__last  == __middle)
 8002fa4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002fa8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f8a7 	bl	8001102 <_ZNKSt18_Bit_iterator_baseeqERKS_>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x66>
	return __first;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f107 030c 	add.w	r3, r7, #12
 8002fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc6:	e882 0003 	stmia.w	r2, {r0, r1}
 8002fca:	e1d0      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
      _Distance __n = __last   - __first;
 8002fcc:	f107 020c 	add.w	r2, r7, #12
 8002fd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f8be 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
      _Distance __k = __middle - __first;
 8002fe0:	f107 020c 	add.w	r2, r7, #12
 8002fe4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe f8b4 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
      if (__k == __n - __k)
 8002ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d11c      	bne.n	800303a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0xd4>
	  std::swap_ranges(__first, __middle, __middle);
 8003000:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003004:	aa01      	add	r2, sp, #4
 8003006:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800300a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800300e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301c:	f107 020c 	add.w	r2, r7, #12
 8003020:	ca06      	ldmia	r2, {r1, r2}
 8003022:	4620      	mov	r0, r4
 8003024:	f001 f8d3 	bl	80041ce <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_>
	  return __middle;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	461a      	mov	r2, r3
 800302c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003030:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003034:	e882 0003 	stmia.w	r2, {r0, r1}
 8003038:	e199      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
      _RandomAccessIterator __p = __first;
 800303a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800303e:	f107 020c 	add.w	r2, r7, #12
 8003042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003046:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __ret = __first + (__last - __middle);
 800304a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800304e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe f87f 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 800305a:	4602      	mov	r2, r0
 800305c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003060:	f107 010c 	add.w	r1, r7, #12
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe f8fe 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
	  if (__k < __n - __k)
 800306a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003072:	429a      	cmp	r2, r3
 8003074:	f340 80b2 	ble.w	80031dc <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x276>
	      if (__is_pod(_ValueType) && __k == 1)
 8003078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307a:	2b01      	cmp	r3, #1
 800307c:	d163      	bne.n	8003146 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x1e0>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 800307e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003082:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe f89f 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 800308e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003092:	4618      	mov	r0, r3
 8003094:	f001 f8ce 	bl	8004234 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8003098:	4603      	mov	r3, r0
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ff43 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 80030a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80030aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030ae:	2201      	movs	r2, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe f8d8 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 80030b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe f8d0 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 80030c6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80030ca:	aa01      	add	r2, sp, #4
 80030cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80030d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030e2:	ca06      	ldmia	r2, {r1, r2}
 80030e4:	4620      	mov	r0, r4
 80030e6:	f001 f8b0 	bl	800424a <_ZSt4moveISt13_Bit_iteratorS0_ET0_T_S2_S1_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 80030ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe f8b6 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 80030fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030fe:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003102:	2201      	movs	r2, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f8cb 	bl	80012a0 <_ZNKSt13_Bit_iteratormiEi>
 800310a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800310e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe f859 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 800311a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff16 	bl	8002f50 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 8003124:	4603      	mov	r3, r0
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd ff0e 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
		  return __ret;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	461a      	mov	r2, r3
 8003138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800313c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003140:	e882 0003 	stmia.w	r2, {r0, r1}
 8003144:	e113      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      _RandomAccessIterator __q = __p + __k;
 8003146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800314c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe f888 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800315c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800315e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003166:	429a      	cmp	r2, r3
 8003168:	da17      	bge.n	800319a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x234>
		  std::iter_swap(__p, __q);
 800316a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316e:	cb0c      	ldmia	r3, {r2, r3}
 8003170:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003174:	c903      	ldmia	r1, {r0, r1}
 8003176:	f001 f898 	bl	80042aa <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>
		  ++__p;
 800317a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f838 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
		  ++__q;
 8003184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe f833 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 800318e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003192:	3301      	adds	r3, #1
 8003194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003198:	e7e0      	b.n	800315c <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x1f6>
	      __n %= __k;
 800319a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800319e:	fb93 f1f2 	sdiv	r1, r3, r2
 80031a2:	fb02 f201 	mul.w	r2, r2, r1
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
	      if (__n == 0)
 80031aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d108      	bne.n	80031c2 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x25c>
		return __ret;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80031c0:	e0d5      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      std::swap(__n, __k);
 80031c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80031c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fdfc 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 80031d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	643b      	str	r3, [r7, #64]	; 0x40
 80031da:	e746      	b.n	800306a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x104>
	      __k = __n - __k;
 80031dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
	      if (__is_pod(_ValueType) && __k == 1)
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d16c      	bne.n	80032c4 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x35e>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 80031ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe f836 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 80031fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031fe:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003202:	2201      	movs	r2, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe f84b 	bl	80012a0 <_ZNKSt13_Bit_iteratormiEi>
 800320a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800320e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd ffd9 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 800321a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f808 	bl	8004234 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8003224:	4603      	mov	r3, r0
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fe7d 	bl	8000f26 <_ZNKSt14_Bit_referencecvbEv>
 800322c:	4603      	mov	r3, r0
 800322e:	76fb      	strb	r3, [r7, #27]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8003230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003232:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003236:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe f813 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8003240:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003244:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003248:	2201      	movs	r2, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe f828 	bl	80012a0 <_ZNKSt13_Bit_iteratormiEi>
 8003250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003252:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003256:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f803 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8003260:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8003264:	aa01      	add	r2, sp, #4
 8003266:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800326a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800326e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800327c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003280:	ca06      	ldmia	r2, {r1, r2}
 8003282:	4620      	mov	r0, r4
 8003284:	f001 f836 	bl	80042f4 <_ZSt13move_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>
		  *__p = _GLIBCXX_MOVE(__t);
 8003288:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800328c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd ff9a 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8003298:	f107 031b 	add.w	r3, r7, #27
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fe57 	bl	8002f50 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 80032a2:	4603      	mov	r3, r0
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe4f 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
		  return __ret;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032be:	e882 0003 	stmia.w	r2, {r0, r1}
 80032c2:	e054      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      _RandomAccessIterator __q = __p + __n;
 80032c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd ffc9 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
	      __p = __q - __k;
 80032d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032d6:	463b      	mov	r3, r7
 80032d8:	f107 011c 	add.w	r1, r7, #28
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd ffdf 	bl	80012a0 <_ZNKSt13_Bit_iteratormiEi>
 80032e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032e6:	463a      	mov	r2, r7
 80032e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ec:	e883 0003 	stmia.w	r3, {r0, r1}
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003300:	429a      	cmp	r2, r3
 8003302:	da17      	bge.n	8003334 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x3ce>
		  --__p;
 8003304:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd ff80 	bl	800120e <_ZNSt13_Bit_iteratormmEv>
		  --__q;
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd ff7b 	bl	800120e <_ZNSt13_Bit_iteratormmEv>
		  std::iter_swap(__p, __q);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	cb0c      	ldmia	r3, {r2, r3}
 800331e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003322:	c903      	ldmia	r1, {r0, r1}
 8003324:	f000 ffc1 	bl	80042aa <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8003328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800332c:	3301      	adds	r3, #1
 800332e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003332:	e7e0      	b.n	80032f6 <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x390>
	      __n %= __k;
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003338:	fb93 f1f2 	sdiv	r1, r3, r2
 800333c:	fb02 f201 	mul.w	r2, r2, r1
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	647b      	str	r3, [r7, #68]	; 0x44
	      if (__n == 0)
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x3f6>
		return __ret;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	461a      	mov	r2, r3
 800334e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003356:	e882 0003 	stmia.w	r2, {r0, r1}
 800335a:	e008      	b.n	800336e <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x408>
	      std::swap(__n, __k);
 800335c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003360:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fd2f 	bl	8003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 800336c:	e67d      	b.n	800306a <_ZNSt3_V28__rotateISt13_Bit_iteratorEET_S2_S2_S2_St26random_access_iterator_tag+0x104>
    }
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	37d4      	adds	r7, #212	; 0xd4
 8003372:	46bd      	mov	sp, r7
 8003374:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003378:	b002      	add	sp, #8
 800337a:	4770      	bx	lr

0800337c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 ffe5 	bl	8004354 <_ZNSaISt6vectorIhSaIhEEEC1Ev>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
	{ }
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
	if (__p)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 ffd4 	bl	800436c <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE10deallocateERS3_PS2_j>
      }
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 ffe1 	bl	80043a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>
    }
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 ffee 	bl	80043d0 <_ZNSaIPhEC1Ev>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
	{ }
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
	if (__p)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 ffdd 	bl	80043e8 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>
      }
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_ZSt8_DestroyIPPhEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 ffdf 	bl	8004406 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPhEEvT_S4_>
    }
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 ffdf 	bl	800441c <_ZNSaItEC1Ev>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
	{ }
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>:
      _M_deallocate(pointer __p, size_t __n)
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
	if (__p)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ffce 	bl	8004434 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZSt8_DestroyIPtEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 ffd0 	bl	8004452 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implC1Ev>:
	_Bvector_impl()
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
	: _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 ffd0 	bl	8004468 <_ZNSaImEC1Ev>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe5e 	bl	800118c <_ZNSt13_Bit_iteratorC1Ev>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3308      	adds	r3, #8
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd fe59 	bl	800118c <_ZNSt13_Bit_iteratorC1Ev>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
	{ }
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>:
      _M_deallocate()
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02d      	beq.n	8003556 <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv+0x6c>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 ffbf 	bl	8004480 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	109b      	asrs	r3, r3, #2
 800350e:	617b      	str	r3, [r7, #20]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8003510:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800351c:	4413      	add	r3, r2
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4619      	mov	r1, r3
 8003522:	f000 ffc3 	bl	80044ac <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
	    _M_impl._M_start = _M_impl._M_finish = _Bit_iterator();
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fe2e 	bl	800118c <_ZNSt13_Bit_iteratorC1Ev>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3308      	adds	r3, #8
 8003534:	f107 020c 	add.w	r2, r7, #12
 8003538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800353c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f103 0208 	add.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800354c:	e883 0003 	stmia.w	r3, {r0, r1}
	    _M_impl._M_end_of_storage = _Bit_pointer();
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
      }
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZSt27__uninitialized_default_n_aIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 ffac 	bl	80044ca <_ZSt25__uninitialized_default_nIPSt6vectorIhSaIhEEjET_S4_T0_>
 8003572:	4603      	mov	r3, r0
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 ffae 	bl	80044ea <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 800358e:	4604      	mov	r4, r0
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7fe fde3 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8003596:	4603      	mov	r3, r0
 8003598:	1ae2      	subs	r2, r4, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	bf34      	ite	cc
 80035a0:	2301      	movcc	r3, #1
 80035a2:	2300      	movcs	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f006 fa10 	bl	80099d2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7fe fdd2 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80035b8:	4604      	mov	r4, r0
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7fe fdce 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80035c0:	4603      	mov	r3, r0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	f107 0208 	add.w	r2, r7, #8
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff9c 	bl	800450c <_ZSt3maxIjERKT_S2_S2_>
 80035d4:	4603      	mov	r3, r0
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4423      	add	r3, r4
 80035da:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7fe fdbd 	bl	800215c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d306      	bcc.n	80035f8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x7c>
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 ff7d 	bl	80044ea <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d904      	bls.n	8003602 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x86>
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 ff76 	bl	80044ea <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 80035fe:	4603      	mov	r3, r0
 8003600:	e000      	b.n	8003604 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x88>
 8003602:	697b      	ldr	r3, [r7, #20]
      }
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd90      	pop	{r4, r7, pc}

0800360c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x1e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 ff87 	bl	8004534 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8allocateERS3_j>
 8003626:	4603      	mov	r3, r0
 8003628:	e000      	b.n	800362c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x20>
 800362a:	2300      	movs	r3, #0
      }
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 ff85 	bl	8004552 <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIhSaIhEESt13move_iteratorIPS2_EET0_PT_>
 8003648:	4604      	mov	r4, r0
 800364a:	68b8      	ldr	r0, [r7, #8]
 800364c:	f000 ff81 	bl	8004552 <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIhSaIhEESt13move_iteratorIPS2_EET0_PT_>
 8003650:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4620      	mov	r0, r4
 8003658:	f000 ff8a 	bl	8004570 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorIhSaIhEEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 800365c:	4603      	mov	r3, r0
    }
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}

08003666 <_ZSt27__uninitialized_default_n_aIPPhjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 ff8c 	bl	8004592 <_ZSt25__uninitialized_default_nIPPhjET_S2_T0_>
 800367a:	4603      	mov	r3, r0
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 ff8e 	bl	80045b2 <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>
 8003696:	4604      	mov	r4, r0
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7fe fe15 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 800369e:	4603      	mov	r3, r0
 80036a0:	1ae2      	subs	r2, r4, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	bf34      	ite	cc
 80036a8:	2301      	movcc	r3, #1
 80036aa:	2300      	movcs	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f006 f98c 	bl	80099d2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7fe fe04 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80036c0:	4604      	mov	r4, r0
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7fe fe00 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80036c8:	4603      	mov	r3, r0
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	f107 0208 	add.w	r2, r7, #8
 80036d0:	f107 0310 	add.w	r3, r7, #16
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 ff18 	bl	800450c <_ZSt3maxIjERKT_S2_S2_>
 80036dc:	4603      	mov	r3, r0
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4423      	add	r3, r4
 80036e2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7fe fdef 	bl	80022c8 <_ZNKSt6vectorIPhSaIS0_EE4sizeEv>
 80036ea:	4602      	mov	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d306      	bcc.n	8003700 <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x7c>
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 ff5d 	bl	80045b2 <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>
 80036f8:	4602      	mov	r2, r0
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d904      	bls.n	800370a <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x86>
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 ff56 	bl	80045b2 <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>
 8003706:	4603      	mov	r3, r0
 8003708:	e000      	b.n	800370c <_ZNKSt6vectorIPhSaIS0_EE12_M_check_lenEjPKc+0x88>
 800370a:	697b      	ldr	r3, [r7, #20]
      }
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd90      	pop	{r4, r7, pc}

08003714 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj+0x1e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 ff53 	bl	80045d4 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>
 800372e:	4603      	mov	r3, r0
 8003730:	e000      	b.n	8003734 <_ZNSt12_Vector_baseIPhSaIS0_EE11_M_allocateEj+0x20>
 8003732:	2300      	movs	r3, #0
      }
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZSt34__uninitialized_move_if_noexcept_aIPPhS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 ff51 	bl	80045f2 <_ZSt32__make_move_if_noexcept_iteratorIPhSt13move_iteratorIPS0_EET0_PT_>
 8003750:	4604      	mov	r4, r0
 8003752:	68b8      	ldr	r0, [r7, #8]
 8003754:	f000 ff4d 	bl	80045f2 <_ZSt32__make_move_if_noexcept_iteratorIPhSt13move_iteratorIPS0_EET0_PT_>
 8003758:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4620      	mov	r0, r4
 8003760:	f000 ff56 	bl	8004610 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPhES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003764:	4603      	mov	r3, r0
    }
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bd90      	pop	{r4, r7, pc}

0800376e <_ZSt27__uninitialized_default_n_aIPtjtET_S1_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 ff58 	bl	8004632 <_ZSt25__uninitialized_default_nIPtjET_S1_T0_>
 8003782:	4603      	mov	r3, r0
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 ff5a 	bl	8004652 <_ZNKSt6vectorItSaItEE8max_sizeEv>
 800379e:	4604      	mov	r4, r0
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7fe fe37 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 80037a6:	4603      	mov	r3, r0
 80037a8:	1ae2      	subs	r2, r4, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	bf34      	ite	cc
 80037b0:	2301      	movcc	r3, #1
 80037b2:	2300      	movcs	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4618      	mov	r0, r3
 80037be:	f006 f908 	bl	80099d2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7fe fe26 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 80037c8:	4604      	mov	r4, r0
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7fe fe22 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	f107 0208 	add.w	r2, r7, #8
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe94 	bl	800450c <_ZSt3maxIjERKT_S2_S2_>
 80037e4:	4603      	mov	r3, r0
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4423      	add	r3, r4
 80037ea:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7fe fe11 	bl	8002414 <_ZNKSt6vectorItSaItEE4sizeEv>
 80037f2:	4602      	mov	r2, r0
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d306      	bcc.n	8003808 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x7c>
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 ff29 	bl	8004652 <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8003800:	4602      	mov	r2, r0
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4293      	cmp	r3, r2
 8003806:	d904      	bls.n	8003812 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x86>
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 ff22 	bl	8004652 <_ZNKSt6vectorItSaItEE8max_sizeEv>
 800380e:	4603      	mov	r3, r0
 8003810:	e000      	b.n	8003814 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x88>
 8003812:	697b      	ldr	r3, [r7, #20]
      }
 8003814:	4618      	mov	r0, r3
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}

0800381c <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x1e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 ff1f 	bl	8004674 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8003836:	4603      	mov	r3, r0
 8003838:	e000      	b.n	800383c <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x20>
 800383a:	2300      	movs	r3, #0
      }
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 ff1d 	bl	8004692 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8003858:	4604      	mov	r4, r0
 800385a:	68b8      	ldr	r0, [r7, #8]
 800385c:	f000 ff19 	bl	8004692 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8003860:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4620      	mov	r0, r4
 8003868:	f000 ff22 	bl	80046b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
 800386c:	4603      	mov	r3, r0
    }
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}

08003876 <_ZNKSt6vectorIbSaIbEE3endEv>:
    end() const _GLIBCXX_NOEXCEPT
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_finish; }
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3308      	adds	r3, #8
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fd38 	bl	80012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZNKSt6vectorIbSaIbEE5beginEv>:
    begin() const _GLIBCXX_NOEXCEPT
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_start; }
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fd2a 	bl	80012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZNKSt6vectorIbSaIbEE6cbeginEv>:
    cbegin() const noexcept
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
    { return this->_M_impl._M_start; }
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fd1c 	bl	80012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb>:
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b0a5      	sub	sp, #148	; 0x94
 80038d0:	af04      	add	r7, sp, #16
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	1d38      	adds	r0, r7, #4
 80038d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80038da:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80dc 	beq.w	8003a9c <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d0>
	return;
      if (capacity() - size() >= __n)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fef4 	bl	80046d2 <_ZNKSt6vectorIbSaIbEE8capacityEv>
 80038ea:	4604      	mov	r4, r0
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7fe fe37 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80038f2:	4603      	mov	r3, r0
 80038f4:	1ae3      	subs	r3, r4, r3
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d038      	beq.n	8003978 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0xac>
	{
	  std::copy_backward(__position, end(),
 8003906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fb00 	bl	8001f12 <_ZNSt6vectorIbSaIbEE3endEv>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f103 0108 	add.w	r1, r3, #8
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fca1 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8003924:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003928:	aa01      	add	r2, sp, #4
 800392a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800392e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003932:	e882 0003 	stmia.w	r2, {r0, r1}
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	1d3a      	adds	r2, r7, #4
 800393e:	ca06      	ldmia	r2, {r1, r2}
 8003940:	4620      	mov	r0, r4
 8003942:	f000 fee8 	bl	8004716 <_ZSt13copy_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>
			     this->_M_impl._M_finish + difference_type(__n));
	  std::fill(__position, __position + difference_type(__n), __x);
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800394c:	1d39      	adds	r1, r7, #4
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fc89 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8003954:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800395e:	cb0c      	ldmia	r3, {r2, r3}
 8003960:	1d39      	adds	r1, r7, #4
 8003962:	c903      	ldmia	r1, {r0, r1}
 8003964:	f7fd fd41 	bl	80013ea <_ZSt4fillSt13_Bit_iteratorS_RKb>
	  this->_M_impl._M_finish += difference_type(__n);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3308      	adds	r3, #8
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fc59 	bl	8001228 <_ZNSt13_Bit_iteratorpLEi>
 8003976:	e092      	b.n	8003a9e <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d2>
	}
      else
	{
	  const size_type __len = 
 8003978:	4a4a      	ldr	r2, [pc, #296]	; (8003aa4 <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d8>)
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fefa 	bl	8004776 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc>
 8003982:	67f8      	str	r0, [r7, #124]	; 0x7c
	    _M_check_len(__n, "vector<bool>::_M_fill_insert");
	  _Bit_pointer __q = this->_M_allocate(__len);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003988:	4618      	mov	r0, r3
 800398a:	f000 ff3c 	bl	8004806 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>
 800398e:	67b8      	str	r0, [r7, #120]	; 0x78
	  iterator __start(std::__addressof(*__q), 0);
 8003990:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003992:	f000 ff4b 	bl	800482c <_ZSt11__addressofImEPT_RS0_>
 8003996:	4601      	mov	r1, r0
 8003998:	f107 0320 	add.w	r3, r7, #32
 800399c:	2200      	movs	r2, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fc03 	bl	80011aa <_ZNSt13_Bit_iteratorC1EPmj>
	  iterator __i = _M_copy_aligned(begin(), __position, __start);
 80039a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe faa0 	bl	8001ef0 <_ZNSt6vectorIbSaIbEE5beginEv>
 80039b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fc9e 	bl	80012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80039c0:	1d3a      	adds	r2, r7, #4
 80039c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fc97 	bl	80012fc <_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator>
 80039ce:	f107 0418 	add.w	r4, r7, #24
 80039d2:	aa02      	add	r2, sp, #8
 80039d4:	f107 0320 	add.w	r3, r7, #32
 80039d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80039e0:	466a      	mov	r2, sp
 80039e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80039ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039f2:	cb0c      	ldmia	r3, {r2, r3}
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 ff23 	bl	8004842 <_ZNSt6vectorIbSaIbEE15_M_copy_alignedESt19_Bit_const_iteratorS2_St13_Bit_iterator>
	  std::fill(__i, __i + difference_type(__n), __x);
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a02:	f107 0118 	add.w	r1, r7, #24
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fc2d 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8003a0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a16:	cb0c      	ldmia	r3, {r2, r3}
 8003a18:	f107 0118 	add.w	r1, r7, #24
 8003a1c:	c903      	ldmia	r1, {r0, r1}
 8003a1e:	f7fd fce4 	bl	80013ea <_ZSt4fillSt13_Bit_iteratorS_RKb>
	  iterator __finish = std::copy(__position, end(),
 8003a22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a26:	68f9      	ldr	r1, [r7, #12]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fa72 	bl	8001f12 <_ZNSt6vectorIbSaIbEE3endEv>
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a34:	f107 0118 	add.w	r1, r7, #24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd fc14 	bl	8001266 <_ZNKSt13_Bit_iteratorplEi>
 8003a3e:	f107 0410 	add.w	r4, r7, #16
 8003a42:	aa01      	add	r2, sp, #4
 8003a44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a56:	1d3a      	adds	r2, r7, #4
 8003a58:	ca06      	ldmia	r2, {r1, r2}
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 ff23 	bl	80048a6 <_ZSt4copyISt13_Bit_iteratorS0_ET0_T_S2_S1_>
					__i + difference_type(__n));
	  this->_M_deallocate();
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fd41 	bl	80034ea <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
	  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
 8003a68:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003a6a:	f000 ff4c 	bl	8004906 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	611a      	str	r2, [r3, #16]
	  this->_M_impl._M_start = __start;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a86:	e882 0003 	stmia.w	r2, {r0, r1}
	  this->_M_impl._M_finish = __finish;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	f107 0210 	add.w	r2, r7, #16
 8003a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a96:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a9a:	e000      	b.n	8003a9e <_ZNSt6vectorIbSaIbEE14_M_fill_insertESt13_Bit_iteratorjb+0x1d2>
	return;
 8003a9c:	bf00      	nop
	}
    }
 8003a9e:	3784      	adds	r7, #132	; 0x84
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	0800c19c 	.word	0x0800c19c

08003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 ff27 	bl	8004920 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 ff29 	bl	8004940 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003aee:	4604      	mov	r4, r0
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7fe f8df 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003af6:	4603      	mov	r3, r0
 8003af8:	1ae2      	subs	r2, r4, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	bf34      	ite	cc
 8003b00:	2301      	movcc	r3, #1
 8003b02:	2300      	movcs	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f005 ff60 	bl	80099d2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7fe f8ce 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003b18:	4604      	mov	r4, r0
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7fe f8ca 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003b20:	4603      	mov	r3, r0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	f107 0208 	add.w	r2, r7, #8
 8003b28:	f107 0310 	add.w	r3, r7, #16
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fcec 	bl	800450c <_ZSt3maxIjERKT_S2_S2_>
 8003b34:	4603      	mov	r3, r0
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4423      	add	r3, r4
 8003b3a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7fe f8b9 	bl	8001cb4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d306      	bcc.n	8003b58 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7c>
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fef8 	bl	8004940 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d904      	bls.n	8003b62 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fef1 	bl	8004940 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	e000      	b.n	8003b64 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x88>
 8003b62:	697b      	ldr	r3, [r7, #20]
      }
 8003b64:	4618      	mov	r0, r3
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd90      	pop	{r4, r7, pc}

08003b6c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d006      	beq.n	8003b8a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6839      	ldr	r1, [r7, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 feee 	bl	8004962 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8003b86:	4603      	mov	r3, r0
 8003b88:	e000      	b.n	8003b8c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8003b8a:	2300      	movs	r3, #0
      }
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 feec 	bl	8004980 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8003ba8:	4604      	mov	r4, r0
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fee8 	bl	8004980 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8003bb0:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f000 fef1 	bl	800499e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8003bbc:	4603      	mov	r3, r0
    }
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd90      	pop	{r4, r7, pc}

08003bc6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fef3 	bl	80049c0 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
	if (__p)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 feed 	bl	80049da <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN9__gnu_cxxeqIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fef0 	bl	80049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f000 feeb 	bl	80049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429c      	cmp	r4, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd90      	pop	{r4, r7, pc}

08003c38 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fed8 	bl	80049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461c      	mov	r4, r3
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f000 fed2 	bl	80049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1ae3      	subs	r3, r4, r3
 8003c5a:	109b      	asrs	r3, r3, #2
 8003c5c:	4a03      	ldr	r2, [pc, #12]	; (8003c6c <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x34>)
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd90      	pop	{r4, r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	aaaaaaab 	.word	0xaaaaaaab

08003c70 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003c7c:	f107 0208 	add.w	r2, r7, #8
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fec1 	bl	8004a0e <_ZN9__gnu_cxxneIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_+0x3e>
	std::iter_swap(__first1, __first2);
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f865 	bl	8003d64 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f877 	bl	8003d92 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f873 	bl	8003d92 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>
 8003cac:	e7e6      	b.n	8003c7c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_ET0_T_SA_S9_+0xc>
      return __first2;
 8003cae:	687b      	ldr	r3, [r7, #4]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
      vector(vector&& __x) noexcept
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
      : _Base(std::move(__x)) { }
 8003cda:	687c      	ldr	r4, [r7, #4]
 8003cdc:	6838      	ldr	r0, [r7, #0]
 8003cde:	f7fe fd4b 	bl	8002778 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 feb5 	bl	8004a56 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}

08003cf6 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8003cf6:	b5b0      	push	{r4, r5, r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681c      	ldr	r4, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fecd 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003d0e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d10:	461a      	mov	r2, r3
 8003d12:	4629      	mov	r1, r5
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7ff ff56 	bl	8003bc6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 feb7 	bl	8004a90 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bdb0      	pop	{r4, r5, r7, pc}

08003d2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	425b      	negs	r3, r3
 8003d46:	440b      	add	r3, r1
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	f107 020c 	add.w	r2, r7, #12
 8003d4e:	f107 0308 	add.w	r3, r7, #8
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fcff 	bl	8002758 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES2_IS4_SaIS4_EEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ffa1 	bl	8003cb8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEdeEv>
 8003d76:	4604      	mov	r4, r0
 8003d78:	463b      	mov	r3, r7
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff9c 	bl	8003cb8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEdeEv>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4619      	mov	r1, r3
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 fe9c 	bl	8004ac2 <_ZSt4swapIhSaIhEEvRSt6vectorIT_T0_ES5_>
    }
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}

08003d92 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f103 020c 	add.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
	return *this;
 8003da6:	687b      	ldr	r3, [r7, #4]
      }
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffed 	bl	8003db4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003de0:	6838      	ldr	r0, [r7, #0]
 8003de2:	f7ff ffe7 	bl	8003db4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003de6:	4603      	mov	r3, r0
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ffde 	bl	8003db4 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	601a      	str	r2, [r3, #0]
    }
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1a3 020c 	sub.w	r2, r3, #12
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	601a      	str	r2, [r3, #0]
	return *this;
 8003e1c:	687b      	ldr	r3, [r7, #4]
      }
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZN9__gnu_cxxeqIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003e2a:	b590      	push	{r4, r7, lr}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fe51 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	681c      	ldr	r4, [r3, #0]
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	f000 fe4c 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003e44:	4603      	mov	r3, r0
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}

08003e5a <_ZN9__gnu_cxxmiIPPhSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003e5a:	b590      	push	{r4, r7, lr}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fe39 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461c      	mov	r4, r3
 8003e70:	6838      	ldr	r0, [r7, #0]
 8003e72:	f000 fe33 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8003e76:	4603      	mov	r3, r0
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	1ae3      	subs	r3, r4, r3
 8003e7c:	109b      	asrs	r3, r3, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}

08003e86 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003e92:	f107 0208 	add.w	r2, r7, #8
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fe28 	bl	8004af2 <_ZN9__gnu_cxxneIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0x3e>
	std::iter_swap(__first1, __first2);
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f857 	bl	8003f5e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003eb0:	f107 030c 	add.w	r3, r7, #12
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f869 	bl	8003f8c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f865 	bl	8003f8c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>
 8003ec2:	e7e6      	b.n	8003e92 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0xc>
      return __first2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
    }
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fe0a 	bl	8004b22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f000 fe06 	bl	8004b22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003f16:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fe0b 	bl	8004b38 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003f22:	4603      	mov	r3, r0
    }
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}

08003f2c <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	425b      	negs	r3, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	f107 020c 	add.w	r2, r7, #12
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fcfc 	bl	800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8003f5e:	b590      	push	{r4, r7, lr}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ffaf 	bl	8003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8003f70:	4604      	mov	r4, r0
 8003f72:	463b      	mov	r3, r7
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ffaa 	bl	8003ece <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEdeEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f000 fe00 	bl	8004b84 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
    }
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd90      	pop	{r4, r7, pc}

08003f8c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
	return *this;
 8003f9e:	687b      	ldr	r3, [r7, #4]
      }
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fdb2 	bl	8004b22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	f000 fdae 	bl	8004b22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003fc6:	4603      	mov	r3, r0
						__result);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f000 fdf8 	bl	8004bc2 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003fd2:	4603      	mov	r3, r0
    }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1f1a      	subs	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]
	return *this;
 8003fee:	687b      	ldr	r3, [r7, #4]
      }
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <_ZN9__gnu_cxxeqIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fe01 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800400c:	4603      	mov	r3, r0
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	6838      	ldr	r0, [r7, #0]
 8004012:	f000 fdfc 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8004016:	4603      	mov	r3, r0
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	429c      	cmp	r4, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fde9 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800403c:	4603      	mov	r3, r0
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461c      	mov	r4, r3
 8004042:	6838      	ldr	r0, [r7, #0]
 8004044:	f000 fde3 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8004048:	4603      	mov	r3, r0
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	1ae3      	subs	r3, r4, r3
 800404e:	105b      	asrs	r3, r3, #1
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8004064:	f107 0208 	add.w	r2, r7, #8
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fdd8 	bl	8004c24 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_+0x3e>
	std::iter_swap(__first1, __first2);
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f857 	bl	8004130 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8004082:	f107 030c 	add.w	r3, r7, #12
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f869 	bl	800415e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f865 	bl	800415e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8004094:	e7e6      	b.n	8004064 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_+0xc>
      return __first2;
 8004096:	687b      	ldr	r3, [r7, #4]
    }
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fdba 	bl	8004c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 80040e0:	4604      	mov	r4, r0
 80040e2:	68b8      	ldr	r0, [r7, #8]
 80040e4:	f000 fdb6 	bl	8004c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 80040e8:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4619      	mov	r1, r3
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 fdbb 	bl	8004c6a <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>
 80040f4:	4603      	mov	r3, r0
    }
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}

080040fe <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	425b      	negs	r3, r3
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	f107 020c 	add.w	r2, r7, #12
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe fd94 	bl	8002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ffaf 	bl	80040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8004142:	4604      	mov	r4, r0
 8004144:	463b      	mov	r3, r7
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff ffaa 	bl	80040a0 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 800414c:	4603      	mov	r3, r0
 800414e:	4619      	mov	r1, r3
 8004150:	4620      	mov	r0, r4
 8004152:	f000 fdb0 	bl	8004cb6 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}

0800415e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	1c9a      	adds	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
	return *this;
 8004170:	687b      	ldr	r3, [r7, #4]
      }
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800417e:	b590      	push	{r4, r7, lr}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fd62 	bl	8004c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 8004190:	4604      	mov	r4, r0
 8004192:	68b8      	ldr	r0, [r7, #8]
 8004194:	f000 fd5e 	bl	8004c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>
 8004198:	4603      	mov	r3, r0
						__result);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4619      	mov	r1, r3
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 fda8 	bl	8004cf4 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>
 80041a4:	4603      	mov	r3, r0
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}

080041ae <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
	--_M_current;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1e9a      	subs	r2, r3, #2
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]
	return *this;
 80041c0:	687b      	ldr	r3, [r7, #4]
      }
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 80041ce:	b082      	sub	sp, #8
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	1d38      	adds	r0, r7, #4
 80041da:	e880 0006 	stmia.w	r0, {r1, r2}
 80041de:	61fb      	str	r3, [r7, #28]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 80041e0:	f107 021c 	add.w	r2, r7, #28
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc ffa4 	bl	8001136 <_ZNKSt18_Bit_iterator_baseneERKS_>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d010      	beq.n	8004216 <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_+0x48>
	std::iter_swap(__first1, __first2);
 80041f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f8:	cb0c      	ldmia	r3, {r2, r3}
 80041fa:	1d39      	adds	r1, r7, #4
 80041fc:	c903      	ldmia	r1, {r0, r1}
 80041fe:	f000 f854 	bl	80042aa <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc fff5 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
 800420a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc fff0 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
 8004214:	e7e4      	b.n	80041e0 <_ZSt11swap_rangesISt13_Bit_iteratorS0_ET0_T_S2_S1_+0x12>
      return __first2;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	461a      	mov	r2, r3
 800421a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800421e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004222:	e882 0003 	stmia.w	r2, {r0, r1}
    }
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004230:	b002      	add	sp, #8
 8004232:	4770      	bx	lr

08004234 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <_ZSt4moveISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    move(_II __first, _II __last, _OI __result)
 800424a:	b082      	sub	sp, #8
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b08d      	sub	sp, #52	; 0x34
 8004250:	af04      	add	r7, sp, #16
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	1d38      	adds	r0, r7, #4
 8004256:	e880 0006 	stmia.w	r0, {r1, r2}
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800425c:	f107 0010 	add.w	r0, r7, #16
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004266:	f000 fd6b 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 800426a:	f107 0018 	add.w	r0, r7, #24
 800426e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004272:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004276:	f000 fd63 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
				       std::__miter_base(__last), __result);
 800427a:	68fc      	ldr	r4, [r7, #12]
 800427c:	aa01      	add	r2, sp, #4
 800427e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004286:	e882 0003 	stmia.w	r2, {r0, r1}
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f107 0210 	add.w	r2, r7, #16
 8004294:	ca06      	ldmia	r2, {r1, r2}
 8004296:	4620      	mov	r0, r4
 8004298:	f000 fd66 	bl	8004d68 <_ZSt14__copy_move_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	3724      	adds	r7, #36	; 0x24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80042a6:	b002      	add	sp, #8
 80042a8:	4770      	bx	lr

080042aa <_ZSt9iter_swapISt13_Bit_iteratorS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b089      	sub	sp, #36	; 0x24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	f107 0408 	add.w	r4, r7, #8
 80042b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80042b8:	4639      	mov	r1, r7
 80042ba:	e881 000c 	stmia.w	r1, {r2, r3}
      swap(*__a, *__b);
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	f107 0208 	add.w	r2, r7, #8
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fc ff7f 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	463a      	mov	r2, r7
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc ff78 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 80042dc:	f107 0318 	add.w	r3, r7, #24
 80042e0:	cb0c      	ldmia	r3, {r2, r3}
 80042e2:	f107 0110 	add.w	r1, r7, #16
 80042e6:	c903      	ldmia	r1, {r0, r1}
 80042e8:	f7fc fe68 	bl	8000fbc <_ZSt4swapSt14_Bit_referenceS_>
    }
 80042ec:	bf00      	nop
 80042ee:	3724      	adds	r7, #36	; 0x24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}

080042f4 <_ZSt13move_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80042f4:	b082      	sub	sp, #8
 80042f6:	b590      	push	{r4, r7, lr}
 80042f8:	b08d      	sub	sp, #52	; 0x34
 80042fa:	af04      	add	r7, sp, #16
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	1d38      	adds	r0, r7, #4
 8004300:	e880 0006 	stmia.w	r0, {r1, r2}
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8004306:	f107 0010 	add.w	r0, r7, #16
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004310:	f000 fd16 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 8004314:	f107 0018 	add.w	r0, r7, #24
 8004318:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800431c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004320:	f000 fd0e 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
						__result);
 8004324:	68fc      	ldr	r4, [r7, #12]
 8004326:	aa01      	add	r2, sp, #4
 8004328:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800432c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004330:	e882 0003 	stmia.w	r2, {r0, r1}
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f107 0210 	add.w	r2, r7, #16
 800433e:	ca06      	ldmia	r2, {r1, r2}
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fd49 	bl	8004dd8 <_ZSt23__copy_move_backward_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	3724      	adds	r7, #36	; 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004350:	b002      	add	sp, #8
 8004352:	4770      	bx	lr

08004354 <_ZNSaISt6vectorIhSaIhEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fd73 	bl	8004e48 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE10deallocateERS3_PS2_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fd6e 	bl	8004e5e <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d00a      	beq.n	80043c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ffe9 	bl	800438a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 80043b8:	4603      	mov	r3, r0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fd5c 	bl	8004e78 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>
	  for (; __first != __last; ++__first)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	330c      	adds	r3, #12
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	e7f0      	b.n	80043aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0xa>
	}
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_ZNSaIPhEC1Ev>:
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fd58 	bl	8004e8e <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZNSt16allocator_traitsISaIPhEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fd53 	bl	8004ea4 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPhEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <_ZNSaItEC1Ev>:
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fd4a 	bl	8004ebe <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fd45 	bl	8004ed4 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_ZNSaImEC1Ev>:
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fd3c 	bl	8004eee <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	  if (_M_end_of_storage)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(_M_end_of_storage[-1]) + 1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	3b04      	subs	r3, #4
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f9c8 	bl	800482c <_ZSt11__addressofImEPT_RS0_>
 800449c:	4603      	mov	r3, r0
 800449e:	3304      	adds	r3, #4
 80044a0:	e000      	b.n	80044a4 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 80044a2:	2300      	movs	r3, #0
	}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fd21 	bl	8004f04 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZSt25__uninitialized_default_nIPSt6vectorIhSaIhEEjET_S4_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fd1f 	bl	8004f1e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_>
 80044e0:	4603      	mov	r3, r0
    }
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd3b 	bl	8004f70 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fd2b 	bl	8004f58 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS3_>
 8004502:	4603      	mov	r3, r0
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d201      	bcs.n	8004526 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	e000      	b.n	8004528 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004526:	687b      	ldr	r3, [r7, #4]
    }
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800453e:	2200      	movs	r2, #0
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fd1f 	bl	8004f86 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIhSaIhEESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fd31 	bl	8004fc8 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEC1ES3_>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorIhSaIhEEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fd2f 	bl	8004fe6 <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorIhSaIhEEES4_ET0_T_S7_S6_>
 8004588:	4603      	mov	r3, r0
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <_ZSt25__uninitialized_default_nIPPhjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fd31 	bl	800500a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPhjEET_S4_T0_>
 80045a8:	4603      	mov	r3, r0
    }
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZNKSt6vectorIPhSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fd43 	bl	8005048 <_ZNKSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fd33 	bl	8005030 <_ZNSt16allocator_traitsISaIPhEE8max_sizeERKS1_>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZNSt16allocator_traitsISaIPhEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80045de:	2200      	movs	r2, #0
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fd3b 	bl	800505e <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <_ZSt32__make_move_if_noexcept_iteratorIPhSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fd4a 	bl	800509a <_ZNSt13move_iteratorIPPhEC1ES1_>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPhES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fd48 	bl	80050b8 <_ZSt18uninitialized_copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>
 8004628:	4603      	mov	r3, r0
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZSt25__uninitialized_default_nIPtjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fd4a 	bl	80050dc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPtjEET_S3_T0_>
 8004648:	4603      	mov	r3, r0
    }
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZNKSt6vectorItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fd5c 	bl	800511a <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8004662:	4603      	mov	r3, r0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd4c 	bl	8005102 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 800466a:	4603      	mov	r3, r0
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800467e:	2200      	movs	r2, #0
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fd54 	bl	8005130 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 8004688:	4603      	mov	r3, r0
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fd63 	bl	800516c <_ZNSt13move_iteratorIPtEC1ES0_>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fd61 	bl	800518a <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_ZNKSt6vectorIbSaIbEE8capacityEv>:
    capacity() const _GLIBCXX_NOEXCEPT
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
		       - begin()); }
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fecf 	bl	8004480 <_ZNKSt13_Bvector_baseISaIbEE13_Bvector_impl11_M_end_addrEv>
 80046e2:	4601      	mov	r1, r0
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	2200      	movs	r2, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fc fdf5 	bl	80012da <_ZNSt19_Bit_const_iteratorC1EPmj>
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff f8cc 	bl	8003894 <_ZNKSt6vectorIbSaIbEE5beginEv>
 80046fc:	f107 0210 	add.w	r2, r7, #16
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fd26 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 800470c:	4603      	mov	r3, r0
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <_ZSt13copy_backwardISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004716:	b082      	sub	sp, #8
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b08d      	sub	sp, #52	; 0x34
 800471c:	af04      	add	r7, sp, #16
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	1d38      	adds	r0, r7, #4
 8004722:	e880 0006 	stmia.w	r0, {r1, r2}
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004728:	f107 0010 	add.w	r0, r7, #16
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004732:	f000 fb05 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 8004736:	f107 0018 	add.w	r0, r7, #24
 800473a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800473e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004742:	f000 fafd 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
	       __result));
 8004746:	68fc      	ldr	r4, [r7, #12]
 8004748:	aa01      	add	r2, sp, #4
 800474a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800474e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004752:	e882 0003 	stmia.w	r2, {r0, r1}
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f107 0210 	add.w	r2, r7, #16
 8004760:	ca06      	ldmia	r2, {r1, r2}
 8004762:	4620      	mov	r0, r4
 8004764:	f000 fd23 	bl	80051ae <_ZSt23__copy_move_backward_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	3724      	adds	r7, #36	; 0x24
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004772:	b002      	add	sp, #8
 8004774:	4770      	bx	lr

08004776 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc>:
    _M_check_len(size_type __n, const char* __s) const
 8004776:	b590      	push	{r4, r7, lr}
 8004778:	b087      	sub	sp, #28
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
      if (max_size() - size() < __n)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fd4c 	bl	8005220 <_ZNKSt6vectorIbSaIbEE8max_sizeEv>
 8004788:	4604      	mov	r4, r0
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7fd fee8 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 8004790:	4603      	mov	r3, r0
 8004792:	1ae2      	subs	r2, r4, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	bf34      	ite	cc
 800479a:	2301      	movcc	r3, #1
 800479c:	2300      	movcs	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x36>
	__throw_length_error(__N(__s));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f005 f913 	bl	80099d2 <_ZSt20__throw_length_errorPKc>
      const size_type __len = size() + std::max(size(), __n);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7fd fed7 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80047b2:	4604      	mov	r4, r0
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7fd fed3 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80047ba:	4603      	mov	r3, r0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	f107 0208 	add.w	r2, r7, #8
 80047c2:	f107 0310 	add.w	r3, r7, #16
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fe9f 	bl	800450c <_ZSt3maxIjERKT_S2_S2_>
 80047ce:	4603      	mov	r3, r0
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4423      	add	r3, r4
 80047d4:	617b      	str	r3, [r7, #20]
      return (__len < size() || __len > max_size()) ? max_size() : __len;
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7fd fec2 	bl	8002560 <_ZNKSt6vectorIbSaIbEE4sizeEv>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d306      	bcc.n	80047f2 <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x7c>
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fd1b 	bl	8005220 <_ZNKSt6vectorIbSaIbEE8max_sizeEv>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d904      	bls.n	80047fc <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x86>
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fd14 	bl	8005220 <_ZNKSt6vectorIbSaIbEE8max_sizeEv>
 80047f8:	4603      	mov	r3, r0
 80047fa:	e000      	b.n	80047fe <_ZNKSt6vectorIbSaIbEE12_M_check_lenEjPKc+0x88>
 80047fc:	697b      	ldr	r3, [r7, #20]
    }
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd90      	pop	{r4, r7, pc}

08004806 <_ZNSt13_Bvector_baseISaIbEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004806:	b590      	push	{r4, r7, lr}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 8004810:	687c      	ldr	r4, [r7, #4]
 8004812:	6838      	ldr	r0, [r7, #0]
 8004814:	f000 f877 	bl	8004906 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>
 8004818:	4603      	mov	r3, r0
 800481a:	4619      	mov	r1, r3
 800481c:	4620      	mov	r0, r4
 800481e:	f000 fd1d 	bl	800525c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8004822:	4603      	mov	r3, r0
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bd90      	pop	{r4, r7, pc}

0800482c <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZNSt6vectorIbSaIbEE15_M_copy_alignedESt19_Bit_const_iteratorS2_St13_Bit_iterator>:
    _M_copy_aligned(const_iterator __first, const_iterator __last,
 8004842:	b590      	push	{r4, r7, lr}
 8004844:	b08f      	sub	sp, #60	; 0x3c
 8004846:	af04      	add	r7, sp, #16
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	4639      	mov	r1, r7
 800484e:	e881 000c 	stmia.w	r1, {r2, r3}
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fd0e 	bl	800527a <_ZSt4copyIPmS0_ET0_T_S2_S1_>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24
      return std::copy(const_iterator(__last._M_p, 0), __last,
 8004860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	2200      	movs	r2, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc fd36 	bl	80012da <_ZNSt19_Bit_const_iteratorC1EPmj>
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	2200      	movs	r2, #0
 8004874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004876:	4618      	mov	r0, r3
 8004878:	f7fc fc97 	bl	80011aa <_ZNSt13_Bit_iteratorC1EPmj>
		       iterator(__q, 0));
 800487c:	68fc      	ldr	r4, [r7, #12]
 800487e:	aa01      	add	r2, sp, #4
 8004880:	f107 031c 	add.w	r3, r7, #28
 8004884:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004888:	e882 0003 	stmia.w	r2, {r0, r1}
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	f107 0214 	add.w	r2, r7, #20
 8004896:	ca06      	ldmia	r2, {r1, r2}
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fd06 	bl	80052aa <_ZSt4copyISt19_Bit_const_iteratorSt13_Bit_iteratorET0_T_S3_S2_>
    }
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	372c      	adds	r7, #44	; 0x2c
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}

080048a6 <_ZSt4copyISt13_Bit_iteratorS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80048a6:	b082      	sub	sp, #8
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b08d      	sub	sp, #52	; 0x34
 80048ac:	af04      	add	r7, sp, #16
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	1d38      	adds	r0, r7, #4
 80048b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
	      (std::__miter_base(__first), std::__miter_base(__last),
 80048b8:	f107 0010 	add.w	r0, r7, #16
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80048c2:	f000 fa3d 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
 80048c6:	f107 0018 	add.w	r0, r7, #24
 80048ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80048d2:	f000 fa35 	bl	8004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>
	       __result));
 80048d6:	68fc      	ldr	r4, [r7, #12]
 80048d8:	aa01      	add	r2, sp, #4
 80048da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80048de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048e2:	e882 0003 	stmia.w	r2, {r0, r1}
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f107 0210 	add.w	r2, r7, #16
 80048f0:	ca06      	ldmia	r2, {r1, r2}
 80048f2:	4620      	mov	r0, r4
 80048f4:	f000 fd09 	bl	800530a <_ZSt14__copy_move_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	3724      	adds	r7, #36	; 0x24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004902:	b002      	add	sp, #8
 8004904:	4770      	bx	lr

08004906 <_ZNSt13_Bvector_baseISaIbEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	331f      	adds	r3, #31
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fd22 	bl	800537a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8004936:	4603      	mov	r3, r0
    }
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fd34 	bl	80053b8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004950:	4603      	mov	r3, r0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fd24 	bl	80053a0 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8004958:	4603      	mov	r3, r0
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800496c:	2200      	movs	r2, #0
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fd2c 	bl	80053ce <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8004976:	4603      	mov	r3, r0
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd39 	bl	8005406 <_ZNSt13move_iteratorIPhEC1ES0_>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fd37 	bl	8005424 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fd3b 	bl	8005448 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fd37 	bl	800545e <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_ZN9__gnu_cxxneIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004a0e:	b590      	push	{r4, r7, lr}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffed 	bl	80049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	681c      	ldr	r4, [r3, #0]
 8004a22:	6838      	ldr	r0, [r7, #0]
 8004a24:	f7ff ffe8 	bl	80049f8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fd3c 	bl	80054c4 <_ZNSaIhED1Ev>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&& __x) noexcept
 8004a56:	b590      	push	{r4, r7, lr}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
 8004a60:	687c      	ldr	r4, [r7, #4]
 8004a62:	6838      	ldr	r0, [r7, #0]
 8004a64:	f7ff f820 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fd04 	bl	8005478 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4619      	mov	r1, r3
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 fd0a 	bl	800548e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS0_>
      { this->_M_impl._M_swap_data(__x._M_impl); }
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fd2b 	bl	80054dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd90      	pop	{r4, r7, pc}

08004a90 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6819      	ldr	r1, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff f899 	bl	8003be2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ffc3 	bl	8004a3e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <_ZSt4swapIhSaIhEEvRSt6vectorIT_T0_ES5_>:
    { return !(__x < __y); }

  /// See std::vector::swap().
  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fd24 	bl	800551c <_ZNSt6vectorIhSaIhEE4swapERS1_>
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <_ZN9__gnu_cxxneIPPhSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004af2:	b590      	push	{r4, r7, lr}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ffed 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8004b02:	4603      	mov	r3, r0
 8004b04:	681c      	ldr	r4, [r3, #0]
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f7ff ffe8 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429c      	cmp	r4, r3
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd90      	pop	{r4, r7, pc}

08004b22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004b38:	b5b0      	push	{r4, r5, r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fd06 	bl	8005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	f000 fd02 	bl	8005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004b52:	4605      	mov	r5, r0
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fcfe 	bl	8005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fd06 	bl	8005572 <_ZSt13__copy_move_aILb1EPPhS1_ET1_T0_S3_S2_>
 8004b66:	4603      	mov	r3, r0
 8004b68:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004b6a:	f107 0214 	add.w	r2, r7, #20
 8004b6e:	f107 0310 	add.w	r3, r7, #16
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fd fee9 	bl	800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8004b7a:	693b      	ldr	r3, [r7, #16]
    }
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bdb0      	pop	{r4, r5, r7, pc}

08004b84 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff f9a9 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004b94:	4603      	mov	r3, r0
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004b9a:	6838      	ldr	r0, [r7, #0]
 8004b9c:	f7ff f9a3 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff f99a 	bl	8003ee6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	601a      	str	r2, [r3, #0]
    }
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004bc2:	b5b0      	push	{r4, r5, r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fcc1 	bl	8005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	68b8      	ldr	r0, [r7, #8]
 8004bd8:	f000 fcbd 	bl	8005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004bdc:	4605      	mov	r5, r0
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fcb9 	bl	8005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4629      	mov	r1, r5
 8004bea:	4620      	mov	r0, r4
 8004bec:	f000 fcd3 	bl	8005596 <_ZSt22__copy_move_backward_aILb1EPPhS1_ET1_T0_S3_S2_>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	617b      	str	r3, [r7, #20]
		   std::__niter_base(__result)));
 8004bf4:	f107 0214 	add.w	r2, r7, #20
 8004bf8:	f107 0310 	add.w	r3, r7, #16
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fd fea4 	bl	800294c <_ZN9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8004c04:	693b      	ldr	r3, [r7, #16]
    }
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bdb0      	pop	{r4, r5, r7, pc}

08004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ffed 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8004c34:	4603      	mov	r3, r0
 8004c36:	681c      	ldr	r4, [r3, #0]
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f7ff ffe8 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429c      	cmp	r4, r3
 8004c44:	bf14      	ite	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	2300      	moveq	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}

08004c54 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEET_S7_>:
    __miter_base(_Iterator __it)
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004c6a:	b5b0      	push	{r4, r5, r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fc9f 	bl	80055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	68b8      	ldr	r0, [r7, #8]
 8004c80:	f000 fc9b 	bl	80055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004c84:	4605      	mov	r5, r0
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fc97 	bl	80055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4629      	mov	r1, r5
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fc9f 	bl	80055d6 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004c9c:	f107 0214 	add.w	r2, r7, #20
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd ffd1 	bl	8002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8004cac:	693b      	ldr	r3, [r7, #16]
    }
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bdb0      	pop	{r4, r5, r7, pc}

08004cb6 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff f9f9 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	f7ff f9f3 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004cda:	f107 030e 	add.w	r3, r7, #14
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f9ea 	bl	80040b8 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	881a      	ldrh	r2, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	801a      	strh	r2, [r3, #0]
    }
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004cf4:	b5b0      	push	{r4, r5, r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fc5a 	bl	80055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004d06:	4604      	mov	r4, r0
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f000 fc56 	bl	80055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004d0e:	4605      	mov	r5, r0
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fc52 	bl	80055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 fc6c 	bl	80055fa <_ZSt22__copy_move_backward_aILb1EPtS0_ET1_T0_S2_S1_>
 8004d22:	4603      	mov	r3, r0
 8004d24:	617b      	str	r3, [r7, #20]
		   std::__niter_base(__result)));
 8004d26:	f107 0214 	add.w	r2, r7, #20
 8004d2a:	f107 0310 	add.w	r3, r7, #16
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd ff8c 	bl	8002c4e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8004d36:	693b      	ldr	r3, [r7, #16]
    }
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bdb0      	pop	{r4, r5, r7, pc}

08004d40 <_ZSt12__miter_baseISt13_Bit_iteratorET_S1_>:
    __miter_base(_Iterator __it)
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	461a      	mov	r2, r3
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d58:	e882 0003 	stmia.w	r2, {r0, r1}
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <_ZSt14__copy_move_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004d68:	b082      	sub	sp, #8
 8004d6a:	b590      	push	{r4, r7, lr}
 8004d6c:	b08f      	sub	sp, #60	; 0x3c
 8004d6e:	af04      	add	r7, sp, #16
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	1d38      	adds	r0, r7, #4
 8004d74:	e880 0006 	stmia.w	r0, {r1, r2}
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004d7a:	f107 0010 	add.w	r0, r7, #16
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d84:	f000 fc4b 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004d88:	f107 0018 	add.w	r0, r7, #24
 8004d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d94:	f000 fc43 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004d98:	f107 0020 	add.w	r0, r7, #32
 8004d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004da0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004da4:	f000 fc3b 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
					     std::__niter_base(__result)));
 8004da8:	68fc      	ldr	r4, [r7, #12]
 8004daa:	aa01      	add	r2, sp, #4
 8004dac:	f107 0320 	add.w	r3, r7, #32
 8004db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004db4:	e882 0003 	stmia.w	r2, {r0, r1}
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f107 0210 	add.w	r2, r7, #16
 8004dc2:	ca06      	ldmia	r2, {r1, r2}
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fc3e 	bl	8005646 <_ZSt13__copy_move_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	372c      	adds	r7, #44	; 0x2c
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004dd4:	b002      	add	sp, #8
 8004dd6:	4770      	bx	lr

08004dd8 <_ZSt23__copy_move_backward_a2ILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004dd8:	b082      	sub	sp, #8
 8004dda:	b590      	push	{r4, r7, lr}
 8004ddc:	b08f      	sub	sp, #60	; 0x3c
 8004dde:	af04      	add	r7, sp, #16
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	1d38      	adds	r0, r7, #4
 8004de4:	e880 0006 	stmia.w	r0, {r1, r2}
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  (std::__niter_base(__first), std::__niter_base(__last),
 8004dea:	f107 0010 	add.w	r0, r7, #16
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004df4:	f000 fc13 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004df8:	f107 0018 	add.w	r0, r7, #24
 8004dfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e00:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e04:	f000 fc0b 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 8004e08:	f107 0020 	add.w	r0, r7, #32
 8004e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e10:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e14:	f000 fc03 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
		   std::__niter_base(__result)));
 8004e18:	68fc      	ldr	r4, [r7, #12]
 8004e1a:	aa01      	add	r2, sp, #4
 8004e1c:	f107 0320 	add.w	r3, r7, #32
 8004e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e24:	e882 0003 	stmia.w	r2, {r0, r1}
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f107 0210 	add.w	r2, r7, #16
 8004e32:	ca06      	ldmia	r2, {r1, r2}
 8004e34:	4620      	mov	r0, r4
 8004e36:	f000 fc28 	bl	800568a <_ZSt22__copy_move_backward_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	372c      	adds	r7, #44	; 0x2c
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004e44:	b002      	add	sp, #8
 8004e46:	4770      	bx	lr

08004e48 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f004 fdac 	bl	80099c8 <_ZdlPv>
      }
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fe ff38 	bl	8003cf6 <_ZNSt6vectorIhSaIhEED1Ev>
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <_ZN9__gnu_cxx13new_allocatorIPhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <_ZN9__gnu_cxx13new_allocatorIPhE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004eb0:	68b8      	ldr	r0, [r7, #8]
 8004eb2:	f004 fd89 	bl	80099c8 <_ZdlPv>
      }
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(pointer __p, size_type)
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004ee0:	68b8      	ldr	r0, [r7, #8]
 8004ee2:	f004 fd71 	bl	80099c8 <_ZdlPv>
      }
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(pointer __p, size_type)
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004f10:	68b8      	ldr	r0, [r7, #8]
 8004f12:	f004 fd59 	bl	80099c8 <_ZdlPv>
      }
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, ++__cur)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_+0x30>
		std::_Construct(std::__addressof(*__cur));
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fa29 	bl	800438a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fbc7 	bl	80056ce <_ZSt10_ConstructISt6vectorIhSaIhEEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, ++__cur)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e7ee      	b.n	8004f2c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt6vectorIhSaIhEEjEET_S6_T0_+0xe>
	      return __cur;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
	}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fbc7 	bl	80056f4 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fbae 	bl	80056f4 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bf8c      	ite	hi
 8004fa0:	2301      	movhi	r3, #1
 8004fa2:	2300      	movls	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004faa:	f004 fd0f 	bl	80099cc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f004 fceb 	bl	8009994 <_Znwj>
 8004fbe:	4603      	mov	r3, r0
      }
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEC1ES3_>:
      move_iterator(iterator_type __i)
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorIhSaIhEEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fb88 	bl	8005710 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_>
 8005000:	4603      	mov	r3, r0
    }
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPhjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	461a      	mov	r2, r3
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fba4 	bl	800576e <_ZSt6fill_nIPPhjS0_ET_S2_T0_RKT1_>
 8005026:	4603      	mov	r3, r0
	}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <_ZNSt16allocator_traitsISaIPhEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fbac 	bl	8005796 <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>
 800503e:	4603      	mov	r3, r0
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <_ZNKSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fb93 	bl	8005796 <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>
 8005070:	4602      	mov	r2, r0
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4293      	cmp	r3, r2
 8005076:	bf8c      	ite	hi
 8005078:	2301      	movhi	r3, #1
 800507a:	2300      	movls	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <_ZN9__gnu_cxx13new_allocatorIPhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005082:	f004 fca3 	bl	80099cc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fc82 	bl	8009994 <_Znwj>
 8005090:	4603      	mov	r3, r0
      }
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZNSt13move_iteratorIPPhEC1ES1_>:
      move_iterator(iterator_type __i)
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <_ZSt18uninitialized_copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fb6e 	bl	80057ae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPhES4_EET0_T_S7_S6_>
 80050d2:	4603      	mov	r3, r0
    }
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPtjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80050e6:	2300      	movs	r3, #0
 80050e8:	81fb      	strh	r3, [r7, #14]
 80050ea:	f107 030e 	add.w	r3, r7, #14
 80050ee:	461a      	mov	r2, r3
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fb6b 	bl	80057ce <_ZSt6fill_nIPtjtET_S1_T0_RKT1_>
 80050f8:	4603      	mov	r3, r0
	}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fb73 	bl	80057f6 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 8005110:	4603      	mov	r3, r0
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fb5a 	bl	80057f6 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 8005142:	4602      	mov	r2, r0
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4293      	cmp	r3, r2
 8005148:	bf8c      	ite	hi
 800514a:	2301      	movhi	r3, #1
 800514c:	2300      	movls	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005154:	f004 fc3a 	bl	80099cc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f004 fc19 	bl	8009994 <_Znwj>
 8005162:	4603      	mov	r3, r0
      }
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZNSt13move_iteratorIPtEC1ES0_>:
      move_iterator(iterator_type __i)
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005196:	2301      	movs	r3, #1
 8005198:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fb35 	bl	800580e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>
 80051a4:	4603      	mov	r3, r0
    }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZSt23__copy_move_backward_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80051ae:	b082      	sub	sp, #8
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b08f      	sub	sp, #60	; 0x3c
 80051b4:	af04      	add	r7, sp, #16
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	1d38      	adds	r0, r7, #4
 80051ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
		  (std::__niter_base(__first), std::__niter_base(__last),
 80051c0:	f107 0010 	add.w	r0, r7, #16
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80051ca:	f000 fa28 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 80051ce:	f107 0018 	add.w	r0, r7, #24
 80051d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80051da:	f000 fa20 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 80051de:	f107 0020 	add.w	r0, r7, #32
 80051e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80051ea:	f000 fa18 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
		   std::__niter_base(__result)));
 80051ee:	68fc      	ldr	r4, [r7, #12]
 80051f0:	aa01      	add	r2, sp, #4
 80051f2:	f107 0320 	add.w	r3, r7, #32
 80051f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051fa:	e882 0003 	stmia.w	r2, {r0, r1}
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f107 0210 	add.w	r2, r7, #16
 8005208:	ca06      	ldmia	r2, {r1, r2}
 800520a:	4620      	mov	r0, r4
 800520c:	f000 fb0f 	bl	800582e <_ZSt22__copy_move_backward_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	372c      	adds	r7, #44	; 0x2c
 8005214:	46bd      	mov	sp, r7
 8005216:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800521a:	b002      	add	sp, #8
 800521c:	4770      	bx	lr
	...

08005220 <_ZNKSt6vectorIbSaIbEE8max_sizeEv>:
    max_size() const _GLIBCXX_NOEXCEPT
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
      const size_type __isize =
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x38>)
 800522a:	60fb      	str	r3, [r7, #12]
	= _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fb2b 	bl	800588a <_ZNKSt13_Bvector_baseISaIbEE20_M_get_Bit_allocatorEv>
 8005234:	4603      	mov	r3, r0
      const size_type __asize
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fb1b 	bl	8005872 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 800523c:	60b8      	str	r0, [r7, #8]
	      ? __asize * int(_S_word_bit) : __isize);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005244:	d202      	bcs.n	800524c <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x2c>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	015b      	lsls	r3, r3, #5
 800524a:	e000      	b.n	800524e <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x2e>
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <_ZNKSt6vectorIbSaIbEE8max_sizeEv+0x38>)
    }
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	7fffffe0 	.word	0x7fffffe0

0800525c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005266:	2200      	movs	r2, #0
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fb18 	bl	80058a0 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8005270:	4603      	mov	r3, r0
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZSt4copyIPmS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800527a:	b590      	push	{r4, r7, lr}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fb28 	bl	80058dc <_ZSt12__miter_baseIPmET_S1_>
 800528c:	4604      	mov	r4, r0
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f000 fb24 	bl	80058dc <_ZSt12__miter_baseIPmET_S1_>
 8005294:	4603      	mov	r3, r0
	       __result));
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4619      	mov	r1, r3
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fb29 	bl	80058f2 <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_>
 80052a0:	4603      	mov	r3, r0
    }
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd90      	pop	{r4, r7, pc}

080052aa <_ZSt4copyISt19_Bit_const_iteratorSt13_Bit_iteratorET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80052aa:	b082      	sub	sp, #8
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b08d      	sub	sp, #52	; 0x34
 80052b0:	af04      	add	r7, sp, #16
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	1d38      	adds	r0, r7, #4
 80052b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
	      (std::__miter_base(__first), std::__miter_base(__last),
 80052bc:	f107 0010 	add.w	r0, r7, #16
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80052c6:	f000 fb30 	bl	800592a <_ZSt12__miter_baseISt19_Bit_const_iteratorET_S1_>
 80052ca:	f107 0018 	add.w	r0, r7, #24
 80052ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80052d6:	f000 fb28 	bl	800592a <_ZSt12__miter_baseISt19_Bit_const_iteratorET_S1_>
	       __result));
 80052da:	68fc      	ldr	r4, [r7, #12]
 80052dc:	aa01      	add	r2, sp, #4
 80052de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f107 0210 	add.w	r2, r7, #16
 80052f4:	ca06      	ldmia	r2, {r1, r2}
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 fb2b 	bl	8005952 <_ZSt14__copy_move_a2ILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>
    }
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	3724      	adds	r7, #36	; 0x24
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005306:	b002      	add	sp, #8
 8005308:	4770      	bx	lr

0800530a <_ZSt14__copy_move_a2ILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800530a:	b082      	sub	sp, #8
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b08f      	sub	sp, #60	; 0x3c
 8005310:	af04      	add	r7, sp, #16
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	1d38      	adds	r0, r7, #4
 8005316:	e880 0006 	stmia.w	r0, {r1, r2}
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800531c:	f107 0010 	add.w	r0, r7, #16
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005326:	f000 f97a 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 800532a:	f107 0018 	add.w	r0, r7, #24
 800532e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005332:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005336:	f000 f972 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
 800533a:	f107 0020 	add.w	r0, r7, #32
 800533e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005342:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005346:	f000 f96a 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
					     std::__niter_base(__result)));
 800534a:	68fc      	ldr	r4, [r7, #12]
 800534c:	aa01      	add	r2, sp, #4
 800534e:	f107 0320 	add.w	r3, r7, #32
 8005352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005356:	e882 0003 	stmia.w	r2, {r0, r1}
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f107 0210 	add.w	r2, r7, #16
 8005364:	ca06      	ldmia	r2, {r1, r2}
 8005366:	4620      	mov	r0, r4
 8005368:	f000 fb2b 	bl	80059c2 <_ZSt13__copy_move_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>
    }
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	372c      	adds	r7, #44	; 0x2c
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005376:	b002      	add	sp, #8
 8005378:	4770      	bx	lr

0800537a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	f107 030f 	add.w	r3, r7, #15
 800538c:	461a      	mov	r2, r3
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fb38 	bl	8005a06 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8005396:	4603      	mov	r3, r0
	}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fb40 	bl	8005a2e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fb27 	bl	8005a2e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	bf8c      	ite	hi
 80053e8:	2301      	movhi	r3, #1
 80053ea:	2300      	movls	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80053f2:	f004 faeb 	bl	80099cc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80053f6:	68b8      	ldr	r0, [r7, #8]
 80053f8:	f004 facc 	bl	8009994 <_Znwj>
 80053fc:	4603      	mov	r3, r0
      }
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005430:	2301      	movs	r3, #1
 8005432:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fb04 	bl	8005a46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 800543e:	4603      	mov	r3, r0
    }
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800546a:	68b8      	ldr	r0, [r7, #8]
 800546c:	f004 faac 	bl	80099c8 <_ZdlPv>
      }
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS0_>:
	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__a)),
 8005498:	6838      	ldr	r0, [r7, #0]
 800549a:	f7ff ffed 	bl	8005478 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 800549e:	4603      	mov	r3, r0
	  _M_start(), _M_finish(), _M_end_of_storage()
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fadf 	bl	8005a66 <_ZNSaIhEC1ERKS_>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
	{ }
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fad8 	bl	8005a82 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fb49 	bl	8004b84 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_finish, __x._M_finish);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	1d1a      	adds	r2, r3, #4
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f7ff fb41 	bl	8004b84 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 0208 	add.w	r2, r3, #8
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	3308      	adds	r3, #8
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f7ff fb38 	bl	8004b84 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZNSt6vectorIhSaIhEE4swapERS1_>:
      swap(vector& __x) _GLIBCXX_NOEXCEPT
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_swap_data(__x._M_impl);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ffd5 	bl	80054dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_impl12_M_swap_dataERS2_>
	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fab7 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800553a:	4604      	mov	r4, r0
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fab2 	bl	8003aa8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005544:	4603      	mov	r3, r0
 8005546:	4619      	mov	r1, r3
 8005548:	4620      	mov	r0, r4
 800554a:	f000 faa5 	bl	8005a98 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10_S_on_swapERS1_S3_>
      }
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}

08005556 <_ZSt12__niter_baseIPPhSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fabb 	bl	8004adc <_ZNK9__gnu_cxx17__normal_iteratorIPPhSt6vectorIS1_SaIS1_EEE4baseEv>
 8005566:	4603      	mov	r3, r0
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <_ZSt13__copy_move_aILb1EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800557e:	2301      	movs	r3, #1
 8005580:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa93 	bl	8005ab2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>
 800558c:	4603      	mov	r3, r0
    }
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_ZSt22__copy_move_backward_aILb1EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
								 __result);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa9e 	bl	8005aec <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>
 80055b0:	4603      	mov	r3, r0
    }
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_ZSt12__niter_baseIPtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fb22 	bl	8004c0e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80055ca:	4603      	mov	r3, r0
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 faa0 	bl	8005b30 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 80055f0:	4603      	mov	r3, r0
    }
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <_ZSt22__copy_move_backward_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b086      	sub	sp, #24
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
								 __result);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 faab 	bl	8005b6a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bItEEPT_PKS3_S6_S4_>
 8005614:	4603      	mov	r3, r0
    }
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	461a      	mov	r2, r3
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005636:	e882 0003 	stmia.w	r2, {r0, r1}
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <_ZSt13__copy_move_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005646:	b082      	sub	sp, #8
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b08b      	sub	sp, #44	; 0x2c
 800564c:	af04      	add	r7, sp, #16
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	1d38      	adds	r0, r7, #4
 8005652:	e880 0006 	stmia.w	r0, {r1, r2}
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005658:	2300      	movs	r3, #0
 800565a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800565c:	68fc      	ldr	r4, [r7, #12]
 800565e:	aa01      	add	r2, sp, #4
 8005660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005664:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005668:	e882 0003 	stmia.w	r2, {r0, r1}
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	1d3a      	adds	r2, r7, #4
 8005674:	ca06      	ldmia	r2, {r1, r2}
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fa99 	bl	8005bae <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005686:	b002      	add	sp, #8
 8005688:	4770      	bx	lr

0800568a <_ZSt22__copy_move_backward_aILb1ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800568a:	b082      	sub	sp, #8
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b08b      	sub	sp, #44	; 0x2c
 8005690:	af04      	add	r7, sp, #16
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	1d38      	adds	r0, r7, #4
 8005696:	e880 0006 	stmia.w	r0, {r1, r2}
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueType1)
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
								 __result);
 80056a0:	68fc      	ldr	r4, [r7, #12]
 80056a2:	aa01      	add	r2, sp, #4
 80056a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	1d3a      	adds	r2, r7, #4
 80056b8:	ca06      	ldmia	r2, {r1, r2}
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 fac2 	bl	8005c44 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80056ca:	b002      	add	sp, #8
 80056cc:	4770      	bx	lr

080056ce <_ZSt10_ConstructISt6vectorIhSaIhEEJEEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4619      	mov	r1, r3
 80056da:	200c      	movs	r0, #12
 80056dc:	f7fb fc04 	bl	8000ee8 <_ZnwjPv>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <_ZSt10_ConstructISt6vectorIhSaIhEEJEEvPT_DpOT0_+0x1e>
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 faf7 	bl	8005cda <_ZNSt6vectorIhSaIhEEC1Ev>
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv+0x18>)
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	15555555 	.word	0x15555555

08005710 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fae2 	bl	8005cf4 <_ZStneIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005736:	6978      	ldr	r0, [r7, #20]
 8005738:	f7fe fe27 	bl	800438a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 800573c:	4604      	mov	r4, r0
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	4618      	mov	r0, r3
 8005744:	f000 faf8 	bl	8005d38 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEEdeEv>
 8005748:	4603      	mov	r3, r0
 800574a:	4619      	mov	r1, r3
 800574c:	4620      	mov	r0, r4
 800574e:	f000 fb0a 	bl	8005d66 <_ZSt10_ConstructISt6vectorIhSaIhEEJS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fadd 	bl	8005d16 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEppEv>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	330c      	adds	r3, #12
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e7dd      	b.n	8005720 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIhSaIhEEES6_EET0_T_S9_S8_+0x10>
	      return __cur;
 8005764:	697b      	ldr	r3, [r7, #20]
	}
 8005766:	4618      	mov	r0, r3
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd90      	pop	{r4, r7, pc}

0800576e <_ZSt6fill_nIPPhjS0_ET_S2_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fb0c 	bl	8005d98 <_ZSt12__niter_baseIPPhET_S2_>
 8005780:	4603      	mov	r3, r0
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fb11 	bl	8005dae <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>
 800578c:	4603      	mov	r3, r0
    }
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <_ZNK9__gnu_cxx13new_allocatorIPhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800579e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPhES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fb14 	bl	8005dec <_ZSt4copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_ZSt6fill_nIPtjtET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fb1e 	bl	8005e1c <_ZSt12__niter_baseIPtET_S1_>
 80057e0:	4603      	mov	r3, r0
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fb23 	bl	8005e32 <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>
 80057ec:	4603      	mov	r3, r0
    }
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80057fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fb26 	bl	8005e70 <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8005824:	4603      	mov	r3, r0
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <_ZSt22__copy_move_backward_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800582e:	b082      	sub	sp, #8
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b08b      	sub	sp, #44	; 0x2c
 8005834:	af04      	add	r7, sp, #16
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	1d38      	adds	r0, r7, #4
 800583a:	e880 0006 	stmia.w	r0, {r1, r2}
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueType1)
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005844:	68fc      	ldr	r4, [r7, #12]
 8005846:	aa01      	add	r2, sp, #4
 8005848:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800584c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005850:	e882 0003 	stmia.w	r2, {r0, r1}
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	1d3a      	adds	r2, r7, #4
 800585c:	ca06      	ldmia	r2, {r1, r2}
 800585e:	4620      	mov	r0, r4
 8005860:	f000 fb1e 	bl	8005ea0 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800586e:	b002      	add	sp, #8
 8005870:	4770      	bx	lr

08005872 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb57 	bl	8005f2e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 8005880:	4603      	mov	r3, r0
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <_ZNKSt13_Bvector_baseISaIbEE20_M_get_Bit_allocatorEv>:
      _M_get_Bit_allocator() const _GLIBCXX_NOEXCEPT
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fb3e 	bl	8005f2e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bf8c      	ite	hi
 80058ba:	2301      	movhi	r3, #1
 80058bc:	2300      	movls	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80058c4:	f004 f882 	bl	80099cc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f004 f861 	bl	8009994 <_Znwj>
 80058d2:	4603      	mov	r3, r0
      }
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZSt12__miter_baseIPmET_S1_>:
    __miter_base(_Iterator __it)
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80058f2:	b5b0      	push	{r4, r5, r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7fc fb88 	bl	8002014 <_ZSt12__niter_baseIPmET_S1_>
 8005904:	4604      	mov	r4, r0
 8005906:	68b8      	ldr	r0, [r7, #8]
 8005908:	f7fc fb84 	bl	8002014 <_ZSt12__niter_baseIPmET_S1_>
 800590c:	4605      	mov	r5, r0
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc fb80 	bl	8002014 <_ZSt12__niter_baseIPmET_S1_>
 8005914:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005916:	461a      	mov	r2, r3
 8005918:	4629      	mov	r1, r5
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fb13 	bl	8005f46 <_ZSt13__copy_move_aILb0EPmS0_ET1_T0_S2_S1_>
 8005920:	4603      	mov	r3, r0
    }
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bdb0      	pop	{r4, r5, r7, pc}

0800592a <_ZSt12__miter_baseISt19_Bit_const_iteratorET_S1_>:
    __miter_base(_Iterator __it)
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	461a      	mov	r2, r3
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005942:	e882 0003 	stmia.w	r2, {r0, r1}
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <_ZSt14__copy_move_a2ILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005952:	b082      	sub	sp, #8
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b08f      	sub	sp, #60	; 0x3c
 8005958:	af04      	add	r7, sp, #16
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	1d38      	adds	r0, r7, #4
 800595e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005964:	f107 0010 	add.w	r0, r7, #16
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800596e:	f000 fafc 	bl	8005f6a <_ZSt12__niter_baseISt19_Bit_const_iteratorET_S1_>
 8005972:	f107 0018 	add.w	r0, r7, #24
 8005976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800597a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800597e:	f000 faf4 	bl	8005f6a <_ZSt12__niter_baseISt19_Bit_const_iteratorET_S1_>
 8005982:	f107 0020 	add.w	r0, r7, #32
 8005986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800598a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800598e:	f7ff fe46 	bl	800561e <_ZSt12__niter_baseISt13_Bit_iteratorET_S1_>
					     std::__niter_base(__result)));
 8005992:	68fc      	ldr	r4, [r7, #12]
 8005994:	aa01      	add	r2, sp, #4
 8005996:	f107 0320 	add.w	r3, r7, #32
 800599a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800599e:	e882 0003 	stmia.w	r2, {r0, r1}
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f107 0210 	add.w	r2, r7, #16
 80059ac:	ca06      	ldmia	r2, {r1, r2}
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 faef 	bl	8005f92 <_ZSt13__copy_move_aILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>
    }
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	372c      	adds	r7, #44	; 0x2c
 80059b8:	46bd      	mov	sp, r7
 80059ba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059be:	b002      	add	sp, #8
 80059c0:	4770      	bx	lr

080059c2 <_ZSt13__copy_move_aILb0ESt13_Bit_iteratorS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80059c2:	b082      	sub	sp, #8
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b08b      	sub	sp, #44	; 0x2c
 80059c8:	af04      	add	r7, sp, #16
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	1d38      	adds	r0, r7, #4
 80059ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueTypeI)
 80059d4:	2300      	movs	r3, #0
 80059d6:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80059d8:	68fc      	ldr	r4, [r7, #12]
 80059da:	aa01      	add	r2, sp, #4
 80059dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80059e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	ca06      	ldmia	r2, {r1, r2}
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 faef 	bl	8005fd6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>
    }
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a02:	b002      	add	sp, #8
 8005a04:	4770      	bx	lr

08005a06 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fb26 	bl	8006064 <_ZSt12__niter_baseIPhET_S1_>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fb2b 	bl	800607a <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 8005a24:	4603      	mov	r3, r0
    }
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fb24 	bl	80060a4 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fb2e 	bl	80060d4 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10_S_on_swapERS1_S3_>:
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
    { std::__alloc_on_swap(__a, __b); }
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fb21 	bl	80060ec <_ZSt15__alloc_on_swapISaIhEEvRT_S2_>
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	109b      	asrs	r3, r3, #2
 8005ac6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d006      	beq.n	8005adc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPhEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68f9      	ldr	r1, [r7, #12]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f003 ffcb 	bl	8009a72 <memmove>
	  return __result + _Num;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4413      	add	r3, r2
	}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	109b      	asrs	r3, r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIPhEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	425b      	negs	r3, r3
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	18d0      	adds	r0, r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	461a      	mov	r2, r3
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	f003 ffaa 	bl	8009a72 <memmove>
	  return __result - _Num;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	425b      	negs	r3, r3
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
	}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	105b      	asrs	r3, r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d006      	beq.n	8005b5a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	461a      	mov	r2, r3
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f003 ff8c 	bl	8009a72 <memmove>
	  return __result + _Num;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4413      	add	r3, r2
	}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bItEEPT_PKS3_S6_S4_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	105b      	asrs	r3, r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bItEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	425b      	negs	r3, r3
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	18d0      	adds	r0, r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	461a      	mov	r2, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f003 ff6b 	bl	8009a72 <memmove>
	  return __result - _Num;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4413      	add	r3, r2
	}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_m(_II __first, _II __last, _OI __result)
 8005bae:	b082      	sub	sp, #8
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	1d38      	adds	r0, r7, #4
 8005bba:	e880 0006 	stmia.w	r0, {r1, r2}
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005bc0:	1d3a      	adds	r2, r7, #4
 8005bc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fb fac5 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005bce:	6278      	str	r0, [r7, #36]	; 0x24
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd27      	ble.n	8005c26 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x78>
	      *__result = std::move(*__first);
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fb faf3 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8005be6:	f107 031c 	add.w	r3, r7, #28
 8005bea:	1d3a      	adds	r2, r7, #4
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fb faec 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8005bf4:	f107 031c 	add.w	r3, r7, #28
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fb1b 	bl	8004234 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	f107 0314 	add.w	r3, r7, #20
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb f9c6 	bl	8000f98 <_ZNSt14_Bit_referenceaSERKS_>
	      ++__first;
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fb faf0 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
	      ++__result;
 8005c14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fb faeb 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	3b01      	subs	r3, #1
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
 8005c24:	e7d4      	b.n	8005bd0 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c32:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	3728      	adds	r7, #40	; 0x28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c40:	b002      	add	sp, #8
 8005c42:	4770      	bx	lr

08005c44 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8005c44:	b082      	sub	sp, #8
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08a      	sub	sp, #40	; 0x28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	1d38      	adds	r0, r7, #4
 8005c50:	e880 0006 	stmia.w	r0, {r1, r2}
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
	  for (__n = __last - __first; __n > 0; --__n)
 8005c56:	1d3a      	adds	r2, r7, #4
 8005c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fb fa7a 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd27      	ble.n	8005cbc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x78>
	    *--__result = std::move(*--__last);
 8005c6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fb facc 	bl	800120e <_ZNSt13_Bit_iteratormmEv>
 8005c76:	4602      	mov	r2, r0
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fb faa4 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8005c84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fb fac0 	bl	800120e <_ZNSt13_Bit_iteratormmEv>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f107 031c 	add.w	r3, r7, #28
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fb fa98 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8005c9c:	f107 031c 	add.w	r3, r7, #28
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe fac7 	bl	8004234 <_ZSt4moveISt14_Bit_referenceEONSt16remove_referenceIT_E4typeEOS2_>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	4611      	mov	r1, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fb f972 	bl	8000f98 <_ZNSt14_Bit_referenceaSERKS_>
	  for (__n = __last - __first; __n > 0; --__n)
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cba:	e7d4      	b.n	8005c66 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005cc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cc8:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	3728      	adds	r7, #40	; 0x28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd6:	b002      	add	sp, #8
 8005cd8:	4770      	bx	lr

08005cda <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fa0f 	bl	8006108 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <_ZStneIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fa0e 	bl	8006122 <_ZSteqIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f083 0301 	eor.w	r3, r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <_ZNSt13move_iteratorIPSt6vectorIhSaIhEEEppEv>:
      operator++()
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f103 020c 	add.w	r2, r3, #12
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	601a      	str	r2, [r3, #0]
	return *this;
 8005d2a:	687b      	ldr	r3, [r7, #4]
      }
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEEdeEv>:
      operator*() const
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <_ZSt10_ConstructISt6vectorIhSaIhEEJS2_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8005d66:	b590      	push	{r4, r7, lr}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f7ff ffed 	bl	8005d50 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005d76:	4604      	mov	r4, r0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	200c      	movs	r0, #12
 8005d7e:	f7fb f8b3 	bl	8000ee8 <_ZnwjPv>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <_ZSt10_ConstructISt6vectorIhSaIhEEJS2_EEvPT_DpOT0_+0x2a>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fd ffa0 	bl	8003cd0 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd90      	pop	{r4, r7, pc}

08005d98 <_ZSt12__niter_baseIPPhET_S2_>:
    __niter_base(_Iterator __it)
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	613b      	str	r3, [r7, #16]
      for (__decltype(__n + 0) __niter = __n;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x30>
	*__first = __tmp;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	601a      	str	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e7f2      	b.n	8005dc4 <_ZSt10__fill_n_aIPPhjS0_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x16>
      return __first;
 8005dde:	68fb      	ldr	r3, [r7, #12]
    }
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZSt4copyISt13move_iteratorIPPhES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f9a8 	bl	800614e <_ZSt12__miter_baseIPPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005dfe:	4604      	mov	r4, r0
 8005e00:	68b8      	ldr	r0, [r7, #8]
 8005e02:	f000 f9a4 	bl	800614e <_ZSt12__miter_baseIPPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005e06:	4603      	mov	r3, r0
	       __result));
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 f9af 	bl	8006170 <_ZSt14__copy_move_a2ILb1EPPhS1_ET1_T0_S3_S2_>
 8005e12:	4603      	mov	r3, r0
    }
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 8005e32:	b480      	push	{r7}
 8005e34:	b087      	sub	sp, #28
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	827b      	strh	r3, [r7, #18]
      for (__decltype(__n + 0) __niter = __n;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x30>
	*__first = __tmp;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8a7a      	ldrh	r2, [r7, #18]
 8005e52:	801a      	strh	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e7f2      	b.n	8005e48 <_ZSt10__fill_n_aIPtjtEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x16>
      return __first;
 8005e62:	68fb      	ldr	r3, [r7, #12]
    }
 8005e64:	4618      	mov	r0, r3
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f993 	bl	80061a8 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005e82:	4604      	mov	r4, r0
 8005e84:	68b8      	ldr	r0, [r7, #8]
 8005e86:	f000 f98f 	bl	80061a8 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005e8a:	4603      	mov	r3, r0
	       __result));
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 f99a 	bl	80061ca <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>
 8005e96:	4603      	mov	r3, r0
    }
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd90      	pop	{r4, r7, pc}

08005ea0 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b08a      	sub	sp, #40	; 0x28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	1d38      	adds	r0, r7, #4
 8005eac:	e880 0006 	stmia.w	r0, {r1, r2}
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
	  for (__n = __last - __first; __n > 0; --__n)
 8005eb2:	1d3a      	adds	r2, r7, #4
 8005eb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb f94c 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005ec0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd23      	ble.n	8005f10 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x70>
	    *--__result = *--__last;
 8005ec8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fb f99e 	bl	800120e <_ZNSt13_Bit_iteratormmEv>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	f107 0314 	add.w	r3, r7, #20
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fb f976 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8005ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fb f992 	bl	800120e <_ZNSt13_Bit_iteratormmEv>
 8005eea:	4602      	mov	r2, r0
 8005eec:	f107 031c 	add.w	r3, r7, #28
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fb f96a 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8005ef8:	f107 021c 	add.w	r2, r7, #28
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fb f848 	bl	8000f98 <_ZNSt14_Bit_referenceaSERKS_>
	  for (__n = __last - __first; __n > 0; --__n)
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0e:	e7d8      	b.n	8005ec2 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f1c:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2a:	b002      	add	sp, #8
 8005f2c:	4770      	bx	lr

08005f2e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005f36:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <_ZSt13__copy_move_aILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f951 	bl	8006202 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8005f60:	4603      	mov	r3, r0
    }
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZSt12__niter_baseISt19_Bit_const_iteratorET_S1_>:
    __niter_base(_Iterator __it)
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	e883 0006 	stmia.w	r3, {r1, r2}
    { return __it; }
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	1d3b      	adds	r3, r7, #4
 8005f7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f82:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <_ZSt13__copy_move_aILb0ESt19_Bit_const_iteratorSt13_Bit_iteratorET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005f92:	b082      	sub	sp, #8
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b08b      	sub	sp, #44	; 0x2c
 8005f98:	af04      	add	r7, sp, #16
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	1d38      	adds	r0, r7, #4
 8005f9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005fa8:	68fc      	ldr	r4, [r7, #12]
 8005faa:	aa01      	add	r2, sp, #4
 8005fac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fb4:	e882 0003 	stmia.w	r2, {r0, r1}
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	1d3a      	adds	r2, r7, #4
 8005fc0:	ca06      	ldmia	r2, {r1, r2}
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f93a 	bl	800623c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_>
    }
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005fd2:	b002      	add	sp, #8
 8005fd4:	4770      	bx	lr

08005fd6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_>:
        __copy_m(_II __first, _II __last, _OI __result)
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	1d38      	adds	r0, r7, #4
 8005fe2:	e880 0006 	stmia.w	r0, {r1, r2}
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8005fe8:	1d3a      	adds	r2, r7, #4
 8005fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fb f8b1 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 8005ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	dd23      	ble.n	8006046 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x70>
	      *__result = *__first;
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f7fb f8df 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 800600e:	f107 031c 	add.w	r3, r7, #28
 8006012:	1d3a      	adds	r2, r7, #4
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f7fb f8d8 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 800601c:	f107 021c 	add.w	r2, r7, #28
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fa ffb6 	bl	8000f98 <_ZNSt14_Bit_referenceaSERKS_>
	      ++__first;
 800602c:	1d3b      	adds	r3, r7, #4
 800602e:	4618      	mov	r0, r3
 8006030:	f7fb f8e0 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
	      ++__result;
 8006034:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006038:	4618      	mov	r0, r3
 800603a:	f7fb f8db 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	3b01      	subs	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	e7d8      	b.n	8005ff8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt13_Bit_iteratorS3_EET0_T_S5_S4_+0x22>
	  return __result;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	461a      	mov	r2, r3
 800604a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800604e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006052:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006060:	b002      	add	sp, #8
 8006062:	4770      	bx	lr

08006064 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4413      	add	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f917 	bl	80062c4 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4413      	add	r3, r2
    }
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f921 	bl	80062f8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80060b6:	4604      	mov	r4, r0
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	f000 f91d 	bl	80062f8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80060be:	4603      	mov	r3, r0
	       __result));
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 f928 	bl	800631a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 80060ca:	4603      	mov	r3, r0
    }
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <_ZSt15__alloc_on_swapISaIhEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
 80060f6:	461a      	mov	r2, r3
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f929 	bl	8006352 <_ZSt18__do_alloc_on_swapISaIhEEvRT_S2_St17integral_constantIbLb0EE>
    }
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f929 	bl	800636a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <_ZSteqIPSt6vectorIhSaIhEEEbRKSt13move_iteratorIT_ES8_>:
    operator==(const move_iterator<_Iterator>& __x,
 8006122:	b590      	push	{r4, r7, lr}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f931 	bl	8006394 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEE4baseEv>
 8006132:	4604      	mov	r4, r0
 8006134:	6838      	ldr	r0, [r7, #0]
 8006136:	f000 f92d 	bl	8006394 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEE4baseEv>
 800613a:	4603      	mov	r3, r0
 800613c:	429c      	cmp	r4, r3
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	bd90      	pop	{r4, r7, pc}

0800614e <_ZSt12__miter_baseIPPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f927 	bl	80063ac <_ZNKSt13move_iteratorIPPhE4baseEv>
 800615e:	4603      	mov	r3, r0
 8006160:	4618      	mov	r0, r3
 8006162:	f000 f92f 	bl	80063c4 <_ZSt12__miter_baseIPPhET_S2_>
 8006166:	4603      	mov	r3, r0
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <_ZSt14__copy_move_a2ILb1EPPhS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006170:	b5b0      	push	{r4, r5, r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fe0b 	bl	8005d98 <_ZSt12__niter_baseIPPhET_S2_>
 8006182:	4604      	mov	r4, r0
 8006184:	68b8      	ldr	r0, [r7, #8]
 8006186:	f7ff fe07 	bl	8005d98 <_ZSt12__niter_baseIPPhET_S2_>
 800618a:	4605      	mov	r5, r0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fe03 	bl	8005d98 <_ZSt12__niter_baseIPPhET_S2_>
 8006192:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006194:	461a      	mov	r2, r3
 8006196:	4629      	mov	r1, r5
 8006198:	4620      	mov	r0, r4
 800619a:	f7ff f9ea 	bl	8005572 <_ZSt13__copy_move_aILb1EPPhS1_ET1_T0_S3_S2_>
 800619e:	4603      	mov	r3, r0
    }
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bdb0      	pop	{r4, r5, r7, pc}

080061a8 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80061b0:	1d3b      	adds	r3, r7, #4
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f911 	bl	80063da <_ZNKSt13move_iteratorIPtE4baseEv>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f919 	bl	80063f2 <_ZSt12__miter_baseIPtET_S1_>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80061ca:	b5b0      	push	{r4, r5, r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff fe20 	bl	8005e1c <_ZSt12__niter_baseIPtET_S1_>
 80061dc:	4604      	mov	r4, r0
 80061de:	68b8      	ldr	r0, [r7, #8]
 80061e0:	f7ff fe1c 	bl	8005e1c <_ZSt12__niter_baseIPtET_S1_>
 80061e4:	4605      	mov	r5, r0
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fe18 	bl	8005e1c <_ZSt12__niter_baseIPtET_S1_>
 80061ec:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80061ee:	461a      	mov	r2, r3
 80061f0:	4629      	mov	r1, r5
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff f9ef 	bl	80055d6 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 80061f8:	4603      	mov	r3, r0
    }
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bdb0      	pop	{r4, r5, r7, pc}

08006202 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	109b      	asrs	r3, r3, #2
 8006216:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d006      	beq.n	800622c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	461a      	mov	r2, r3
 8006224:	68f9      	ldr	r1, [r7, #12]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f003 fc23 	bl	8009a72 <memmove>
	  return __result + _Num;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4413      	add	r3, r2
	}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_>:
        __copy_m(_II __first, _II __last, _OI __result)
 800623c:	b082      	sub	sp, #8
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	1d38      	adds	r0, r7, #4
 8006248:	e880 0006 	stmia.w	r0, {r1, r2}
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800624e:	1d3a      	adds	r2, r7, #4
 8006250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa ff7e 	bl	8001158 <_ZStmiRKSt18_Bit_iterator_baseS1_>
 800625c:	61f8      	str	r0, [r7, #28]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	dd20      	ble.n	80062a6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_+0x6a>
	      *__result = *__first;
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800626c:	4611      	mov	r1, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7fa ffac 	bl	80011cc <_ZNKSt13_Bit_iteratordeEv>
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fb f863 	bl	8001342 <_ZNKSt19_Bit_const_iteratordeEv>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa fe62 	bl	8000f50 <_ZNSt14_Bit_referenceaSEb>
	      ++__first;
 800628c:	1d3b      	adds	r3, r7, #4
 800628e:	4618      	mov	r0, r3
 8006290:	f7fb f870 	bl	8001374 <_ZNSt19_Bit_const_iteratorppEv>
	      ++__result;
 8006294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa ffab 	bl	80011f4 <_ZNSt13_Bit_iteratorppEv>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e7db      	b.n	800625e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt19_Bit_const_iteratorSt13_Bit_iteratorEET0_T_S6_S5_+0x22>
	  return __result;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	461a      	mov	r2, r3
 80062aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80062b2:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c0:	b002      	add	sp, #8
 80062c2:	4770      	bx	lr

080062c4 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4619      	mov	r1, r3
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f003 fbda 	bl	8009aa4 <memset>
    }
 80062f0:	bf00      	nop
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8006300:	1d3b      	adds	r3, r7, #4
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f880 	bl	8006408 <_ZNKSt13move_iteratorIPhE4baseEv>
 8006308:	4603      	mov	r3, r0
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f888 	bl	8006420 <_ZSt12__miter_baseIPhET_S1_>
 8006310:	4603      	mov	r3, r0
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800631a:	b5b0      	push	{r4, r5, r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fe9c 	bl	8006064 <_ZSt12__niter_baseIPhET_S1_>
 800632c:	4604      	mov	r4, r0
 800632e:	68b8      	ldr	r0, [r7, #8]
 8006330:	f7ff fe98 	bl	8006064 <_ZSt12__niter_baseIPhET_S1_>
 8006334:	4605      	mov	r5, r0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fe94 	bl	8006064 <_ZSt12__niter_baseIPhET_S1_>
 800633c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800633e:	461a      	mov	r2, r3
 8006340:	4629      	mov	r1, r5
 8006342:	4620      	mov	r0, r4
 8006344:	f000 f877 	bl	8006436 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8006348:	4603      	mov	r3, r0
    }
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bdb0      	pop	{r4, r5, r7, pc}

08006352 <_ZSt18__do_alloc_on_swapISaIhEEvRT_S2_St17integral_constantIbLb0EE>:
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	713a      	strb	r2, [r7, #4]
    { }
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f871 	bl	800645a <_ZNSaIhEC1Ev>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	609a      	str	r2, [r3, #8]
	{ }
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZNKSt13move_iteratorIPSt6vectorIhSaIhEEE4baseEv>:
      base() const
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <_ZNKSt13move_iteratorIPPhE4baseEv>:
      base() const
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <_ZSt12__miter_baseIPPhET_S2_>:
    __miter_base(_Iterator __it)
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <_ZNKSt13move_iteratorIPtE4baseEv>:
      base() const
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <_ZSt12__miter_baseIPtET_S1_>:
    __miter_base(_Iterator __it)
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f811 	bl	8006472 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006450:	4603      	mov	r3, r0
    }
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f81f 	bl	80064a6 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	461a      	mov	r2, r3
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f003 faed 	bl	8009a72 <memmove>
	  return __result + _Num;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4413      	add	r3, r2
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <_ZN9Dynamixel9setPacketEhhhPhhS0_>:
	return read_buf[4]; //return Error status
}


void Dynamixel::setPacket(uint8_t id, uint8_t instruction, uint8_t write_param_len, uint8_t *write_param, uint8_t read_param_len, uint8_t *read_param)
{
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	70fb      	strb	r3, [r7, #3]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70bb      	strb	r3, [r7, #2]
 80064d2:	4613      	mov	r3, r2
 80064d4:	707b      	strb	r3, [r7, #1]
	send_buf[5 + write_param_len] = getCheckSum_(send_buf);

	uint8_t read_buf_length = read_param_len + 6;

	if(id == 254) rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, true);
	else rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, false);
 80064d6:	466b      	mov	r3, sp
 80064d8:	461d      	mov	r5, r3
	uint8_t send_buf_length = write_param_len + 6;
 80064da:	787b      	ldrb	r3, [r7, #1]
 80064dc:	3306      	adds	r3, #6
 80064de:	75bb      	strb	r3, [r7, #22]
	uint8_t send_buf[send_buf_length];
 80064e0:	7dbb      	ldrb	r3, [r7, #22]
 80064e2:	1e58      	subs	r0, r3, #1
 80064e4:	6138      	str	r0, [r7, #16]
 80064e6:	4603      	mov	r3, r0
 80064e8:	3301      	adds	r3, #1
 80064ea:	4619      	mov	r1, r3
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	f04f 0400 	mov.w	r4, #0
 80064f8:	00d4      	lsls	r4, r2, #3
 80064fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80064fe:	00cb      	lsls	r3, r1, #3
 8006500:	4603      	mov	r3, r0
 8006502:	3301      	adds	r3, #1
 8006504:	4619      	mov	r1, r3
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	f04f 0400 	mov.w	r4, #0
 8006512:	00d4      	lsls	r4, r2, #3
 8006514:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006518:	00cb      	lsls	r3, r1, #3
 800651a:	4603      	mov	r3, r0
 800651c:	3301      	adds	r3, #1
 800651e:	3307      	adds	r3, #7
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	ebad 0d03 	sub.w	sp, sp, r3
 8006528:	ab02      	add	r3, sp, #8
 800652a:	3300      	adds	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
	send_buf[0] = 0xff;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	22ff      	movs	r2, #255	; 0xff
 8006532:	701a      	strb	r2, [r3, #0]
	send_buf[1] = 0xff;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	22ff      	movs	r2, #255	; 0xff
 8006538:	705a      	strb	r2, [r3, #1]
	send_buf[2] = id;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	709a      	strb	r2, [r3, #2]
	send_buf[3] = write_param_len + 2; //param_len + (Instruction + Checksum)
 8006540:	787b      	ldrb	r3, [r7, #1]
 8006542:	3302      	adds	r3, #2
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	70da      	strb	r2, [r3, #3]
	send_buf[4] = instruction;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	78ba      	ldrb	r2, [r7, #2]
 800654e:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0; i < write_param_len; i++){ //Set parameters;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
 8006554:	7dfa      	ldrb	r2, [r7, #23]
 8006556:	787b      	ldrb	r3, [r7, #1]
 8006558:	429a      	cmp	r2, r3
 800655a:	d20b      	bcs.n	8006574 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0xb8>
		send_buf[5 + i] = write_param[i];
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006560:	441a      	add	r2, r3
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	3305      	adds	r3, #5
 8006566:	7811      	ldrb	r1, [r2, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < write_param_len; i++){ //Set parameters;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	3301      	adds	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
 8006572:	e7ef      	b.n	8006554 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0x98>
	send_buf[5 + write_param_len] = getCheckSum_(send_buf);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f83a 	bl	80065f2 <_ZN9Dynamixel12getCheckSum_EPh>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	787b      	ldrb	r3, [r7, #1]
 8006584:	3305      	adds	r3, #5
 8006586:	b2d1      	uxtb	r1, r2
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	54d1      	strb	r1, [r2, r3]
	uint8_t read_buf_length = read_param_len + 6;
 800658c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006590:	3306      	adds	r3, #6
 8006592:	72fb      	strb	r3, [r7, #11]
	if(id == 254) rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, true);
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2bfe      	cmp	r3, #254	; 0xfe
 8006598:	d10d      	bne.n	80065b6 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0xfa>
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	b29c      	uxth	r4, r3
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2201      	movs	r2, #1
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	4622      	mov	r2, r4
 80065b0:	f000 fb22 	bl	8006bf8 <_ZN9HAL_RS4857setBufsEPhtS0_tb>
 80065b4:	e00c      	b.n	80065d0 <_ZN9Dynamixel9setPacketEhhhPhhS0_+0x114>
	else rs485_.setBufs(send_buf, send_buf_length, read_param, read_buf_length, false);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	7dbb      	ldrb	r3, [r7, #22]
 80065bc:	b29c      	uxth	r4, r3
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2200      	movs	r2, #0
 80065c4:	9201      	str	r2, [sp, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	4622      	mov	r2, r4
 80065cc:	f000 fb14 	bl	8006bf8 <_ZN9HAL_RS4857setBufsEPhtS0_tb>
 80065d0:	46ad      	mov	sp, r5
	rs485_.setSendBuf(send_buf, send_buf_length);
	rs485_.setReadDataPointer(read_param, read_buf_length);
	if(id == 254)	rs485_.setNoReceiveFlag(true);
	else rs485_.setNoReceiveFlag(false);
	*/
}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bdb0      	pop	{r4, r5, r7, pc}

080065da <_ZN9Dynamixel18communicationStartEv>:

void Dynamixel::communicationStart()
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
	rs485_.startSendIT();
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fb27 	bl	8006c38 <_ZN9HAL_RS48511startSendITEv>
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZN9Dynamixel12getCheckSum_EPh>:

uint16_t Dynamixel::getCheckSum_(uint8_t *buf)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
	uint8_t sum = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < buf[3] + 3; i++){ //buf[3](param_size) + (id + length : instruction)
 8006600:	2302      	movs	r3, #2
 8006602:	73bb      	strb	r3, [r7, #14]
 8006604:	7bba      	ldrb	r2, [r7, #14]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	3303      	adds	r3, #3
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	3303      	adds	r3, #3
 800660e:	429a      	cmp	r2, r3
 8006610:	da0a      	bge.n	8006628 <_ZN9Dynamixel12getCheckSum_EPh+0x36>
		sum += buf[i];
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	4413      	add	r3, r2
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	4413      	add	r3, r2
 800661e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < buf[3] + 3; i++){ //buf[3](param_size) + (id + length : instruction)
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	3301      	adds	r3, #1
 8006624:	73bb      	strb	r3, [r7, #14]
 8006626:	e7ed      	b.n	8006604 <_ZN9Dynamixel12getCheckSum_EPh+0x12>
	}

	return 0xff - (sum & 0xff); //If the calculated value exceeds 255, the lower 8 bits are set as SUM.
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006630:	b29b      	uxth	r3, r3
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <_ZN9DynamixelC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:

/* -----public------*/
Dynamixel::Dynamixel(UART_HandleTypeDef *huart_num, GPIO_TypeDef *gpio_type, uint16_t gpio_num) : rs485_(huart_num, gpio_type, gpio_num){}
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	807b      	strh	r3, [r7, #2]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	887b      	ldrh	r3, [r7, #2]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	f000 fa6a 	bl	8006b2c <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <_ZN9Dynamixel4pingEh>:
	if(rs485_.isCommunicating() == false) communicationStart();
}

/* ping */
uint8_t Dynamixel::ping(uint8_t id)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	70fb      	strb	r3, [r7, #3]
	/* ---Send Instruction packet--- */
	uint8_t send_buf[6];
	send_buf[0] = 0xff;
 800666e:	23ff      	movs	r3, #255	; 0xff
 8006670:	743b      	strb	r3, [r7, #16]
	send_buf[1] = 0xff;
 8006672:	23ff      	movs	r3, #255	; 0xff
 8006674:	747b      	strb	r3, [r7, #17]
	send_buf[2] = id;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	74bb      	strb	r3, [r7, #18]
	send_buf[3] = 2; //(Instruction + Checksum)
 800667a:	2302      	movs	r3, #2
 800667c:	74fb      	strb	r3, [r7, #19]
	send_buf[4] = INSTRUCTION_PING;
 800667e:	2301      	movs	r3, #1
 8006680:	753b      	strb	r3, [r7, #20]
	send_buf[5] = getCheckSum_(send_buf);
 8006682:	f107 0310 	add.w	r3, r7, #16
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ffb2 	bl	80065f2 <_ZN9Dynamixel12getCheckSum_EPh>
 800668e:	4603      	mov	r3, r0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	757b      	strb	r3, [r7, #21]

	rs485_.send(send_buf, 6);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f107 0110 	add.w	r1, r7, #16
 800669a:	2206      	movs	r2, #6
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fa63 	bl	8006b68 <_ZN9HAL_RS4854sendEPhh>

	/* ---Read status packet--- */
	uint8_t read_buf[6];
	rs485_.read(read_buf, 6);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f107 0108 	add.w	r1, r7, #8
 80066a8:	2206      	movs	r2, #6
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa8a 	bl	8006bc4 <_ZN9HAL_RS4854readEPhh>

	return read_buf[4]; //return Error status
 80066b0:	7b3b      	ldrb	r3, [r7, #12]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZN9Dynamixel6torqueEhh>:
{
	*error = status_packet_led_[4];
}

void Dynamixel::torque(uint8_t id, uint8_t status)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b088      	sub	sp, #32
 80066be:	af04      	add	r7, sp, #16
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
 80066c6:	4613      	mov	r3, r2
 80066c8:	70bb      	strb	r3, [r7, #2]
	uint8_t write_param[2];
	write_param[0] = ADDRESS_TORQUE_ENABLE;
 80066ca:	2340      	movs	r3, #64	; 0x40
 80066cc:	733b      	strb	r3, [r7, #12]
	write_param[1] = status;
 80066ce:	78bb      	ldrb	r3, [r7, #2]
 80066d0:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_WRITE, 2, write_param, 0, status_packet_torque_enable_);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	330d      	adds	r3, #13
 80066d6:	78f9      	ldrb	r1, [r7, #3]
 80066d8:	9302      	str	r3, [sp, #8]
 80066da:	2300      	movs	r3, #0
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2302      	movs	r3, #2
 80066e6:	2203      	movs	r2, #3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff fee7 	bl	80064bc <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fafd 	bl	8006cf0 <_ZN9HAL_RS48515isCommunicatingEv>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f083 0301 	eor.w	r3, r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <_ZN9Dynamixel6torqueEhh+0x4e>
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff ff69 	bl	80065da <_ZN9Dynamixel18communicationStartEv>
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN9Dynamixel15setGoalPositionEhf>:
{
	*error = status_packet_torque_enable_[4];
}

void Dynamixel::setGoalPosition(uint8_t id, float position)
{
 8006710:	b590      	push	{r4, r7, lr}
 8006712:	b08d      	sub	sp, #52	; 0x34
 8006714:	af04      	add	r7, sp, #16
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	460b      	mov	r3, r1
 800671a:	ed87 0a01 	vstr	s0, [r7, #4]
 800671e:	72fb      	strb	r3, [r7, #11]
	uint8_t write_param[5];
	int32_t value = (int32_t)(position * 4095 / 359.9);
 8006720:	edd7 7a01 	vldr	s15, [r7, #4]
 8006724:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80067b8 <_ZN9Dynamixel15setGoalPositionEhf+0xa8>
 8006728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800672c:	ee17 0a90 	vmov	r0, s15
 8006730:	f7f9 ff2a 	bl	8000588 <__aeabi_f2d>
 8006734:	a31e      	add	r3, pc, #120	; (adr r3, 80067b0 <_ZN9Dynamixel15setGoalPositionEhf+0xa0>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7fa f8a7 	bl	800088c <__aeabi_ddiv>
 800673e:	4603      	mov	r3, r0
 8006740:	460c      	mov	r4, r1
 8006742:	4618      	mov	r0, r3
 8006744:	4621      	mov	r1, r4
 8006746:	f7fa fa27 	bl	8000b98 <__aeabi_d2iz>
 800674a:	4603      	mov	r3, r0
 800674c:	61fb      	str	r3, [r7, #28]
	write_param[0] = ADDRESS_GOAL_POSITION;
 800674e:	2374      	movs	r3, #116	; 0x74
 8006750:	753b      	strb	r3, [r7, #20]
	write_param[1] = value & 0xff;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	757b      	strb	r3, [r7, #21]
	write_param[2] = (value >> 8) & 0xff;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	121b      	asrs	r3, r3, #8
 800675c:	b2db      	uxtb	r3, r3
 800675e:	75bb      	strb	r3, [r7, #22]
	write_param[3] = (value >> 16) & 0xff;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	141b      	asrs	r3, r3, #16
 8006764:	b2db      	uxtb	r3, r3
 8006766:	75fb      	strb	r3, [r7, #23]
	write_param[4] = (value >> 24) & 0xff;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	0e1b      	lsrs	r3, r3, #24
 800676c:	b2db      	uxtb	r3, r3
 800676e:	763b      	strb	r3, [r7, #24]

	setPacket(id, INSTRUCTION_WRITE, 5, write_param, 0, status_packet_goal_position_);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3313      	adds	r3, #19
 8006774:	7af9      	ldrb	r1, [r7, #11]
 8006776:	9302      	str	r3, [sp, #8]
 8006778:	2300      	movs	r3, #0
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	2305      	movs	r3, #5
 8006784:	2203      	movs	r2, #3
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fe98 	bl	80064bc <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 faae 	bl	8006cf0 <_ZN9HAL_RS48515isCommunicatingEv>
 8006794:	4603      	mov	r3, r0
 8006796:	f083 0301 	eor.w	r3, r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <_ZN9Dynamixel15setGoalPositionEhf+0x96>
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff ff1a 	bl	80065da <_ZN9Dynamixel18communicationStartEv>
}
 80067a6:	bf00      	nop
 80067a8:	3724      	adds	r7, #36	; 0x24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd90      	pop	{r4, r7, pc}
 80067ae:	bf00      	nop
 80067b0:	66666666 	.word	0x66666666
 80067b4:	40767e66 	.word	0x40767e66
 80067b8:	457ff000 	.word	0x457ff000

080067bc <_ZN9Dynamixel16setOperatingModeEhh>:
{
	*error = status_packet_goal_position_[4];
}

void Dynamixel::setOperatingMode(uint8_t id, uint8_t mode)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
 80067c8:	4613      	mov	r3, r2
 80067ca:	70bb      	strb	r3, [r7, #2]
	uint8_t write_param[2];
	write_param[0] = ADDRESS_OPERATING_MODE;
 80067cc:	230b      	movs	r3, #11
 80067ce:	733b      	strb	r3, [r7, #12]
	write_param[1] = mode;
 80067d0:	78bb      	ldrb	r3, [r7, #2]
 80067d2:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_WRITE, 2, write_param, 0, status_packet_operating_mode_);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3307      	adds	r3, #7
 80067d8:	78f9      	ldrb	r1, [r7, #3]
 80067da:	9302      	str	r3, [sp, #8]
 80067dc:	2300      	movs	r3, #0
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2302      	movs	r3, #2
 80067e8:	2203      	movs	r2, #3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fe66 	bl	80064bc <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa7c 	bl	8006cf0 <_ZN9HAL_RS48515isCommunicatingEv>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f083 0301 	eor.w	r3, r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <_ZN9Dynamixel16setOperatingModeEhh+0x4e>
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fee8 	bl	80065da <_ZN9Dynamixel18communicationStartEv>
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <_ZN9Dynamixel18requestTemperatureEh>:
	*error = status_packet_operating_mode_[4];
}

/* read */
void Dynamixel::requestTemperature(uint8_t id)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b088      	sub	sp, #32
 8006816:	af04      	add	r7, sp, #16
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
	uint8_t write_param[2];
	uint8_t byte_size = 0x01;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
	write_param[0] = ADDRESS_PRESENT_TEMPERATURE;
 8006822:	2392      	movs	r3, #146	; 0x92
 8006824:	733b      	strb	r3, [r7, #12]
	write_param[1] = byte_size; //byte size
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_READ, 2, write_param, byte_size, status_packet_tempareture_);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	331f      	adds	r3, #31
 800682e:	78f9      	ldrb	r1, [r7, #3]
 8006830:	9302      	str	r3, [sp, #8]
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	f107 030c 	add.w	r3, r7, #12
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2302      	movs	r3, #2
 800683e:	2202      	movs	r2, #2
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fe3b 	bl	80064bc <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fa51 	bl	8006cf0 <_ZN9HAL_RS48515isCommunicatingEv>
 800684e:	4603      	mov	r3, r0
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <_ZN9Dynamixel18requestTemperatureEh+0x4e>
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff febd 	bl	80065da <_ZN9Dynamixel18communicationStartEv>

}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <_ZN9Dynamixel14getTemperatureEPh>:

uint8_t Dynamixel::getTemperature(uint8_t *error)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < STATUS_PACKET_PRESENT_TEMPERATURE_LEN; i++){
 8006872:	2300      	movs	r3, #0
 8006874:	81fb      	strh	r3, [r7, #14]
 8006876:	89fb      	ldrh	r3, [r7, #14]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d80a      	bhi.n	8006892 <_ZN9Dynamixel14getTemperatureEPh+0x2a>
		mon_res_temperature[i] = status_packet_tempareture_[i];
 800687c:	89fa      	ldrh	r2, [r7, #14]
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	440a      	add	r2, r1
 8006884:	7fd1      	ldrb	r1, [r2, #31]
 8006886:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <_ZN9Dynamixel14getTemperatureEPh+0x48>)
 8006888:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < STATUS_PACKET_PRESENT_TEMPERATURE_LEN; i++){
 800688a:	89fb      	ldrh	r3, [r7, #14]
 800688c:	3301      	adds	r3, #1
 800688e:	81fb      	strh	r3, [r7, #14]
 8006890:	e7f1      	b.n	8006876 <_ZN9Dynamixel14getTemperatureEPh+0xe>
	}

	*error= status_packet_tempareture_[4];
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	701a      	strb	r2, [r3, #0]

	return status_packet_tempareture_[5];
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	200003fc 	.word	0x200003fc

080068b4 <_ZN9Dynamixel19requestInputVoltageEh>:

void Dynamixel::requestInputVoltage(uint8_t id)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af04      	add	r7, sp, #16
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
	uint8_t write_param[2];
	uint8_t byte_size = 0x02;
 80068c0:	2302      	movs	r3, #2
 80068c2:	73fb      	strb	r3, [r7, #15]
	write_param[0] = ADDRESS_PURESENT_INPUT_VOLTAGE;
 80068c4:	2390      	movs	r3, #144	; 0x90
 80068c6:	733b      	strb	r3, [r7, #12]
	write_param[1] = byte_size; //byte size
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	737b      	strb	r3, [r7, #13]

	setPacket(id, INSTRUCTION_READ, 2, write_param, byte_size, status_packet_inputvoltage_);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3326      	adds	r3, #38	; 0x26
 80068d0:	78f9      	ldrb	r1, [r7, #3]
 80068d2:	9302      	str	r3, [sp, #8]
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2302      	movs	r3, #2
 80068e0:	2202      	movs	r2, #2
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fdea 	bl	80064bc <_ZN9Dynamixel9setPacketEhhhPhhS0_>

	if(rs485_.isCommunicating() == false) communicationStart();
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fa00 	bl	8006cf0 <_ZN9HAL_RS48515isCommunicatingEv>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f083 0301 	eor.w	r3, r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <_ZN9Dynamixel19requestInputVoltageEh+0x4e>
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fe6c 	bl	80065da <_ZN9Dynamixel18communicationStartEv>

}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <_ZN9Dynamixel15getInputVoltageEPh>:

float Dynamixel::getInputVoltage(uint8_t *error)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
	*error= status_packet_inputvoltage_[4];
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	701a      	strb	r2, [r3, #0]

	return float(status_packet_inputvoltage_[5]) / 10;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006930:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006934:	eef0 7a66 	vmov.f32	s15, s13
}
 8006938:	eeb0 0a67 	vmov.f32	s0, s15
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_UART_TxCpltCallback>:
UART_HandleTypeDef *g_huart_num_;
GPIO_TypeDef *g_gpio_type;
uint16_t g_gpio_num;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006948:	b5b0      	push	{r4, r5, r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_RESET); //RS485 Send mode disable
 8006950:	4b3c      	ldr	r3, [pc, #240]	; (8006a44 <HAL_UART_TxCpltCallback+0xfc>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4b3c      	ldr	r3, [pc, #240]	; (8006a48 <HAL_UART_TxCpltCallback+0x100>)
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	2200      	movs	r2, #0
 800695a:	4619      	mov	r1, r3
 800695c:	f001 fa84 	bl	8007e68 <HAL_GPIO_WritePin>
	mon_tx_cnt++;
 8006960:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <HAL_UART_TxCpltCallback+0x104>)
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	4b38      	ldr	r3, [pc, #224]	; (8006a4c <HAL_UART_TxCpltCallback+0x104>)
 800696a:	801a      	strh	r2, [r3, #0]

	uint8_t *p_temp_data;
	uint16_t temp_data_length;
	p_temp_data = g_buf_data.getFirstReadPointerBuf(&temp_data_length);
 800696c:	f107 030e 	add.w	r3, r7, #14
 8006970:	4619      	mov	r1, r3
 8006972:	4837      	ldr	r0, [pc, #220]	; (8006a50 <HAL_UART_TxCpltCallback+0x108>)
 8006974:	f7fa ff8f 	bl	8001896 <_ZN7BufData22getFirstReadPointerBufEPt>
 8006978:	61f8      	str	r0, [r7, #28]

	bool no_receive_flag = g_buf_data.getFirstNoReceiveFlagBuf();
 800697a:	4835      	ldr	r0, [pc, #212]	; (8006a50 <HAL_UART_TxCpltCallback+0x108>)
 800697c:	f7fa fff4 	bl	8001968 <_ZN7BufData24getFirstNoReceiveFlagBufEv>
 8006980:	4603      	mov	r3, r0
 8006982:	76fb      	strb	r3, [r7, #27]

	if(no_receive_flag == false){ //If there is data received from the device. Start receiveing.
 8006984:	7efb      	ldrb	r3, [r7, #27]
 8006986:	f083 0301 	eor.w	r3, r3, #1
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <HAL_UART_TxCpltCallback+0x58>
		HAL_UART_Receive_IT(g_huart_num_, (uint8_t*) p_temp_data, temp_data_length);
 8006990:	4b30      	ldr	r3, [pc, #192]	; (8006a54 <HAL_UART_TxCpltCallback+0x10c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	89fa      	ldrh	r2, [r7, #14]
 8006996:	69f9      	ldr	r1, [r7, #28]
 8006998:	4618      	mov	r0, r3
 800699a:	f002 f9b4 	bl	8008d06 <HAL_UART_Receive_IT>
		}
		else{
			g_communicating_flag = false;
		}
	}
}
 800699e:	e04d      	b.n	8006a3c <HAL_UART_TxCpltCallback+0xf4>
		HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET); //RS485 Send mode enable
 80069a0:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <HAL_UART_TxCpltCallback+0xfc>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4b28      	ldr	r3, [pc, #160]	; (8006a48 <HAL_UART_TxCpltCallback+0x100>)
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	2201      	movs	r2, #1
 80069aa:	4619      	mov	r1, r3
 80069ac:	f001 fa5c 	bl	8007e68 <HAL_GPIO_WritePin>
		g_buf_data.deleteFirstBuf();
 80069b0:	4827      	ldr	r0, [pc, #156]	; (8006a50 <HAL_UART_TxCpltCallback+0x108>)
 80069b2:	f7fa fe56 	bl	8001662 <_ZN7BufData14deleteFirstBufEv>
		uint16_t length = g_buf_data.getFirstSendBufLength();
 80069b6:	4826      	ldr	r0, [pc, #152]	; (8006a50 <HAL_UART_TxCpltCallback+0x108>)
 80069b8:	f7fa fe18 	bl	80015ec <_ZN7BufData21getFirstSendBufLengthEv>
 80069bc:	4603      	mov	r3, r0
 80069be:	833b      	strh	r3, [r7, #24]
		if(length != 0){ //If there is a message in the buffer
 80069c0:	8b3b      	ldrh	r3, [r7, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d037      	beq.n	8006a36 <HAL_UART_TxCpltCallback+0xee>
			HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 80069c6:	466b      	mov	r3, sp
 80069c8:	461d      	mov	r5, r3
			uint8_t temp_data[length];
 80069ca:	8b3b      	ldrh	r3, [r7, #24]
 80069cc:	1e58      	subs	r0, r3, #1
 80069ce:	6178      	str	r0, [r7, #20]
 80069d0:	4603      	mov	r3, r0
 80069d2:	3301      	adds	r3, #1
 80069d4:	4619      	mov	r1, r3
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	f04f 0400 	mov.w	r4, #0
 80069e2:	00d4      	lsls	r4, r2, #3
 80069e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80069e8:	00cb      	lsls	r3, r1, #3
 80069ea:	4603      	mov	r3, r0
 80069ec:	3301      	adds	r3, #1
 80069ee:	4619      	mov	r1, r3
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	f04f 0400 	mov.w	r4, #0
 80069fc:	00d4      	lsls	r4, r2, #3
 80069fe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006a02:	00cb      	lsls	r3, r1, #3
 8006a04:	4603      	mov	r3, r0
 8006a06:	3301      	adds	r3, #1
 8006a08:	3307      	adds	r3, #7
 8006a0a:	08db      	lsrs	r3, r3, #3
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	ebad 0d03 	sub.w	sp, sp, r3
 8006a12:	466b      	mov	r3, sp
 8006a14:	3300      	adds	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
			g_buf_data.getFirstSendBuf(temp_data, length);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	8b3a      	ldrh	r2, [r7, #24]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	480c      	ldr	r0, [pc, #48]	; (8006a50 <HAL_UART_TxCpltCallback+0x108>)
 8006a20:	f7fa fdf8 	bl	8001614 <_ZN7BufData15getFirstSendBufEPht>
			HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <HAL_UART_TxCpltCallback+0x10c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6939      	ldr	r1, [r7, #16]
 8006a2a:	8b3a      	ldrh	r2, [r7, #24]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 f925 	bl	8008c7c <HAL_UART_Transmit_IT>
 8006a32:	46ad      	mov	sp, r5
}
 8006a34:	e002      	b.n	8006a3c <HAL_UART_TxCpltCallback+0xf4>
			g_communicating_flag = false;
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <HAL_UART_TxCpltCallback+0x110>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bdb0      	pop	{r4, r5, r7, pc}
 8006a44:	2000045c 	.word	0x2000045c
 8006a48:	20000460 	.word	0x20000460
 8006a4c:	20000406 	.word	0x20000406
 8006a50:	2000040c 	.word	0x2000040c
 8006a54:	20000458 	.word	0x20000458
 8006a58:	20000454 	.word	0x20000454

08006a5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a5c:	b5b0      	push	{r4, r5, r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET); //RS485 Send mode enable
 8006a64:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <HAL_UART_RxCpltCallback+0xb8>)
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_UART_RxCpltCallback+0xbc>)
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f001 f9fa 	bl	8007e68 <HAL_GPIO_WritePin>
	mon_rx_cnt++;
 8006a74:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <HAL_UART_RxCpltCallback+0xc0>)
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	4b27      	ldr	r3, [pc, #156]	; (8006b1c <HAL_UART_RxCpltCallback+0xc0>)
 8006a7e:	801a      	strh	r2, [r3, #0]

	// Preapare next data.
	g_buf_data.deleteFirstBuf();
 8006a80:	4827      	ldr	r0, [pc, #156]	; (8006b20 <HAL_UART_RxCpltCallback+0xc4>)
 8006a82:	f7fa fdee 	bl	8001662 <_ZN7BufData14deleteFirstBufEv>

	uint16_t length = g_buf_data.getFirstSendBufLength();
 8006a86:	4826      	ldr	r0, [pc, #152]	; (8006b20 <HAL_UART_RxCpltCallback+0xc4>)
 8006a88:	f7fa fdb0 	bl	80015ec <_ZN7BufData21getFirstSendBufLengthEv>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	82fb      	strh	r3, [r7, #22]
	if(length != 0){ //If there is a message in the buffer
 8006a90:	8afb      	ldrh	r3, [r7, #22]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d037      	beq.n	8006b06 <HAL_UART_RxCpltCallback+0xaa>
		uint8_t temp_data[length];
		g_buf_data.getFirstSendBuf(temp_data, length);

		HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 8006a96:	466b      	mov	r3, sp
 8006a98:	461d      	mov	r5, r3
		uint8_t temp_data[length];
 8006a9a:	8afb      	ldrh	r3, [r7, #22]
 8006a9c:	1e58      	subs	r0, r3, #1
 8006a9e:	6138      	str	r0, [r7, #16]
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	f04f 0400 	mov.w	r4, #0
 8006ab2:	00d4      	lsls	r4, r2, #3
 8006ab4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006ab8:	00cb      	lsls	r3, r1, #3
 8006aba:	4603      	mov	r3, r0
 8006abc:	3301      	adds	r3, #1
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	f04f 0400 	mov.w	r4, #0
 8006acc:	00d4      	lsls	r4, r2, #3
 8006ace:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006ad2:	00cb      	lsls	r3, r1, #3
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	3307      	adds	r3, #7
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	ebad 0d03 	sub.w	sp, sp, r3
 8006ae2:	466b      	mov	r3, sp
 8006ae4:	3300      	adds	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
		g_buf_data.getFirstSendBuf(temp_data, length);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8afa      	ldrh	r2, [r7, #22]
 8006aec:	4619      	mov	r1, r3
 8006aee:	480c      	ldr	r0, [pc, #48]	; (8006b20 <HAL_UART_RxCpltCallback+0xc4>)
 8006af0:	f7fa fd90 	bl	8001614 <_ZN7BufData15getFirstSendBufEPht>
		HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <HAL_UART_RxCpltCallback+0xc8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	8afa      	ldrh	r2, [r7, #22]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 f8bd 	bl	8008c7c <HAL_UART_Transmit_IT>
 8006b02:	46ad      	mov	sp, r5
	}
	else{
		g_communicating_flag = false;
	}

}
 8006b04:	e002      	b.n	8006b0c <HAL_UART_RxCpltCallback+0xb0>
		g_communicating_flag = false;
 8006b06:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <HAL_UART_RxCpltCallback+0xcc>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bdb0      	pop	{r4, r5, r7, pc}
 8006b14:	2000045c 	.word	0x2000045c
 8006b18:	20000460 	.word	0x20000460
 8006b1c:	20000408 	.word	0x20000408
 8006b20:	2000040c 	.word	0x2000040c
 8006b24:	20000458 	.word	0x20000458
 8006b28:	20000454 	.word	0x20000454

08006b2c <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>:

/* ------- private ------ */

/* ------- public ------- */
HAL_RS485::HAL_RS485(){}
HAL_RS485::HAL_RS485(UART_HandleTypeDef *huart_num, GPIO_TypeDef *gpio_type, uint16_t gpio_num)
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	807b      	strh	r3, [r7, #2]
{
	g_huart_num_ = huart_num;
 8006b3a:	4a08      	ldr	r2, [pc, #32]	; (8006b5c <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x30>)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6013      	str	r3, [r2, #0]
	g_gpio_type = gpio_type;
 8006b40:	4a07      	ldr	r2, [pc, #28]	; (8006b60 <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x34>)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6013      	str	r3, [r2, #0]
	g_gpio_num = gpio_num;
 8006b46:	4a07      	ldr	r2, [pc, #28]	; (8006b64 <_ZN9HAL_RS485C1EP20__UART_HandleTypeDefP12GPIO_TypeDeft+0x38>)
 8006b48:	887b      	ldrh	r3, [r7, #2]
 8006b4a:	8013      	strh	r3, [r2, #0]
}
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20000458 	.word	0x20000458
 8006b60:	2000045c 	.word	0x2000045c
 8006b64:	20000460 	.word	0x20000460

08006b68 <_ZN9HAL_RS4854sendEPhh>:

void HAL_RS485::send(uint8_t *s, uint8_t size)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET);
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <_ZN9HAL_RS4854sendEPhh+0x50>)
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <_ZN9HAL_RS4854sendEPhh+0x54>)
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4619      	mov	r1, r3
 8006b82:	f001 f971 	bl	8007e68 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(g_huart_num_, (uint8_t*) s, size, 0xFFFF);
 8006b86:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <_ZN9HAL_RS4854sendEPhh+0x58>)
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f001 ff33 	bl	80089fe <HAL_UART_Transmit>
	HAL_Delay(0.2);
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f000 fe7d 	bl	8007898 <HAL_Delay>

	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_RESET);
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <_ZN9HAL_RS4854sendEPhh+0x50>)
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <_ZN9HAL_RS4854sendEPhh+0x54>)
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f001 f95d 	bl	8007e68 <HAL_GPIO_WritePin>
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2000045c 	.word	0x2000045c
 8006bbc:	20000460 	.word	0x20000460
 8006bc0:	20000458 	.word	0x20000458

08006bc4 <_ZN9HAL_RS4854readEPhh>:

void HAL_RS485::read(uint8_t *s, uint8_t size)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(g_huart_num_, (uint8_t*) s, size, 0xFFFF);
 8006bd2:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <_ZN9HAL_RS4854readEPhh+0x30>)
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	f001 ffa6 	bl	8008b30 <HAL_UART_Receive>
	HAL_Delay(0.2);
 8006be4:	2000      	movs	r0, #0
 8006be6:	f000 fe57 	bl	8007898 <HAL_Delay>
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000458 	.word	0x20000458

08006bf8 <_ZN9HAL_RS4857setBufsEPhtS0_tb>:
	g_buf_data.setNoReceiveFlagBuf(flag);
}
*/

void HAL_RS485::setBufs(uint8_t *send_data, uint16_t send_data_length, uint8_t *read_data_pointer, uint16_t read_data_pointer_length, bool flag)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	80fb      	strh	r3, [r7, #6]
	g_buf_data.setSendBuf(send_data, send_data_length);
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	4809      	ldr	r0, [pc, #36]	; (8006c34 <_ZN9HAL_RS4857setBufsEPhtS0_tb+0x3c>)
 8006c10:	f7fa fc8c 	bl	800152c <_ZN7BufData10setSendBufEPht>
	g_buf_data.setReadPointerBuf(read_data_pointer, read_data_pointer_length);
 8006c14:	8b3b      	ldrh	r3, [r7, #24]
 8006c16:	461a      	mov	r2, r3
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	4806      	ldr	r0, [pc, #24]	; (8006c34 <_ZN9HAL_RS4857setBufsEPhtS0_tb+0x3c>)
 8006c1c:	f7fa fe09 	bl	8001832 <_ZN7BufData17setReadPointerBufEPht>
	g_buf_data.setNoReceiveFlagBuf(flag);
 8006c20:	7f3b      	ldrb	r3, [r7, #28]
 8006c22:	4619      	mov	r1, r3
 8006c24:	4803      	ldr	r0, [pc, #12]	; (8006c34 <_ZN9HAL_RS4857setBufsEPhtS0_tb+0x3c>)
 8006c26:	f7fa fe51 	bl	80018cc <_ZN7BufData19setNoReceiveFlagBufEb>

}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	2000040c 	.word	0x2000040c

08006c38 <_ZN9HAL_RS48511startSendITEv>:

void HAL_RS485::startSendIT()
{
 8006c38:	b5b0      	push	{r4, r5, r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[length];
	g_buf_data.getFirstSendBuf(temp_data, length);

	g_communicating_flag = true;
	HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
	HAL_Delay(1);
 8006c40:	466b      	mov	r3, sp
 8006c42:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(g_gpio_type, g_gpio_num, GPIO_PIN_SET); //RS485 Send mode enable
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <_ZN9HAL_RS48511startSendITEv+0xa4>)
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	4b25      	ldr	r3, [pc, #148]	; (8006ce0 <_ZN9HAL_RS48511startSendITEv+0xa8>)
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f001 f90a 	bl	8007e68 <HAL_GPIO_WritePin>
	uint16_t length = g_buf_data.getFirstSendBufLength();
 8006c54:	4823      	ldr	r0, [pc, #140]	; (8006ce4 <_ZN9HAL_RS48511startSendITEv+0xac>)
 8006c56:	f7fa fcc9 	bl	80015ec <_ZN7BufData21getFirstSendBufLengthEv>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	82fb      	strh	r3, [r7, #22]
	uint8_t temp_data[length];
 8006c5e:	8afb      	ldrh	r3, [r7, #22]
 8006c60:	1e58      	subs	r0, r3, #1
 8006c62:	6138      	str	r0, [r7, #16]
 8006c64:	4603      	mov	r3, r0
 8006c66:	3301      	adds	r3, #1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	f04f 0400 	mov.w	r4, #0
 8006c76:	00d4      	lsls	r4, r2, #3
 8006c78:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006c7c:	00cb      	lsls	r3, r1, #3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	3301      	adds	r3, #1
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	f04f 0400 	mov.w	r4, #0
 8006c90:	00d4      	lsls	r4, r2, #3
 8006c92:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4603      	mov	r3, r0
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	3307      	adds	r3, #7
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	ebad 0d03 	sub.w	sp, sp, r3
 8006ca6:	466b      	mov	r3, sp
 8006ca8:	3300      	adds	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
	g_buf_data.getFirstSendBuf(temp_data, length);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8afa      	ldrh	r2, [r7, #22]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	480c      	ldr	r0, [pc, #48]	; (8006ce4 <_ZN9HAL_RS48511startSendITEv+0xac>)
 8006cb4:	f7fa fcae 	bl	8001614 <_ZN7BufData15getFirstSendBufEPht>
	g_communicating_flag = true;
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <_ZN9HAL_RS48511startSendITEv+0xb0>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(g_huart_num_, (uint8_t*) temp_data, length);
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <_ZN9HAL_RS48511startSendITEv+0xb4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	8afa      	ldrh	r2, [r7, #22]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 ffd8 	bl	8008c7c <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 8006ccc:	2001      	movs	r0, #1
 8006cce:	f000 fde3 	bl	8007898 <HAL_Delay>
 8006cd2:	46ad      	mov	sp, r5
}
 8006cd4:	bf00      	nop
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bdb0      	pop	{r4, r5, r7, pc}
 8006cdc:	2000045c 	.word	0x2000045c
 8006ce0:	20000460 	.word	0x20000460
 8006ce4:	2000040c 	.word	0x2000040c
 8006ce8:	20000454 	.word	0x20000454
 8006cec:	20000458 	.word	0x20000458

08006cf0 <_ZN9HAL_RS48515isCommunicatingEv>:

bool HAL_RS485::isCommunicating()
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	return g_communicating_flag;
 8006cf8:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <_ZN9HAL_RS48515isCommunicatingEv+0x18>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	20000454 	.word	0x20000454

08006d0c <_ZN7BufDataD1Ev>:

#include "stm32f4xx_hal.h"
#include <vector>
#include <algorithm>

class BufData{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3330      	adds	r3, #48	; 0x30
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f88a 	bl	8006e32 <_ZNSt6vectorIbSaIbEED1Ev>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3320      	adds	r3, #32
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f86a 	bl	8006dfc <_ZNSt6vectorItSaItEED1Ev>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3314      	adds	r3, #20
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 f84a 	bl	8006dc6 <_ZNSt6vectorIPhSaIS0_EED1Ev>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f82a 	bl	8006d90 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <_Z41__static_initialization_and_destruction_0ii>:
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d109      	bne.n	8006d6c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d104      	bne.n	8006d6c <_Z41__static_initialization_and_destruction_0ii+0x24>
BufData g_buf_data(BUF_SIZE);
 8006d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d66:	4809      	ldr	r0, [pc, #36]	; (8006d8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006d68:	f7fa fb91 	bl	800148e <_ZN7BufDataC1Et>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d102      	bne.n	8006d82 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006d7e:	f7ff ffc5 	bl	8006d0c <_ZN7BufDataD1Ev>
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	2000040c 	.word	0x2000040c

08006d90 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006d90:	b5b0      	push	{r4, r5, r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681c      	ldr	r4, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fb f968 	bl	8002078 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8006da8:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006daa:	461a      	mov	r2, r3
 8006dac:	4629      	mov	r1, r5
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7fb f96d 	bl	800208e <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f854 	bl	8006e64 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bdb0      	pop	{r4, r5, r7, pc}

08006dc6 <_ZNSt6vectorIPhSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006dc6:	b5b0      	push	{r4, r5, r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681c      	ldr	r4, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fb f973 	bl	80020c4 <_ZNSt12_Vector_baseIPhSaIS0_EE19_M_get_Tp_allocatorEv>
 8006dde:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006de0:	461a      	mov	r2, r3
 8006de2:	4629      	mov	r1, r5
 8006de4:	4620      	mov	r0, r4
 8006de6:	f7fb f978 	bl	80020da <_ZSt8_DestroyIPPhS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f865 	bl	8006ebc <_ZNSt12_Vector_baseIPhSaIS0_EED1Ev>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bdb0      	pop	{r4, r5, r7, pc}

08006dfc <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006dfc:	b5b0      	push	{r4, r5, r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681c      	ldr	r4, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fb f97e 	bl	8002110 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006e14:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006e16:	461a      	mov	r2, r3
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7fb f983 	bl	8002126 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f870 	bl	8006f08 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bdb0      	pop	{r4, r5, r7, pc}

08006e32 <_ZNSt6vectorIbSaIbEED1Ev>:
    ~vector() _GLIBCXX_NOEXCEPT { }
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f889 	bl	8006f54 <_ZNSt13_Bvector_baseISaIbEED1Ev>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f88d 	bl	8006f74 <_ZNSaISt6vectorIhSaIhEEED1Ev>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006e74:	461a      	mov	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	109b      	asrs	r3, r3, #2
 8006e7e:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x3c>)
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006e84:	461a      	mov	r2, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fc fa8d 	bl	80033a6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff ffdc 	bl	8006e4c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	aaaaaaab 	.word	0xaaaaaaab

08006ea4 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f86d 	bl	8006f8c <_ZNSaIPhED1Ev>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <_ZNSt12_Vector_baseIPhSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6819      	ldr	r1, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fc fa99 	bl	8003410 <_ZNSt12_Vector_baseIPhSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff ffdf 	bl	8006ea4 <_ZNSt12_Vector_baseIPhSaIS0_EE12_Vector_implD1Ev>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f853 	bl	8006fa4 <_ZNSaItED1Ev>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	105b      	asrs	r3, r3, #1
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8006f22:	461a      	mov	r2, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fc faa8 	bl	800347a <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
		      - this->_M_impl._M_start); }
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ffdf 	bl	8006ef0 <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>:
      struct _Bvector_impl
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f839 	bl	8006fbc <_ZNSaImED1Ev>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <_ZNSt13_Bvector_baseISaIbEED1Ev>:
      ~_Bvector_base()
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fc fac4 	bl	80034ea <_ZNSt13_Bvector_baseISaIbEE13_M_deallocateEv>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ffe9 	bl	8006f3c <_ZNSt13_Bvector_baseISaIbEE13_Bvector_implD1Ev>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <_ZNSaISt6vectorIhSaIhEEED1Ev>:
      ~allocator() throw() { }
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f829 	bl	8006fd4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <_ZNSaIPhED1Ev>:
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f828 	bl	8006fea <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <_ZNSaItED1Ev>:
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f827 	bl	8007000 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <_ZNSaImED1Ev>:
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f826 	bl	8007016 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <_ZN9__gnu_cxx13new_allocatorIPhED1Ev>:
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <_GLOBAL__sub_I_mon_tx_cnt>:
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
 8007030:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007034:	2001      	movs	r0, #1
 8007036:	f7ff fe87 	bl	8006d48 <_Z41__static_initialization_and_destruction_0ii>
 800703a:	bd80      	pop	{r7, pc}

0800703c <_GLOBAL__sub_D_mon_tx_cnt>:
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
 8007040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007044:	2000      	movs	r0, #0
 8007046:	f7ff fe7f 	bl	8006d48 <_Z41__static_initialization_and_destruction_0ii>
 800704a:	bd80      	pop	{r7, pc}

0800704c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007054:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007058:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d013      	beq.n	800708c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007064:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007068:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800706c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007074:	e000      	b.n	8007078 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007076:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007078:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f9      	beq.n	8007076 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007082:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800708c:	687b      	ldr	r3, [r7, #4]
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	e009      	b.n	80070c0 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	60ba      	str	r2, [r7, #8]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff ffc9 	bl	800704c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	3301      	adds	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	dbf1      	blt.n	80070ac <_write+0x12>
  }
  return len;
 80070c8:	687b      	ldr	r3, [r7, #4]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070d6:	f000 fb6d 	bl	80077b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070da:	f000 f809 	bl	80070f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070de:	f000 f8a3 	bl	8007228 <MX_GPIO_Init>
  MX_UART5_Init();
 80070e2:	f000 f877 	bl	80071d4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  cppInit(); //<- Edit
 80070e6:	f000 fa9d 	bl	8007624 <cppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 cppLoop(); //<- Edit
 80070ea:	f000 fac3 	bl	8007674 <cppLoop>
 80070ee:	e7fc      	b.n	80070ea <main+0x18>

080070f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b094      	sub	sp, #80	; 0x50
 80070f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80070f6:	f107 031c 	add.w	r3, r7, #28
 80070fa:	2234      	movs	r2, #52	; 0x34
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 fcd0 	bl	8009aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007104:	f107 0308 	add.w	r3, r7, #8
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007114:	2300      	movs	r3, #0
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	4b2c      	ldr	r3, [pc, #176]	; (80071cc <SystemClock_Config+0xdc>)
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <SystemClock_Config+0xdc>)
 800711e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007122:	6413      	str	r3, [r2, #64]	; 0x40
 8007124:	4b29      	ldr	r3, [pc, #164]	; (80071cc <SystemClock_Config+0xdc>)
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007130:	2300      	movs	r3, #0
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4b26      	ldr	r3, [pc, #152]	; (80071d0 <SystemClock_Config+0xe0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a25      	ldr	r2, [pc, #148]	; (80071d0 <SystemClock_Config+0xe0>)
 800713a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4b23      	ldr	r3, [pc, #140]	; (80071d0 <SystemClock_Config+0xe0>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800714c:	2301      	movs	r3, #1
 800714e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007154:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007156:	2302      	movs	r3, #2
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800715a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800715e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007160:	2304      	movs	r3, #4
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007164:	23b4      	movs	r3, #180	; 0xb4
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007168:	2302      	movs	r3, #2
 800716a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800716c:	2302      	movs	r3, #2
 800716e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007170:	2302      	movs	r3, #2
 8007172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007174:	f107 031c 	add.w	r3, r7, #28
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f999 	bl	80084b0 <HAL_RCC_OscConfig>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007184:	f000 f8be 	bl	8007304 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007188:	f000 fe88 	bl	8007e9c <HAL_PWREx_EnableOverDrive>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8007192:	f000 f8b7 	bl	8007304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007196:	230f      	movs	r3, #15
 8007198:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800719a:	2302      	movs	r3, #2
 800719c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80071a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80071a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80071a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80071ae:	f107 0308 	add.w	r3, r7, #8
 80071b2:	2105      	movs	r1, #5
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fec1 	bl	8007f3c <HAL_RCC_ClockConfig>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80071c0:	f000 f8a0 	bl	8007304 <Error_Handler>
  }
}
 80071c4:	bf00      	nop
 80071c6:	3750      	adds	r7, #80	; 0x50
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40023800 	.word	0x40023800
 80071d0:	40007000 	.word	0x40007000

080071d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80071d8:	4b11      	ldr	r3, [pc, #68]	; (8007220 <MX_UART5_Init+0x4c>)
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <MX_UART5_Init+0x50>)
 80071dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57143;
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <MX_UART5_Init+0x4c>)
 80071e0:	f64d 7237 	movw	r2, #57143	; 0xdf37
 80071e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80071e6:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <MX_UART5_Init+0x4c>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <MX_UART5_Init+0x4c>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <MX_UART5_Init+0x4c>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <MX_UART5_Init+0x4c>)
 80071fa:	220c      	movs	r2, #12
 80071fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <MX_UART5_Init+0x4c>)
 8007200:	2200      	movs	r2, #0
 8007202:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <MX_UART5_Init+0x4c>)
 8007206:	2200      	movs	r2, #0
 8007208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800720a:	4805      	ldr	r0, [pc, #20]	; (8007220 <MX_UART5_Init+0x4c>)
 800720c:	f001 fbaa 	bl	8008964 <HAL_UART_Init>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8007216:	f000 f875 	bl	8007304 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000468 	.word	0x20000468
 8007224:	40005000 	.word	0x40005000

08007228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	609a      	str	r2, [r3, #8]
 800723a:	60da      	str	r2, [r3, #12]
 800723c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	4b2e      	ldr	r3, [pc, #184]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	4a2d      	ldr	r2, [pc, #180]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007248:	f043 0304 	orr.w	r3, r3, #4
 800724c:	6313      	str	r3, [r2, #48]	; 0x30
 800724e:	4b2b      	ldr	r3, [pc, #172]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b27      	ldr	r3, [pc, #156]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4a26      	ldr	r2, [pc, #152]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007268:	6313      	str	r3, [r2, #48]	; 0x30
 800726a:	4b24      	ldr	r3, [pc, #144]	; (80072fc <MX_GPIO_Init+0xd4>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	4b20      	ldr	r3, [pc, #128]	; (80072fc <MX_GPIO_Init+0xd4>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	6313      	str	r3, [r2, #48]	; 0x30
 8007286:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	60bb      	str	r3, [r7, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	4b19      	ldr	r3, [pc, #100]	; (80072fc <MX_GPIO_Init+0xd4>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	4a18      	ldr	r2, [pc, #96]	; (80072fc <MX_GPIO_Init+0xd4>)
 800729c:	f043 0308 	orr.w	r3, r3, #8
 80072a0:	6313      	str	r3, [r2, #48]	; 0x30
 80072a2:	4b16      	ldr	r3, [pc, #88]	; (80072fc <MX_GPIO_Init+0xd4>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ae:	2300      	movs	r3, #0
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <MX_GPIO_Init+0xd4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	4a11      	ldr	r2, [pc, #68]	; (80072fc <MX_GPIO_Init+0xd4>)
 80072b8:	f043 0302 	orr.w	r3, r3, #2
 80072bc:	6313      	str	r3, [r2, #48]	; 0x30
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <MX_GPIO_Init+0xd4>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_HO_GPIO_Port, RS485_HO_Pin, GPIO_PIN_RESET);
 80072ca:	2200      	movs	r2, #0
 80072cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072d0:	480b      	ldr	r0, [pc, #44]	; (8007300 <MX_GPIO_Init+0xd8>)
 80072d2:	f000 fdc9 	bl	8007e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_HO_Pin */
  GPIO_InitStruct.Pin = RS485_HO_Pin;
 80072d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072dc:	2301      	movs	r3, #1
 80072de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e4:	2300      	movs	r3, #0
 80072e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_HO_GPIO_Port, &GPIO_InitStruct);
 80072e8:	f107 0314 	add.w	r3, r7, #20
 80072ec:	4619      	mov	r1, r3
 80072ee:	4804      	ldr	r0, [pc, #16]	; (8007300 <MX_GPIO_Init+0xd8>)
 80072f0:	f000 fc28 	bl	8007b44 <HAL_GPIO_Init>

}
 80072f4:	bf00      	nop
 80072f6:	3728      	adds	r7, #40	; 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40023800 	.word	0x40023800
 8007300:	40020800 	.word	0x40020800

08007304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007308:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800730a:	e7fe      	b.n	800730a <Error_Handler+0x6>

0800730c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <HAL_MspInit+0x4c>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	4a0f      	ldr	r2, [pc, #60]	; (8007358 <HAL_MspInit+0x4c>)
 800731c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007320:	6453      	str	r3, [r2, #68]	; 0x44
 8007322:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <HAL_MspInit+0x4c>)
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800732e:	2300      	movs	r3, #0
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <HAL_MspInit+0x4c>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	4a08      	ldr	r2, [pc, #32]	; (8007358 <HAL_MspInit+0x4c>)
 8007338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733c:	6413      	str	r3, [r2, #64]	; 0x40
 800733e:	4b06      	ldr	r3, [pc, #24]	; (8007358 <HAL_MspInit+0x4c>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40023800 	.word	0x40023800

0800735c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2c      	ldr	r2, [pc, #176]	; (800742c <HAL_UART_MspInit+0xd0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d152      	bne.n	8007424 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	4b2b      	ldr	r3, [pc, #172]	; (8007430 <HAL_UART_MspInit+0xd4>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <HAL_UART_MspInit+0xd4>)
 8007388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
 800738e:	4b28      	ldr	r3, [pc, #160]	; (8007430 <HAL_UART_MspInit+0xd4>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	4b24      	ldr	r3, [pc, #144]	; (8007430 <HAL_UART_MspInit+0xd4>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	4a23      	ldr	r2, [pc, #140]	; (8007430 <HAL_UART_MspInit+0xd4>)
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	6313      	str	r3, [r2, #48]	; 0x30
 80073aa:	4b21      	ldr	r3, [pc, #132]	; (8007430 <HAL_UART_MspInit+0xd4>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073b6:	2300      	movs	r3, #0
 80073b8:	60bb      	str	r3, [r7, #8]
 80073ba:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <HAL_UART_MspInit+0xd4>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <HAL_UART_MspInit+0xd4>)
 80073c0:	f043 0308 	orr.w	r3, r3, #8
 80073c4:	6313      	str	r3, [r2, #48]	; 0x30
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <HAL_UART_MspInit+0xd4>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	60bb      	str	r3, [r7, #8]
 80073d0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 80073d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d8:	2302      	movs	r3, #2
 80073da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073dc:	2301      	movs	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073e0:	2303      	movs	r3, #3
 80073e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80073e4:	2308      	movs	r3, #8
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	4619      	mov	r1, r3
 80073ee:	4811      	ldr	r0, [pc, #68]	; (8007434 <HAL_UART_MspInit+0xd8>)
 80073f0:	f000 fba8 	bl	8007b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80073f4:	2304      	movs	r3, #4
 80073f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f8:	2302      	movs	r3, #2
 80073fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073fc:	2301      	movs	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007400:	2303      	movs	r3, #3
 8007402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007404:	2308      	movs	r3, #8
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	4619      	mov	r1, r3
 800740e:	480a      	ldr	r0, [pc, #40]	; (8007438 <HAL_UART_MspInit+0xdc>)
 8007410:	f000 fb98 	bl	8007b44 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	2035      	movs	r0, #53	; 0x35
 800741a:	f000 fb3a 	bl	8007a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800741e:	2035      	movs	r0, #53	; 0x35
 8007420:	f000 fb53 	bl	8007aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8007424:	bf00      	nop
 8007426:	3728      	adds	r7, #40	; 0x28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40005000 	.word	0x40005000
 8007430:	40023800 	.word	0x40023800
 8007434:	40020800 	.word	0x40020800
 8007438:	40020c00 	.word	0x40020c00

0800743c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007440:	e7fe      	b.n	8007440 <NMI_Handler+0x4>

08007442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007442:	b480      	push	{r7}
 8007444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007446:	e7fe      	b.n	8007446 <HardFault_Handler+0x4>

08007448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800744c:	e7fe      	b.n	800744c <MemManage_Handler+0x4>

0800744e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800744e:	b480      	push	{r7}
 8007450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007452:	e7fe      	b.n	8007452 <BusFault_Handler+0x4>

08007454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007458:	e7fe      	b.n	8007458 <UsageFault_Handler+0x4>

0800745a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800745a:	b480      	push	{r7}
 800745c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800746c:	bf00      	nop
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007488:	f000 f9e6 	bl	8007858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}

08007490 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007494:	4802      	ldr	r0, [pc, #8]	; (80074a0 <UART5_IRQHandler+0x10>)
 8007496:	f001 fc8b 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000468 	.word	0x20000468

080074a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
	return 1;
 80074a8:	2301      	movs	r3, #1
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <_kill>:

int _kill(int pid, int sig)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80074be:	f002 fa93 	bl	80099e8 <__errno>
 80074c2:	4602      	mov	r2, r0
 80074c4:	2316      	movs	r3, #22
 80074c6:	6013      	str	r3, [r2, #0]
	return -1;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_exit>:

void _exit (int status)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff ffe7 	bl	80074b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80074e6:	e7fe      	b.n	80074e6 <_exit+0x12>

080074e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	e00a      	b.n	8007510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80074fa:	f3af 8000 	nop.w
 80074fe:	4601      	mov	r1, r0
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	60ba      	str	r2, [r7, #8]
 8007506:	b2ca      	uxtb	r2, r1
 8007508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	3301      	adds	r3, #1
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	dbf0      	blt.n	80074fa <_read+0x12>
	}

return len;
 8007518:	687b      	ldr	r3, [r7, #4]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
	return -1;
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800754a:	605a      	str	r2, [r3, #4]
	return 0;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <_isatty>:

int _isatty(int file)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
	return 1;
 8007562:	2301      	movs	r3, #1
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
	return 0;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007594:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <_sbrk+0x5c>)
 8007596:	4b15      	ldr	r3, [pc, #84]	; (80075ec <_sbrk+0x60>)
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075a0:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <_sbrk+0x64>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d102      	bne.n	80075ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <_sbrk+0x64>)
 80075aa:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <_sbrk+0x68>)
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075ae:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <_sbrk+0x64>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4413      	add	r3, r2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d207      	bcs.n	80075cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075bc:	f002 fa14 	bl	80099e8 <__errno>
 80075c0:	4602      	mov	r2, r0
 80075c2:	230c      	movs	r3, #12
 80075c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ca:	e009      	b.n	80075e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075cc:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <_sbrk+0x64>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075d2:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <_sbrk+0x64>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4413      	add	r3, r2
 80075da:	4a05      	ldr	r2, [pc, #20]	; (80075f0 <_sbrk+0x64>)
 80075dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20020000 	.word	0x20020000
 80075ec:	00000400 	.word	0x00000400
 80075f0:	20000464 	.word	0x20000464
 80075f4:	200004f0 	.word	0x200004f0

080075f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075fc:	4b08      	ldr	r3, [pc, #32]	; (8007620 <SystemInit+0x28>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007602:	4a07      	ldr	r2, [pc, #28]	; (8007620 <SystemInit+0x28>)
 8007604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <SystemInit+0x28>)
 800760e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007612:	609a      	str	r2, [r3, #8]
#endif
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <cppInit>:

UART_HandleTypeDef huart5;

Dynamixel mx64(&huart5, GPIOC, GPIO_PIN_13);

void cppInit(void){
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
	uint8_t check_ping = mx64.ping(DYNAMIXEL_ID); //Confirm communication with Dynamixel
 800762a:	2101      	movs	r1, #1
 800762c:	480f      	ldr	r0, [pc, #60]	; (800766c <cppInit+0x48>)
 800762e:	f7ff f818 	bl	8006662 <_ZN9Dynamixel4pingEh>
 8007632:	4603      	mov	r3, r0
 8007634:	71fb      	strb	r3, [r7, #7]
	printf("Ping: %d\r\n", check_ping); //0 is OK
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	4619      	mov	r1, r3
 800763a:	480d      	ldr	r0, [pc, #52]	; (8007670 <cppInit+0x4c>)
 800763c:	f002 ff3e 	bl	800a4bc <iprintf>

	mx64.setOperatingMode(DYNAMIXEL_ID, 3); //Set operating mode
 8007640:	2203      	movs	r2, #3
 8007642:	2101      	movs	r1, #1
 8007644:	4809      	ldr	r0, [pc, #36]	; (800766c <cppInit+0x48>)
 8007646:	f7ff f8b9 	bl	80067bc <_ZN9Dynamixel16setOperatingModeEhh>
	mx64.torque(DYNAMIXEL_ID, 1); //Enalbe torque
 800764a:	2201      	movs	r2, #1
 800764c:	2101      	movs	r1, #1
 800764e:	4807      	ldr	r0, [pc, #28]	; (800766c <cppInit+0x48>)
 8007650:	f7ff f833 	bl	80066ba <_ZN9Dynamixel6torqueEhh>

	mx64.requestTemperature(DYNAMIXEL_ID); //Request to get temperature information
 8007654:	2101      	movs	r1, #1
 8007656:	4805      	ldr	r0, [pc, #20]	; (800766c <cppInit+0x48>)
 8007658:	f7ff f8db 	bl	8006812 <_ZN9Dynamixel18requestTemperatureEh>
	mx64.requestInputVoltage(DYNAMIXEL_ID); //Request to get input voltage information
 800765c:	2101      	movs	r1, #1
 800765e:	4803      	ldr	r0, [pc, #12]	; (800766c <cppInit+0x48>)
 8007660:	f7ff f928 	bl	80068b4 <_ZN9Dynamixel19requestInputVoltageEh>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	200004a8 	.word	0x200004a8
 8007670:	0800c1bc 	.word	0x0800c1bc

08007674 <cppLoop>:

void cppLoop(void){
 8007674:	b590      	push	{r4, r7, lr}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
	static float angle;

	angle += 1;
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <cppLoop+0x8c>)
 800767c:	edd3 7a00 	vldr	s15, [r3]
 8007680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007688:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <cppLoop+0x8c>)
 800768a:	edc3 7a00 	vstr	s15, [r3]
	if(angle >= 90) angle = 0;
 800768e:	4b1c      	ldr	r3, [pc, #112]	; (8007700 <cppLoop+0x8c>)
 8007690:	edd3 7a00 	vldr	s15, [r3]
 8007694:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8007704 <cppLoop+0x90>
 8007698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a0:	db03      	blt.n	80076aa <cppLoop+0x36>
 80076a2:	4b17      	ldr	r3, [pc, #92]	; (8007700 <cppLoop+0x8c>)
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]

	mx64.setGoalPosition(DYNAMIXEL_ID, angle); //Set Angle for Dynamixel
 80076aa:	4b15      	ldr	r3, [pc, #84]	; (8007700 <cppLoop+0x8c>)
 80076ac:	edd3 7a00 	vldr	s15, [r3]
 80076b0:	eeb0 0a67 	vmov.f32	s0, s15
 80076b4:	2101      	movs	r1, #1
 80076b6:	4814      	ldr	r0, [pc, #80]	; (8007708 <cppLoop+0x94>)
 80076b8:	f7ff f82a 	bl	8006710 <_ZN9Dynamixel15setGoalPositionEhf>

	uint8_t temperature = mx64.getTemperature(); //Get temperature for Dynamixel
 80076bc:	2100      	movs	r1, #0
 80076be:	4812      	ldr	r0, [pc, #72]	; (8007708 <cppLoop+0x94>)
 80076c0:	f7ff f8d2 	bl	8006868 <_ZN9Dynamixel14getTemperatureEPh>
 80076c4:	4603      	mov	r3, r0
 80076c6:	71fb      	strb	r3, [r7, #7]
	printf("Temperature: %d\r\n", temperature);
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	4619      	mov	r1, r3
 80076cc:	480f      	ldr	r0, [pc, #60]	; (800770c <cppLoop+0x98>)
 80076ce:	f002 fef5 	bl	800a4bc <iprintf>

	float voltage = mx64.getInputVoltage(); //Get input voltage for Dynamixel
 80076d2:	2100      	movs	r1, #0
 80076d4:	480c      	ldr	r0, [pc, #48]	; (8007708 <cppLoop+0x94>)
 80076d6:	f7ff f918 	bl	800690a <_ZN9Dynamixel15getInputVoltageEPh>
 80076da:	ed87 0a00 	vstr	s0, [r7]
	printf("Voltage: %f\r\n", voltage);
 80076de:	6838      	ldr	r0, [r7, #0]
 80076e0:	f7f8 ff52 	bl	8000588 <__aeabi_f2d>
 80076e4:	4603      	mov	r3, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	461a      	mov	r2, r3
 80076ea:	4623      	mov	r3, r4
 80076ec:	4808      	ldr	r0, [pc, #32]	; (8007710 <cppLoop+0x9c>)
 80076ee:	f002 fee5 	bl	800a4bc <iprintf>

	HAL_Delay(100);
 80076f2:	2064      	movs	r0, #100	; 0x64
 80076f4:	f000 f8d0 	bl	8007898 <HAL_Delay>
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd90      	pop	{r4, r7, pc}
 8007700:	200004d8 	.word	0x200004d8
 8007704:	42b40000 	.word	0x42b40000
 8007708:	200004a8 	.word	0x200004a8
 800770c:	0800c1c8 	.word	0x0800c1c8
 8007710:	0800c1dc 	.word	0x0800c1dc

08007714 <_Z41__static_initialization_and_destruction_0ii>:
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10b      	bne.n	800773c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800772a:	4293      	cmp	r3, r2
 800772c:	d106      	bne.n	800773c <_Z41__static_initialization_and_destruction_0ii+0x28>
Dynamixel mx64(&huart5, GPIOC, GPIO_PIN_13);
 800772e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8007734:	4904      	ldr	r1, [pc, #16]	; (8007748 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8007736:	4805      	ldr	r0, [pc, #20]	; (800774c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8007738:	f7fe ff81 	bl	800663e <_ZN9DynamixelC1EP20__UART_HandleTypeDefP12GPIO_TypeDeft>
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40020800 	.word	0x40020800
 8007748:	20000468 	.word	0x20000468
 800774c:	200004a8 	.word	0x200004a8

08007750 <_GLOBAL__sub_I_huart5>:
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
 8007754:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007758:	2001      	movs	r0, #1
 800775a:	f7ff ffdb 	bl	8007714 <_Z41__static_initialization_and_destruction_0ii>
 800775e:	bd80      	pop	{r7, pc}

08007760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007798 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007766:	e003      	b.n	8007770 <LoopCopyDataInit>

08007768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800776a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800776c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800776e:	3104      	adds	r1, #4

08007770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007770:	480b      	ldr	r0, [pc, #44]	; (80077a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007778:	d3f6      	bcc.n	8007768 <CopyDataInit>
  ldr  r2, =_sbss
 800777a:	4a0b      	ldr	r2, [pc, #44]	; (80077a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800777c:	e002      	b.n	8007784 <LoopFillZerobss>

0800777e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800777e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007780:	f842 3b04 	str.w	r3, [r2], #4

08007784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007788:	d3f9      	bcc.n	800777e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800778a:	f7ff ff35 	bl	80075f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800778e:	f002 f931 	bl	80099f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007792:	f7ff fc9e 	bl	80070d2 <main>
  bx  lr    
 8007796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007798:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800779c:	0800c4e4 	.word	0x0800c4e4
  ldr  r0, =_sdata
 80077a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80077a4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80077a8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80077ac:	200004f0 	.word	0x200004f0

080077b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80077b0:	e7fe      	b.n	80077b0 <ADC_IRQHandler>
	...

080077b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077b8:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <HAL_Init+0x40>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <HAL_Init+0x40>)
 80077be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80077c4:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <HAL_Init+0x40>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <HAL_Init+0x40>)
 80077ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077d0:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <HAL_Init+0x40>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a07      	ldr	r2, [pc, #28]	; (80077f4 <HAL_Init+0x40>)
 80077d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077dc:	2003      	movs	r0, #3
 80077de:	f000 f94d 	bl	8007a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077e2:	2000      	movs	r0, #0
 80077e4:	f000 f808 	bl	80077f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077e8:	f7ff fd90 	bl	800730c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40023c00 	.word	0x40023c00

080077f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007800:	4b12      	ldr	r3, [pc, #72]	; (800784c <HAL_InitTick+0x54>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	4b12      	ldr	r3, [pc, #72]	; (8007850 <HAL_InitTick+0x58>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800780e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007812:	fbb2 f3f3 	udiv	r3, r2, r3
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f965 	bl	8007ae6 <HAL_SYSTICK_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e00e      	b.n	8007844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b0f      	cmp	r3, #15
 800782a:	d80a      	bhi.n	8007842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800782c:	2200      	movs	r2, #0
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	f04f 30ff 	mov.w	r0, #4294967295
 8007834:	f000 f92d 	bl	8007a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007838:	4a06      	ldr	r2, [pc, #24]	; (8007854 <HAL_InitTick+0x5c>)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e000      	b.n	8007844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000000 	.word	0x20000000
 8007850:	20000008 	.word	0x20000008
 8007854:	20000004 	.word	0x20000004

08007858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800785c:	4b06      	ldr	r3, [pc, #24]	; (8007878 <HAL_IncTick+0x20>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_IncTick+0x24>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4413      	add	r3, r2
 8007868:	4a04      	ldr	r2, [pc, #16]	; (800787c <HAL_IncTick+0x24>)
 800786a:	6013      	str	r3, [r2, #0]
}
 800786c:	bf00      	nop
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20000008 	.word	0x20000008
 800787c:	200004e8 	.word	0x200004e8

08007880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  return uwTick;
 8007884:	4b03      	ldr	r3, [pc, #12]	; (8007894 <HAL_GetTick+0x14>)
 8007886:	681b      	ldr	r3, [r3, #0]
}
 8007888:	4618      	mov	r0, r3
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	200004e8 	.word	0x200004e8

08007898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078a0:	f7ff ffee 	bl	8007880 <HAL_GetTick>
 80078a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d005      	beq.n	80078be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <HAL_Delay+0x40>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80078be:	bf00      	nop
 80078c0:	f7ff ffde 	bl	8007880 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d8f7      	bhi.n	80078c0 <HAL_Delay+0x28>
  {
  }
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000008 	.word	0x20000008

080078dc <__NVIC_SetPriorityGrouping>:
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <__NVIC_SetPriorityGrouping+0x44>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078f8:	4013      	ands	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800790e:	4a04      	ldr	r2, [pc, #16]	; (8007920 <__NVIC_SetPriorityGrouping+0x44>)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	60d3      	str	r3, [r2, #12]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	e000ed00 	.word	0xe000ed00

08007924 <__NVIC_GetPriorityGrouping>:
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <__NVIC_GetPriorityGrouping+0x18>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	0a1b      	lsrs	r3, r3, #8
 800792e:	f003 0307 	and.w	r3, r3, #7
}
 8007932:	4618      	mov	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <__NVIC_EnableIRQ>:
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	db0b      	blt.n	800796a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	f003 021f 	and.w	r2, r3, #31
 8007958:	4907      	ldr	r1, [pc, #28]	; (8007978 <__NVIC_EnableIRQ+0x38>)
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	2001      	movs	r0, #1
 8007962:	fa00 f202 	lsl.w	r2, r0, r2
 8007966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	e000e100 	.word	0xe000e100

0800797c <__NVIC_SetPriority>:
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798c:	2b00      	cmp	r3, #0
 800798e:	db0a      	blt.n	80079a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	b2da      	uxtb	r2, r3
 8007994:	490c      	ldr	r1, [pc, #48]	; (80079c8 <__NVIC_SetPriority+0x4c>)
 8007996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800799a:	0112      	lsls	r2, r2, #4
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	440b      	add	r3, r1
 80079a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079a4:	e00a      	b.n	80079bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	4908      	ldr	r1, [pc, #32]	; (80079cc <__NVIC_SetPriority+0x50>)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	3b04      	subs	r3, #4
 80079b4:	0112      	lsls	r2, r2, #4
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	440b      	add	r3, r1
 80079ba:	761a      	strb	r2, [r3, #24]
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	e000e100 	.word	0xe000e100
 80079cc:	e000ed00 	.word	0xe000ed00

080079d0 <NVIC_EncodePriority>:
{
 80079d0:	b480      	push	{r7}
 80079d2:	b089      	sub	sp, #36	; 0x24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f1c3 0307 	rsb	r3, r3, #7
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	bf28      	it	cs
 80079ee:	2304      	movcs	r3, #4
 80079f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	3304      	adds	r3, #4
 80079f6:	2b06      	cmp	r3, #6
 80079f8:	d902      	bls.n	8007a00 <NVIC_EncodePriority+0x30>
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	3b03      	subs	r3, #3
 80079fe:	e000      	b.n	8007a02 <NVIC_EncodePriority+0x32>
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43da      	mvns	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	401a      	ands	r2, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a18:	f04f 31ff 	mov.w	r1, #4294967295
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a22:	43d9      	mvns	r1, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a28:	4313      	orrs	r3, r2
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3724      	adds	r7, #36	; 0x24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <SysTick_Config>:
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a48:	d301      	bcc.n	8007a4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e00f      	b.n	8007a6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <SysTick_Config+0x40>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a56:	210f      	movs	r1, #15
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	f7ff ff8e 	bl	800797c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <SysTick_Config+0x40>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a66:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <SysTick_Config+0x40>)
 8007a68:	2207      	movs	r2, #7
 8007a6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	e000e010 	.word	0xe000e010

08007a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff ff29 	bl	80078dc <__NVIC_SetPriorityGrouping>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	4603      	mov	r3, r0
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007aa4:	f7ff ff3e 	bl	8007924 <__NVIC_GetPriorityGrouping>
 8007aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	6978      	ldr	r0, [r7, #20]
 8007ab0:	f7ff ff8e 	bl	80079d0 <NVIC_EncodePriority>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aba:	4611      	mov	r1, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff ff5d 	bl	800797c <__NVIC_SetPriority>
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ff31 	bl	8007940 <__NVIC_EnableIRQ>
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff ffa2 	bl	8007a38 <SysTick_Config>
 8007af4:	4603      	mov	r3, r0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d004      	beq.n	8007b1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2280      	movs	r2, #128	; 0x80
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e00c      	b.n	8007b36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2205      	movs	r2, #5
 8007b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b089      	sub	sp, #36	; 0x24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e165      	b.n	8007e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b60:	2201      	movs	r2, #1
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4013      	ands	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	f040 8154 	bne.w	8007e26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d00b      	beq.n	8007b9e <HAL_GPIO_Init+0x5a>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d007      	beq.n	8007b9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b92:	2b11      	cmp	r3, #17
 8007b94:	d003      	beq.n	8007b9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b12      	cmp	r3, #18
 8007b9c:	d130      	bne.n	8007c00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	2203      	movs	r2, #3
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4013      	ands	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	091b      	lsrs	r3, r3, #4
 8007bea:	f003 0201 	and.w	r2, r3, #1
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	43db      	mvns	r3, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	4013      	ands	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d003      	beq.n	8007c40 <HAL_GPIO_Init+0xfc>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b12      	cmp	r3, #18
 8007c3e:	d123      	bne.n	8007c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	08da      	lsrs	r2, r3, #3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3208      	adds	r2, #8
 8007c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	220f      	movs	r2, #15
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	4013      	ands	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	fa02 f303 	lsl.w	r3, r2, r3
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	08da      	lsrs	r2, r3, #3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3208      	adds	r2, #8
 8007c82:	69b9      	ldr	r1, [r7, #24]
 8007c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	2203      	movs	r2, #3
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f003 0203 	and.w	r2, r3, #3
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80ae 	beq.w	8007e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	4b5c      	ldr	r3, [pc, #368]	; (8007e40 <HAL_GPIO_Init+0x2fc>)
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	4a5b      	ldr	r2, [pc, #364]	; (8007e40 <HAL_GPIO_Init+0x2fc>)
 8007cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8007cda:	4b59      	ldr	r3, [pc, #356]	; (8007e40 <HAL_GPIO_Init+0x2fc>)
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ce6:	4a57      	ldr	r2, [pc, #348]	; (8007e44 <HAL_GPIO_Init+0x300>)
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	3302      	adds	r3, #2
 8007cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	220f      	movs	r2, #15
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	43db      	mvns	r3, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4013      	ands	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a4e      	ldr	r2, [pc, #312]	; (8007e48 <HAL_GPIO_Init+0x304>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d025      	beq.n	8007d5e <HAL_GPIO_Init+0x21a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a4d      	ldr	r2, [pc, #308]	; (8007e4c <HAL_GPIO_Init+0x308>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d01f      	beq.n	8007d5a <HAL_GPIO_Init+0x216>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a4c      	ldr	r2, [pc, #304]	; (8007e50 <HAL_GPIO_Init+0x30c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d019      	beq.n	8007d56 <HAL_GPIO_Init+0x212>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a4b      	ldr	r2, [pc, #300]	; (8007e54 <HAL_GPIO_Init+0x310>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <HAL_GPIO_Init+0x20e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a4a      	ldr	r2, [pc, #296]	; (8007e58 <HAL_GPIO_Init+0x314>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00d      	beq.n	8007d4e <HAL_GPIO_Init+0x20a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a49      	ldr	r2, [pc, #292]	; (8007e5c <HAL_GPIO_Init+0x318>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d007      	beq.n	8007d4a <HAL_GPIO_Init+0x206>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a48      	ldr	r2, [pc, #288]	; (8007e60 <HAL_GPIO_Init+0x31c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d101      	bne.n	8007d46 <HAL_GPIO_Init+0x202>
 8007d42:	2306      	movs	r3, #6
 8007d44:	e00c      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d46:	2307      	movs	r3, #7
 8007d48:	e00a      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d4a:	2305      	movs	r3, #5
 8007d4c:	e008      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d4e:	2304      	movs	r3, #4
 8007d50:	e006      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d52:	2303      	movs	r3, #3
 8007d54:	e004      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e002      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_GPIO_Init+0x21c>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	f002 0203 	and.w	r2, r2, #3
 8007d66:	0092      	lsls	r2, r2, #2
 8007d68:	4093      	lsls	r3, r2
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d70:	4934      	ldr	r1, [pc, #208]	; (8007e44 <HAL_GPIO_Init+0x300>)
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	3302      	adds	r3, #2
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d7e:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	43db      	mvns	r3, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007da2:	4a30      	ldr	r2, [pc, #192]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007da8:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	4013      	ands	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007dcc:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007dd2:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	4013      	ands	r3, r2
 8007de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007df6:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	43db      	mvns	r3, r3
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e20:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <HAL_GPIO_Init+0x320>)
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b0f      	cmp	r3, #15
 8007e30:	f67f ae96 	bls.w	8007b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e34:	bf00      	nop
 8007e36:	3724      	adds	r7, #36	; 0x24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40023800 	.word	0x40023800
 8007e44:	40013800 	.word	0x40013800
 8007e48:	40020000 	.word	0x40020000
 8007e4c:	40020400 	.word	0x40020400
 8007e50:	40020800 	.word	0x40020800
 8007e54:	40020c00 	.word	0x40020c00
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40021400 	.word	0x40021400
 8007e60:	40021800 	.word	0x40021800
 8007e64:	40013c00 	.word	0x40013c00

08007e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
 8007e74:	4613      	mov	r3, r2
 8007e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e78:	787b      	ldrb	r3, [r7, #1]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e7e:	887a      	ldrh	r2, [r7, #2]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e84:	e003      	b.n	8007e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e86:	887b      	ldrh	r3, [r7, #2]
 8007e88:	041a      	lsls	r2, r3, #16
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	619a      	str	r2, [r3, #24]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <HAL_PWREx_EnableOverDrive+0x90>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <HAL_PWREx_EnableOverDrive+0x90>)
 8007eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <HAL_PWREx_EnableOverDrive+0x90>)
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	; (8007f30 <HAL_PWREx_EnableOverDrive+0x94>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ec8:	f7ff fcda 	bl	8007880 <HAL_GetTick>
 8007ecc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ece:	e009      	b.n	8007ee4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ed0:	f7ff fcd6 	bl	8007880 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ede:	d901      	bls.n	8007ee4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e01f      	b.n	8007f24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ee4:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <HAL_PWREx_EnableOverDrive+0x98>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d1ee      	bne.n	8007ed0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ef8:	f7ff fcc2 	bl	8007880 <HAL_GetTick>
 8007efc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007efe:	e009      	b.n	8007f14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f00:	f7ff fcbe 	bl	8007880 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f0e:	d901      	bls.n	8007f14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e007      	b.n	8007f24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f14:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <HAL_PWREx_EnableOverDrive+0x98>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f20:	d1ee      	bne.n	8007f00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	420e0040 	.word	0x420e0040
 8007f34:	40007000 	.word	0x40007000
 8007f38:	420e0044 	.word	0x420e0044

08007f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e0cc      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f50:	4b68      	ldr	r3, [pc, #416]	; (80080f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d90c      	bls.n	8007f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5e:	4b65      	ldr	r3, [pc, #404]	; (80080f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f66:	4b63      	ldr	r3, [pc, #396]	; (80080f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d001      	beq.n	8007f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e0b8      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d020      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f90:	4b59      	ldr	r3, [pc, #356]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	4a58      	ldr	r2, [pc, #352]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fa8:	4b53      	ldr	r3, [pc, #332]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	4a52      	ldr	r2, [pc, #328]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fb4:	4b50      	ldr	r3, [pc, #320]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	494d      	ldr	r1, [pc, #308]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d044      	beq.n	800805c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d107      	bne.n	8007fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fda:	4b47      	ldr	r3, [pc, #284]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d119      	bne.n	800801a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e07f      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d107      	bne.n	800800a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ffa:	4b3f      	ldr	r3, [pc, #252]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e06f      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800800a:	4b3b      	ldr	r3, [pc, #236]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e067      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800801a:	4b37      	ldr	r3, [pc, #220]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f023 0203 	bic.w	r2, r3, #3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	4934      	ldr	r1, [pc, #208]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008028:	4313      	orrs	r3, r2
 800802a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800802c:	f7ff fc28 	bl	8007880 <HAL_GetTick>
 8008030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008032:	e00a      	b.n	800804a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008034:	f7ff fc24 	bl	8007880 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008042:	4293      	cmp	r3, r2
 8008044:	d901      	bls.n	800804a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e04f      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800804a:	4b2b      	ldr	r3, [pc, #172]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 020c 	and.w	r2, r3, #12
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	429a      	cmp	r2, r3
 800805a:	d1eb      	bne.n	8008034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800805c:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <HAL_RCC_ClockConfig+0x1b8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d20c      	bcs.n	8008084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <HAL_RCC_ClockConfig+0x1b8>)
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008072:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d001      	beq.n	8008084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e032      	b.n	80080ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d008      	beq.n	80080a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008090:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	4916      	ldr	r1, [pc, #88]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0308 	and.w	r3, r3, #8
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080ae:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	490e      	ldr	r1, [pc, #56]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080c2:	f000 f855 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 80080c6:	4601      	mov	r1, r0
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <HAL_RCC_ClockConfig+0x1c0>)
 80080d4:	5cd3      	ldrb	r3, [r2, r3]
 80080d6:	fa21 f303 	lsr.w	r3, r1, r3
 80080da:	4a09      	ldr	r2, [pc, #36]	; (8008100 <HAL_RCC_ClockConfig+0x1c4>)
 80080dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_RCC_ClockConfig+0x1c8>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fb88 	bl	80077f8 <HAL_InitTick>

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40023c00 	.word	0x40023c00
 80080f8:	40023800 	.word	0x40023800
 80080fc:	0800c1ec 	.word	0x0800c1ec
 8008100:	20000000 	.word	0x20000000
 8008104:	20000004 	.word	0x20000004

08008108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <HAL_RCC_GetHCLKFreq+0x14>)
 800810e:	681b      	ldr	r3, [r3, #0]
}
 8008110:	4618      	mov	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000000 	.word	0x20000000

08008120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008124:	f7ff fff0 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008128:	4601      	mov	r1, r0
 800812a:	4b05      	ldr	r3, [pc, #20]	; (8008140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	0a9b      	lsrs	r3, r3, #10
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	4a03      	ldr	r2, [pc, #12]	; (8008144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008136:	5cd3      	ldrb	r3, [r2, r3]
 8008138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800813c:	4618      	mov	r0, r3
 800813e:	bd80      	pop	{r7, pc}
 8008140:	40023800 	.word	0x40023800
 8008144:	0800c1fc 	.word	0x0800c1fc

08008148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800814c:	f7ff ffdc 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008150:	4601      	mov	r1, r0
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	0b5b      	lsrs	r3, r3, #13
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	4a03      	ldr	r2, [pc, #12]	; (800816c <HAL_RCC_GetPCLK2Freq+0x24>)
 800815e:	5cd3      	ldrb	r3, [r2, r3]
 8008160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008164:	4618      	mov	r0, r3
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40023800 	.word	0x40023800
 800816c:	0800c1fc 	.word	0x0800c1fc

08008170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800818a:	4bc6      	ldr	r3, [pc, #792]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 030c 	and.w	r3, r3, #12
 8008192:	2b0c      	cmp	r3, #12
 8008194:	f200 817e 	bhi.w	8008494 <HAL_RCC_GetSysClockFreq+0x324>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081d5 	.word	0x080081d5
 80081a4:	08008495 	.word	0x08008495
 80081a8:	08008495 	.word	0x08008495
 80081ac:	08008495 	.word	0x08008495
 80081b0:	080081db 	.word	0x080081db
 80081b4:	08008495 	.word	0x08008495
 80081b8:	08008495 	.word	0x08008495
 80081bc:	08008495 	.word	0x08008495
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	08008495 	.word	0x08008495
 80081c8:	08008495 	.word	0x08008495
 80081cc:	08008495 	.word	0x08008495
 80081d0:	0800833d 	.word	0x0800833d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081d4:	4bb4      	ldr	r3, [pc, #720]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x338>)
 80081d6:	613b      	str	r3, [r7, #16]
       break;
 80081d8:	e15f      	b.n	800849a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081da:	4bb4      	ldr	r3, [pc, #720]	; (80084ac <HAL_RCC_GetSysClockFreq+0x33c>)
 80081dc:	613b      	str	r3, [r7, #16]
      break;
 80081de:	e15c      	b.n	800849a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081e0:	4bb0      	ldr	r3, [pc, #704]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081ea:	4bae      	ldr	r3, [pc, #696]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d04a      	beq.n	800828c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081f6:	4bab      	ldr	r3, [pc, #684]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	099b      	lsrs	r3, r3, #6
 80081fc:	f04f 0400 	mov.w	r4, #0
 8008200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	ea03 0501 	and.w	r5, r3, r1
 800820c:	ea04 0602 	and.w	r6, r4, r2
 8008210:	4629      	mov	r1, r5
 8008212:	4632      	mov	r2, r6
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	f04f 0400 	mov.w	r4, #0
 800821c:	0154      	lsls	r4, r2, #5
 800821e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008222:	014b      	lsls	r3, r1, #5
 8008224:	4619      	mov	r1, r3
 8008226:	4622      	mov	r2, r4
 8008228:	1b49      	subs	r1, r1, r5
 800822a:	eb62 0206 	sbc.w	r2, r2, r6
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	f04f 0400 	mov.w	r4, #0
 8008236:	0194      	lsls	r4, r2, #6
 8008238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800823c:	018b      	lsls	r3, r1, #6
 800823e:	1a5b      	subs	r3, r3, r1
 8008240:	eb64 0402 	sbc.w	r4, r4, r2
 8008244:	f04f 0100 	mov.w	r1, #0
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	00e2      	lsls	r2, r4, #3
 800824e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008252:	00d9      	lsls	r1, r3, #3
 8008254:	460b      	mov	r3, r1
 8008256:	4614      	mov	r4, r2
 8008258:	195b      	adds	r3, r3, r5
 800825a:	eb44 0406 	adc.w	r4, r4, r6
 800825e:	f04f 0100 	mov.w	r1, #0
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	0262      	lsls	r2, r4, #9
 8008268:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800826c:	0259      	lsls	r1, r3, #9
 800826e:	460b      	mov	r3, r1
 8008270:	4614      	mov	r4, r2
 8008272:	4618      	mov	r0, r3
 8008274:	4621      	mov	r1, r4
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f04f 0400 	mov.w	r4, #0
 800827c:	461a      	mov	r2, r3
 800827e:	4623      	mov	r3, r4
 8008280:	f7f8 fcb2 	bl	8000be8 <__aeabi_uldivmod>
 8008284:	4603      	mov	r3, r0
 8008286:	460c      	mov	r4, r1
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e049      	b.n	8008320 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800828c:	4b85      	ldr	r3, [pc, #532]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	099b      	lsrs	r3, r3, #6
 8008292:	f04f 0400 	mov.w	r4, #0
 8008296:	f240 11ff 	movw	r1, #511	; 0x1ff
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	ea03 0501 	and.w	r5, r3, r1
 80082a2:	ea04 0602 	and.w	r6, r4, r2
 80082a6:	4629      	mov	r1, r5
 80082a8:	4632      	mov	r2, r6
 80082aa:	f04f 0300 	mov.w	r3, #0
 80082ae:	f04f 0400 	mov.w	r4, #0
 80082b2:	0154      	lsls	r4, r2, #5
 80082b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082b8:	014b      	lsls	r3, r1, #5
 80082ba:	4619      	mov	r1, r3
 80082bc:	4622      	mov	r2, r4
 80082be:	1b49      	subs	r1, r1, r5
 80082c0:	eb62 0206 	sbc.w	r2, r2, r6
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	f04f 0400 	mov.w	r4, #0
 80082cc:	0194      	lsls	r4, r2, #6
 80082ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082d2:	018b      	lsls	r3, r1, #6
 80082d4:	1a5b      	subs	r3, r3, r1
 80082d6:	eb64 0402 	sbc.w	r4, r4, r2
 80082da:	f04f 0100 	mov.w	r1, #0
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	00e2      	lsls	r2, r4, #3
 80082e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082e8:	00d9      	lsls	r1, r3, #3
 80082ea:	460b      	mov	r3, r1
 80082ec:	4614      	mov	r4, r2
 80082ee:	195b      	adds	r3, r3, r5
 80082f0:	eb44 0406 	adc.w	r4, r4, r6
 80082f4:	f04f 0100 	mov.w	r1, #0
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	02a2      	lsls	r2, r4, #10
 80082fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008302:	0299      	lsls	r1, r3, #10
 8008304:	460b      	mov	r3, r1
 8008306:	4614      	mov	r4, r2
 8008308:	4618      	mov	r0, r3
 800830a:	4621      	mov	r1, r4
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f04f 0400 	mov.w	r4, #0
 8008312:	461a      	mov	r2, r3
 8008314:	4623      	mov	r3, r4
 8008316:	f7f8 fc67 	bl	8000be8 <__aeabi_uldivmod>
 800831a:	4603      	mov	r3, r0
 800831c:	460c      	mov	r4, r1
 800831e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008320:	4b60      	ldr	r3, [pc, #384]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	0c1b      	lsrs	r3, r3, #16
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	3301      	adds	r3, #1
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	fbb2 f3f3 	udiv	r3, r2, r3
 8008338:	613b      	str	r3, [r7, #16]
      break;
 800833a:	e0ae      	b.n	800849a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800833c:	4b59      	ldr	r3, [pc, #356]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008344:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008346:	4b57      	ldr	r3, [pc, #348]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d04a      	beq.n	80083e8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008352:	4b54      	ldr	r3, [pc, #336]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	f04f 0400 	mov.w	r4, #0
 800835c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	ea03 0501 	and.w	r5, r3, r1
 8008368:	ea04 0602 	and.w	r6, r4, r2
 800836c:	4629      	mov	r1, r5
 800836e:	4632      	mov	r2, r6
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	f04f 0400 	mov.w	r4, #0
 8008378:	0154      	lsls	r4, r2, #5
 800837a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800837e:	014b      	lsls	r3, r1, #5
 8008380:	4619      	mov	r1, r3
 8008382:	4622      	mov	r2, r4
 8008384:	1b49      	subs	r1, r1, r5
 8008386:	eb62 0206 	sbc.w	r2, r2, r6
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	f04f 0400 	mov.w	r4, #0
 8008392:	0194      	lsls	r4, r2, #6
 8008394:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008398:	018b      	lsls	r3, r1, #6
 800839a:	1a5b      	subs	r3, r3, r1
 800839c:	eb64 0402 	sbc.w	r4, r4, r2
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	00e2      	lsls	r2, r4, #3
 80083aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80083ae:	00d9      	lsls	r1, r3, #3
 80083b0:	460b      	mov	r3, r1
 80083b2:	4614      	mov	r4, r2
 80083b4:	195b      	adds	r3, r3, r5
 80083b6:	eb44 0406 	adc.w	r4, r4, r6
 80083ba:	f04f 0100 	mov.w	r1, #0
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	0262      	lsls	r2, r4, #9
 80083c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80083c8:	0259      	lsls	r1, r3, #9
 80083ca:	460b      	mov	r3, r1
 80083cc:	4614      	mov	r4, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	4621      	mov	r1, r4
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f04f 0400 	mov.w	r4, #0
 80083d8:	461a      	mov	r2, r3
 80083da:	4623      	mov	r3, r4
 80083dc:	f7f8 fc04 	bl	8000be8 <__aeabi_uldivmod>
 80083e0:	4603      	mov	r3, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	e049      	b.n	800847c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083e8:	4b2e      	ldr	r3, [pc, #184]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	099b      	lsrs	r3, r3, #6
 80083ee:	f04f 0400 	mov.w	r4, #0
 80083f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	ea03 0501 	and.w	r5, r3, r1
 80083fe:	ea04 0602 	and.w	r6, r4, r2
 8008402:	4629      	mov	r1, r5
 8008404:	4632      	mov	r2, r6
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	f04f 0400 	mov.w	r4, #0
 800840e:	0154      	lsls	r4, r2, #5
 8008410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008414:	014b      	lsls	r3, r1, #5
 8008416:	4619      	mov	r1, r3
 8008418:	4622      	mov	r2, r4
 800841a:	1b49      	subs	r1, r1, r5
 800841c:	eb62 0206 	sbc.w	r2, r2, r6
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	f04f 0400 	mov.w	r4, #0
 8008428:	0194      	lsls	r4, r2, #6
 800842a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800842e:	018b      	lsls	r3, r1, #6
 8008430:	1a5b      	subs	r3, r3, r1
 8008432:	eb64 0402 	sbc.w	r4, r4, r2
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	00e2      	lsls	r2, r4, #3
 8008440:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008444:	00d9      	lsls	r1, r3, #3
 8008446:	460b      	mov	r3, r1
 8008448:	4614      	mov	r4, r2
 800844a:	195b      	adds	r3, r3, r5
 800844c:	eb44 0406 	adc.w	r4, r4, r6
 8008450:	f04f 0100 	mov.w	r1, #0
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	02a2      	lsls	r2, r4, #10
 800845a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800845e:	0299      	lsls	r1, r3, #10
 8008460:	460b      	mov	r3, r1
 8008462:	4614      	mov	r4, r2
 8008464:	4618      	mov	r0, r3
 8008466:	4621      	mov	r1, r4
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f04f 0400 	mov.w	r4, #0
 800846e:	461a      	mov	r2, r3
 8008470:	4623      	mov	r3, r4
 8008472:	f7f8 fbb9 	bl	8000be8 <__aeabi_uldivmod>
 8008476:	4603      	mov	r3, r0
 8008478:	460c      	mov	r4, r1
 800847a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800847c:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	0f1b      	lsrs	r3, r3, #28
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008490:	613b      	str	r3, [r7, #16]
      break;
 8008492:	e002      	b.n	800849a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008494:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <HAL_RCC_GetSysClockFreq+0x338>)
 8008496:	613b      	str	r3, [r7, #16]
      break;
 8008498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800849a:	693b      	ldr	r3, [r7, #16]
}
 800849c:	4618      	mov	r0, r3
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a4:	40023800 	.word	0x40023800
 80084a8:	00f42400 	.word	0x00f42400
 80084ac:	007a1200 	.word	0x007a1200

080084b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 8083 	beq.w	80085d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80084ca:	4b95      	ldr	r3, [pc, #596]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 030c 	and.w	r3, r3, #12
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d019      	beq.n	800850a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80084d6:	4b92      	ldr	r3, [pc, #584]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d106      	bne.n	80084f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80084e2:	4b8f      	ldr	r3, [pc, #572]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084ee:	d00c      	beq.n	800850a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084f0:	4b8b      	ldr	r3, [pc, #556]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80084f8:	2b0c      	cmp	r3, #12
 80084fa:	d112      	bne.n	8008522 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084fc:	4b88      	ldr	r3, [pc, #544]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008508:	d10b      	bne.n	8008522 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800850a:	4b85      	ldr	r3, [pc, #532]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d05b      	beq.n	80085ce <HAL_RCC_OscConfig+0x11e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d157      	bne.n	80085ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e216      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852a:	d106      	bne.n	800853a <HAL_RCC_OscConfig+0x8a>
 800852c:	4b7c      	ldr	r3, [pc, #496]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a7b      	ldr	r2, [pc, #492]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	e01d      	b.n	8008576 <HAL_RCC_OscConfig+0xc6>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008542:	d10c      	bne.n	800855e <HAL_RCC_OscConfig+0xae>
 8008544:	4b76      	ldr	r3, [pc, #472]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a75      	ldr	r2, [pc, #468]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800854a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	4b73      	ldr	r3, [pc, #460]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a72      	ldr	r2, [pc, #456]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	e00b      	b.n	8008576 <HAL_RCC_OscConfig+0xc6>
 800855e:	4b70      	ldr	r3, [pc, #448]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a6f      	ldr	r2, [pc, #444]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4b6d      	ldr	r3, [pc, #436]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a6c      	ldr	r2, [pc, #432]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d013      	beq.n	80085a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857e:	f7ff f97f 	bl	8007880 <HAL_GetTick>
 8008582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008584:	e008      	b.n	8008598 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008586:	f7ff f97b 	bl	8007880 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b64      	cmp	r3, #100	; 0x64
 8008592:	d901      	bls.n	8008598 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e1db      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008598:	4b61      	ldr	r3, [pc, #388]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f0      	beq.n	8008586 <HAL_RCC_OscConfig+0xd6>
 80085a4:	e014      	b.n	80085d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a6:	f7ff f96b 	bl	8007880 <HAL_GetTick>
 80085aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ac:	e008      	b.n	80085c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085ae:	f7ff f967 	bl	8007880 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b64      	cmp	r3, #100	; 0x64
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e1c7      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085c0:	4b57      	ldr	r3, [pc, #348]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f0      	bne.n	80085ae <HAL_RCC_OscConfig+0xfe>
 80085cc:	e000      	b.n	80085d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d06f      	beq.n	80086bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80085dc:	4b50      	ldr	r3, [pc, #320]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 030c 	and.w	r3, r3, #12
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d017      	beq.n	8008618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80085e8:	4b4d      	ldr	r3, [pc, #308]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d105      	bne.n	8008600 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80085f4:	4b4a      	ldr	r3, [pc, #296]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008600:	4b47      	ldr	r3, [pc, #284]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008608:	2b0c      	cmp	r3, #12
 800860a:	d11c      	bne.n	8008646 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800860c:	4b44      	ldr	r3, [pc, #272]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d116      	bne.n	8008646 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008618:	4b41      	ldr	r3, [pc, #260]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <HAL_RCC_OscConfig+0x180>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d001      	beq.n	8008630 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e18f      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4938      	ldr	r1, [pc, #224]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008640:	4313      	orrs	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008644:	e03a      	b.n	80086bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d020      	beq.n	8008690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800864e:	4b35      	ldr	r3, [pc, #212]	; (8008724 <HAL_RCC_OscConfig+0x274>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008654:	f7ff f914 	bl	8007880 <HAL_GetTick>
 8008658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800865c:	f7ff f910 	bl	8007880 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e170      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	4b2c      	ldr	r3, [pc, #176]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f0      	beq.n	800865c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	4925      	ldr	r1, [pc, #148]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 800868a:	4313      	orrs	r3, r2
 800868c:	600b      	str	r3, [r1, #0]
 800868e:	e015      	b.n	80086bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008690:	4b24      	ldr	r3, [pc, #144]	; (8008724 <HAL_RCC_OscConfig+0x274>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008696:	f7ff f8f3 	bl	8007880 <HAL_GetTick>
 800869a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800869e:	f7ff f8ef 	bl	8007880 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e14f      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f0      	bne.n	800869e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d037      	beq.n	8008738 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d016      	beq.n	80086fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086d0:	4b15      	ldr	r3, [pc, #84]	; (8008728 <HAL_RCC_OscConfig+0x278>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d6:	f7ff f8d3 	bl	8007880 <HAL_GetTick>
 80086da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086de:	f7ff f8cf 	bl	8007880 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e12f      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <HAL_RCC_OscConfig+0x270>)
 80086f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCC_OscConfig+0x22e>
 80086fc:	e01c      	b.n	8008738 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086fe:	4b0a      	ldr	r3, [pc, #40]	; (8008728 <HAL_RCC_OscConfig+0x278>)
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008704:	f7ff f8bc 	bl	8007880 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800870a:	e00f      	b.n	800872c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800870c:	f7ff f8b8 	bl	8007880 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d908      	bls.n	800872c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e118      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
 800871e:	bf00      	nop
 8008720:	40023800 	.word	0x40023800
 8008724:	42470000 	.word	0x42470000
 8008728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800872c:	4b8a      	ldr	r3, [pc, #552]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800872e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e9      	bne.n	800870c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8097 	beq.w	8008874 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800874a:	4b83      	ldr	r3, [pc, #524]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10f      	bne.n	8008776 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	4b7f      	ldr	r3, [pc, #508]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	4a7e      	ldr	r2, [pc, #504]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 8008760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008764:	6413      	str	r3, [r2, #64]	; 0x40
 8008766:	4b7c      	ldr	r3, [pc, #496]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008772:	2301      	movs	r3, #1
 8008774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008776:	4b79      	ldr	r3, [pc, #484]	; (800895c <HAL_RCC_OscConfig+0x4ac>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877e:	2b00      	cmp	r3, #0
 8008780:	d118      	bne.n	80087b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008782:	4b76      	ldr	r3, [pc, #472]	; (800895c <HAL_RCC_OscConfig+0x4ac>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a75      	ldr	r2, [pc, #468]	; (800895c <HAL_RCC_OscConfig+0x4ac>)
 8008788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800878c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800878e:	f7ff f877 	bl	8007880 <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008796:	f7ff f873 	bl	8007880 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0d3      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087a8:	4b6c      	ldr	r3, [pc, #432]	; (800895c <HAL_RCC_OscConfig+0x4ac>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0f0      	beq.n	8008796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d106      	bne.n	80087ca <HAL_RCC_OscConfig+0x31a>
 80087bc:	4b66      	ldr	r3, [pc, #408]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c0:	4a65      	ldr	r2, [pc, #404]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	6713      	str	r3, [r2, #112]	; 0x70
 80087c8:	e01c      	b.n	8008804 <HAL_RCC_OscConfig+0x354>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d10c      	bne.n	80087ec <HAL_RCC_OscConfig+0x33c>
 80087d2:	4b61      	ldr	r3, [pc, #388]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	4a60      	ldr	r2, [pc, #384]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087d8:	f043 0304 	orr.w	r3, r3, #4
 80087dc:	6713      	str	r3, [r2, #112]	; 0x70
 80087de:	4b5e      	ldr	r3, [pc, #376]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e2:	4a5d      	ldr	r2, [pc, #372]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087e4:	f043 0301 	orr.w	r3, r3, #1
 80087e8:	6713      	str	r3, [r2, #112]	; 0x70
 80087ea:	e00b      	b.n	8008804 <HAL_RCC_OscConfig+0x354>
 80087ec:	4b5a      	ldr	r3, [pc, #360]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f0:	4a59      	ldr	r2, [pc, #356]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	6713      	str	r3, [r2, #112]	; 0x70
 80087f8:	4b57      	ldr	r3, [pc, #348]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fc:	4a56      	ldr	r2, [pc, #344]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80087fe:	f023 0304 	bic.w	r3, r3, #4
 8008802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d015      	beq.n	8008838 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880c:	f7ff f838 	bl	8007880 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008812:	e00a      	b.n	800882a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008814:	f7ff f834 	bl	8007880 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008822:	4293      	cmp	r3, r2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e092      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800882a:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0ee      	beq.n	8008814 <HAL_RCC_OscConfig+0x364>
 8008836:	e014      	b.n	8008862 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008838:	f7ff f822 	bl	8007880 <HAL_GetTick>
 800883c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800883e:	e00a      	b.n	8008856 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008840:	f7ff f81e 	bl	8007880 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	f241 3288 	movw	r2, #5000	; 0x1388
 800884e:	4293      	cmp	r3, r2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e07c      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008856:	4b40      	ldr	r3, [pc, #256]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1ee      	bne.n	8008840 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d105      	bne.n	8008874 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008868:	4b3b      	ldr	r3, [pc, #236]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	4a3a      	ldr	r2, [pc, #232]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800886e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d068      	beq.n	800894e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800887c:	4b36      	ldr	r3, [pc, #216]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 030c 	and.w	r3, r3, #12
 8008884:	2b08      	cmp	r3, #8
 8008886:	d060      	beq.n	800894a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d145      	bne.n	800891c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008890:	4b33      	ldr	r3, [pc, #204]	; (8008960 <HAL_RCC_OscConfig+0x4b0>)
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008896:	f7fe fff3 	bl	8007880 <HAL_GetTick>
 800889a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889c:	e008      	b.n	80088b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800889e:	f7fe ffef 	bl	8007880 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d901      	bls.n	80088b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e04f      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b0:	4b29      	ldr	r3, [pc, #164]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f0      	bne.n	800889e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	69da      	ldr	r2, [r3, #28]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	019b      	lsls	r3, r3, #6
 80088cc:	431a      	orrs	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	3b01      	subs	r3, #1
 80088d6:	041b      	lsls	r3, r3, #16
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	431a      	orrs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	071b      	lsls	r3, r3, #28
 80088e8:	491b      	ldr	r1, [pc, #108]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088ee:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <HAL_RCC_OscConfig+0x4b0>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7fe ffc4 	bl	8007880 <HAL_GetTick>
 80088f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088fc:	f7fe ffc0 	bl	8007880 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e020      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800890e:	4b12      	ldr	r3, [pc, #72]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f0      	beq.n	80088fc <HAL_RCC_OscConfig+0x44c>
 800891a:	e018      	b.n	800894e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800891c:	4b10      	ldr	r3, [pc, #64]	; (8008960 <HAL_RCC_OscConfig+0x4b0>)
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008922:	f7fe ffad 	bl	8007880 <HAL_GetTick>
 8008926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008928:	e008      	b.n	800893c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892a:	f7fe ffa9 	bl	8007880 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e009      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <HAL_RCC_OscConfig+0x4a8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f0      	bne.n	800892a <HAL_RCC_OscConfig+0x47a>
 8008948:	e001      	b.n	800894e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	40023800 	.word	0x40023800
 800895c:	40007000 	.word	0x40007000
 8008960:	42470060 	.word	0x42470060

08008964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e03f      	b.n	80089f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fe fce6 	bl	800735c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2224      	movs	r2, #36	; 0x24
 8008994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fc77 	bl	800929c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695a      	ldr	r2, [r3, #20]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b088      	sub	sp, #32
 8008a02:	af02      	add	r7, sp, #8
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	f040 8083 	bne.w	8008b26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <HAL_UART_Transmit+0x2e>
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e07b      	b.n	8008b28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_UART_Transmit+0x40>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e074      	b.n	8008b28 <HAL_UART_Transmit+0x12a>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2221      	movs	r2, #33	; 0x21
 8008a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a54:	f7fe ff14 	bl	8007880 <HAL_GetTick>
 8008a58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	88fa      	ldrh	r2, [r7, #6]
 8008a5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008a6e:	e042      	b.n	8008af6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a86:	d122      	bne.n	8008ace <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2180      	movs	r1, #128	; 0x80
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fa96 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e042      	b.n	8008b28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ab4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	e017      	b.n	8008af6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	e013      	b.n	8008af6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2180      	movs	r1, #128	; 0x80
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fa73 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e01f      	b.n	8008b28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	60ba      	str	r2, [r7, #8]
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1b7      	bne.n	8008a70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2200      	movs	r2, #0
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fa5a 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e006      	b.n	8008b28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e000      	b.n	8008b28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b26:	2302      	movs	r3, #2
  }
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	f040 8090 	bne.w	8008c72 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <HAL_UART_Receive+0x2e>
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e088      	b.n	8008c74 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_UART_Receive+0x40>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e081      	b.n	8008c74 <HAL_UART_Receive+0x144>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2222      	movs	r2, #34	; 0x22
 8008b82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008b86:	f7fe fe7b 	bl	8007880 <HAL_GetTick>
 8008b8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	88fa      	ldrh	r2, [r7, #6]
 8008b96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008ba0:	e05c      	b.n	8008c5c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb8:	d12b      	bne.n	8008c12 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2120      	movs	r1, #32
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f9fd 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e04f      	b.n	8008c74 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10c      	bne.n	8008bfa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	e030      	b.n	8008c5c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	e024      	b.n	8008c5c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2120      	movs	r1, #32
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f9d1 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e023      	b.n	8008c74 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d108      	bne.n	8008c46 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	60ba      	str	r2, [r7, #8]
 8008c40:	b2ca      	uxtb	r2, r1
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	e00a      	b.n	8008c5c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	1c59      	adds	r1, r3, #1
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d19d      	bne.n	8008ba2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008c72:	2302      	movs	r3, #2
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d130      	bne.n	8008cf8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <HAL_UART_Transmit_IT+0x26>
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e029      	b.n	8008cfa <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_UART_Transmit_IT+0x38>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e022      	b.n	8008cfa <HAL_UART_Transmit_IT+0x7e>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	88fa      	ldrh	r2, [r7, #6]
 8008cc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2221      	movs	r2, #33	; 0x21
 8008cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cf2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e000      	b.n	8008cfa <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008cf8:	2302      	movs	r3, #2
  }
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	4613      	mov	r3, r2
 8008d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d140      	bne.n	8008da2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <HAL_UART_Receive_IT+0x26>
 8008d26:	88fb      	ldrh	r3, [r7, #6]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e039      	b.n	8008da4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_UART_Receive_IT+0x38>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e032      	b.n	8008da4 <HAL_UART_Receive_IT+0x9e>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	88fa      	ldrh	r2, [r7, #6]
 8008d50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	88fa      	ldrh	r2, [r7, #6]
 8008d56:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2222      	movs	r2, #34	; 0x22
 8008d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d7c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	695a      	ldr	r2, [r3, #20]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0201 	orr.w	r2, r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0220 	orr.w	r2, r2, #32
 8008d9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e000      	b.n	8008da4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008da2:	2302      	movs	r3, #2
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10d      	bne.n	8008e02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <HAL_UART_IRQHandler+0x52>
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f9cc 	bl	8009198 <UART_Receive_IT>
      return;
 8008e00:	e0d1      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80b0 	beq.w	8008f6a <HAL_UART_IRQHandler+0x1ba>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d105      	bne.n	8008e20 <HAL_UART_IRQHandler+0x70>
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80a5 	beq.w	8008f6a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <HAL_UART_IRQHandler+0x90>
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e38:	f043 0201 	orr.w	r2, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <HAL_UART_IRQHandler+0xb0>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	f043 0202 	orr.w	r2, r3, #2
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <HAL_UART_IRQHandler+0xd0>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e78:	f043 0204 	orr.w	r2, r3, #4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f003 0308 	and.w	r3, r3, #8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00f      	beq.n	8008eaa <HAL_UART_IRQHandler+0xfa>
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <HAL_UART_IRQHandler+0xee>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea2:	f043 0208 	orr.w	r2, r3, #8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d078      	beq.n	8008fa4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <HAL_UART_IRQHandler+0x11c>
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f966 	bl	8009198 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	bf0c      	ite	eq
 8008eda:	2301      	moveq	r3, #1
 8008edc:	2300      	movne	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <HAL_UART_IRQHandler+0x144>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d031      	beq.n	8008f58 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f8af 	bl	8009058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d123      	bne.n	8008f50 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695a      	ldr	r2, [r3, #20]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f16:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d013      	beq.n	8008f48 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f24:	4a21      	ldr	r2, [pc, #132]	; (8008fac <HAL_UART_IRQHandler+0x1fc>)
 8008f26:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fde6 	bl	8007afe <HAL_DMA_Abort_IT>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d016      	beq.n	8008f66 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f42:	4610      	mov	r0, r2
 8008f44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f46:	e00e      	b.n	8008f66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f831 	bl	8008fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4e:	e00a      	b.n	8008f66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f82d 	bl	8008fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f56:	e006      	b.n	8008f66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f829 	bl	8008fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008f64:	e01e      	b.n	8008fa4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f66:	bf00      	nop
    return;
 8008f68:	e01c      	b.n	8008fa4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d008      	beq.n	8008f86 <HAL_UART_IRQHandler+0x1d6>
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f89c 	bl	80090bc <UART_Transmit_IT>
    return;
 8008f84:	e00f      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x1f6>
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8e4 	bl	8009168 <UART_EndTransmit_IT>
    return;
 8008fa0:	bf00      	nop
 8008fa2:	e000      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008fa4:	bf00      	nop
  }
}
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	08009095 	.word	0x08009095

08008fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd4:	e02c      	b.n	8009030 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d028      	beq.n	8009030 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fe4:	f7fe fc4c 	bl	8007880 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d21d      	bcs.n	8009030 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009002:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2220      	movs	r2, #32
 8009018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e00f      	b.n	8009050 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4013      	ands	r3, r2
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	429a      	cmp	r2, r3
 800903e:	bf0c      	ite	eq
 8009040:	2301      	moveq	r3, #1
 8009042:	2300      	movne	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	429a      	cmp	r2, r3
 800904c:	d0c3      	beq.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800906e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695a      	ldr	r2, [r3, #20]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff ff7e 	bl	8008fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b21      	cmp	r3, #33	; 0x21
 80090ce:	d144      	bne.n	800915a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d8:	d11a      	bne.n	8009110 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d105      	bne.n	8009104 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	1c9a      	adds	r2, r3, #2
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	621a      	str	r2, [r3, #32]
 8009102:	e00e      	b.n	8009122 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]
 800910e:	e008      	b.n	8009122 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	1c59      	adds	r1, r3, #1
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6211      	str	r1, [r2, #32]
 800911a:	781a      	ldrb	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	4619      	mov	r1, r3
 8009130:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10f      	bne.n	8009156 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e000      	b.n	800915c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800915a:	2302      	movs	r3, #2
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800917e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7fd fbdd 	bl	8006948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b22      	cmp	r3, #34	; 0x22
 80091aa:	d171      	bne.n	8009290 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b4:	d123      	bne.n	80091fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10e      	bne.n	80091e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	1c9a      	adds	r2, r3, #2
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	629a      	str	r2, [r3, #40]	; 0x28
 80091e0:	e029      	b.n	8009236 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	629a      	str	r2, [r3, #40]	; 0x28
 80091fc:	e01b      	b.n	8009236 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6858      	ldr	r0, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	1c59      	adds	r1, r3, #1
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	6291      	str	r1, [r2, #40]	; 0x28
 8009216:	b2c2      	uxtb	r2, r0
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	e00c      	b.n	8009236 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	1c58      	adds	r0, r3, #1
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	6288      	str	r0, [r1, #40]	; 0x28
 800922e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29b      	uxth	r3, r3
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4619      	mov	r1, r3
 8009244:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009246:	2b00      	cmp	r3, #0
 8009248:	d120      	bne.n	800928c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0220 	bic.w	r2, r2, #32
 8009258:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695a      	ldr	r2, [r3, #20]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0201 	bic.w	r2, r2, #1
 8009278:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fd fbea 	bl	8006a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e002      	b.n	8009292 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	e000      	b.n	8009292 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009290:	2302      	movs	r3, #2
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80092de:	f023 030c 	bic.w	r3, r3, #12
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	430b      	orrs	r3, r1
 80092ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800930a:	f040 818b 	bne.w	8009624 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4ac1      	ldr	r2, [pc, #772]	; (8009618 <UART_SetConfig+0x37c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d005      	beq.n	8009324 <UART_SetConfig+0x88>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4abf      	ldr	r2, [pc, #764]	; (800961c <UART_SetConfig+0x380>)
 800931e:	4293      	cmp	r3, r2
 8009320:	f040 80bd 	bne.w	800949e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009324:	f7fe ff10 	bl	8008148 <HAL_RCC_GetPCLK2Freq>
 8009328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	461d      	mov	r5, r3
 800932e:	f04f 0600 	mov.w	r6, #0
 8009332:	46a8      	mov	r8, r5
 8009334:	46b1      	mov	r9, r6
 8009336:	eb18 0308 	adds.w	r3, r8, r8
 800933a:	eb49 0409 	adc.w	r4, r9, r9
 800933e:	4698      	mov	r8, r3
 8009340:	46a1      	mov	r9, r4
 8009342:	eb18 0805 	adds.w	r8, r8, r5
 8009346:	eb49 0906 	adc.w	r9, r9, r6
 800934a:	f04f 0100 	mov.w	r1, #0
 800934e:	f04f 0200 	mov.w	r2, #0
 8009352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800935a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800935e:	4688      	mov	r8, r1
 8009360:	4691      	mov	r9, r2
 8009362:	eb18 0005 	adds.w	r0, r8, r5
 8009366:	eb49 0106 	adc.w	r1, r9, r6
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	461d      	mov	r5, r3
 8009370:	f04f 0600 	mov.w	r6, #0
 8009374:	196b      	adds	r3, r5, r5
 8009376:	eb46 0406 	adc.w	r4, r6, r6
 800937a:	461a      	mov	r2, r3
 800937c:	4623      	mov	r3, r4
 800937e:	f7f7 fc33 	bl	8000be8 <__aeabi_uldivmod>
 8009382:	4603      	mov	r3, r0
 8009384:	460c      	mov	r4, r1
 8009386:	461a      	mov	r2, r3
 8009388:	4ba5      	ldr	r3, [pc, #660]	; (8009620 <UART_SetConfig+0x384>)
 800938a:	fba3 2302 	umull	r2, r3, r3, r2
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	461d      	mov	r5, r3
 8009398:	f04f 0600 	mov.w	r6, #0
 800939c:	46a9      	mov	r9, r5
 800939e:	46b2      	mov	sl, r6
 80093a0:	eb19 0309 	adds.w	r3, r9, r9
 80093a4:	eb4a 040a 	adc.w	r4, sl, sl
 80093a8:	4699      	mov	r9, r3
 80093aa:	46a2      	mov	sl, r4
 80093ac:	eb19 0905 	adds.w	r9, r9, r5
 80093b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80093b4:	f04f 0100 	mov.w	r1, #0
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093c8:	4689      	mov	r9, r1
 80093ca:	4692      	mov	sl, r2
 80093cc:	eb19 0005 	adds.w	r0, r9, r5
 80093d0:	eb4a 0106 	adc.w	r1, sl, r6
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	461d      	mov	r5, r3
 80093da:	f04f 0600 	mov.w	r6, #0
 80093de:	196b      	adds	r3, r5, r5
 80093e0:	eb46 0406 	adc.w	r4, r6, r6
 80093e4:	461a      	mov	r2, r3
 80093e6:	4623      	mov	r3, r4
 80093e8:	f7f7 fbfe 	bl	8000be8 <__aeabi_uldivmod>
 80093ec:	4603      	mov	r3, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b8b      	ldr	r3, [pc, #556]	; (8009620 <UART_SetConfig+0x384>)
 80093f4:	fba3 1302 	umull	r1, r3, r3, r2
 80093f8:	095b      	lsrs	r3, r3, #5
 80093fa:	2164      	movs	r1, #100	; 0x64
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	3332      	adds	r3, #50	; 0x32
 8009406:	4a86      	ldr	r2, [pc, #536]	; (8009620 <UART_SetConfig+0x384>)
 8009408:	fba2 2303 	umull	r2, r3, r2, r3
 800940c:	095b      	lsrs	r3, r3, #5
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009414:	4498      	add	r8, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	461d      	mov	r5, r3
 800941a:	f04f 0600 	mov.w	r6, #0
 800941e:	46a9      	mov	r9, r5
 8009420:	46b2      	mov	sl, r6
 8009422:	eb19 0309 	adds.w	r3, r9, r9
 8009426:	eb4a 040a 	adc.w	r4, sl, sl
 800942a:	4699      	mov	r9, r3
 800942c:	46a2      	mov	sl, r4
 800942e:	eb19 0905 	adds.w	r9, r9, r5
 8009432:	eb4a 0a06 	adc.w	sl, sl, r6
 8009436:	f04f 0100 	mov.w	r1, #0
 800943a:	f04f 0200 	mov.w	r2, #0
 800943e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800944a:	4689      	mov	r9, r1
 800944c:	4692      	mov	sl, r2
 800944e:	eb19 0005 	adds.w	r0, r9, r5
 8009452:	eb4a 0106 	adc.w	r1, sl, r6
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	461d      	mov	r5, r3
 800945c:	f04f 0600 	mov.w	r6, #0
 8009460:	196b      	adds	r3, r5, r5
 8009462:	eb46 0406 	adc.w	r4, r6, r6
 8009466:	461a      	mov	r2, r3
 8009468:	4623      	mov	r3, r4
 800946a:	f7f7 fbbd 	bl	8000be8 <__aeabi_uldivmod>
 800946e:	4603      	mov	r3, r0
 8009470:	460c      	mov	r4, r1
 8009472:	461a      	mov	r2, r3
 8009474:	4b6a      	ldr	r3, [pc, #424]	; (8009620 <UART_SetConfig+0x384>)
 8009476:	fba3 1302 	umull	r1, r3, r3, r2
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	2164      	movs	r1, #100	; 0x64
 800947e:	fb01 f303 	mul.w	r3, r1, r3
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	3332      	adds	r3, #50	; 0x32
 8009488:	4a65      	ldr	r2, [pc, #404]	; (8009620 <UART_SetConfig+0x384>)
 800948a:	fba2 2303 	umull	r2, r3, r2, r3
 800948e:	095b      	lsrs	r3, r3, #5
 8009490:	f003 0207 	and.w	r2, r3, #7
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4442      	add	r2, r8
 800949a:	609a      	str	r2, [r3, #8]
 800949c:	e26f      	b.n	800997e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800949e:	f7fe fe3f 	bl	8008120 <HAL_RCC_GetPCLK1Freq>
 80094a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	461d      	mov	r5, r3
 80094a8:	f04f 0600 	mov.w	r6, #0
 80094ac:	46a8      	mov	r8, r5
 80094ae:	46b1      	mov	r9, r6
 80094b0:	eb18 0308 	adds.w	r3, r8, r8
 80094b4:	eb49 0409 	adc.w	r4, r9, r9
 80094b8:	4698      	mov	r8, r3
 80094ba:	46a1      	mov	r9, r4
 80094bc:	eb18 0805 	adds.w	r8, r8, r5
 80094c0:	eb49 0906 	adc.w	r9, r9, r6
 80094c4:	f04f 0100 	mov.w	r1, #0
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80094d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80094d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80094d8:	4688      	mov	r8, r1
 80094da:	4691      	mov	r9, r2
 80094dc:	eb18 0005 	adds.w	r0, r8, r5
 80094e0:	eb49 0106 	adc.w	r1, r9, r6
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	461d      	mov	r5, r3
 80094ea:	f04f 0600 	mov.w	r6, #0
 80094ee:	196b      	adds	r3, r5, r5
 80094f0:	eb46 0406 	adc.w	r4, r6, r6
 80094f4:	461a      	mov	r2, r3
 80094f6:	4623      	mov	r3, r4
 80094f8:	f7f7 fb76 	bl	8000be8 <__aeabi_uldivmod>
 80094fc:	4603      	mov	r3, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	461a      	mov	r2, r3
 8009502:	4b47      	ldr	r3, [pc, #284]	; (8009620 <UART_SetConfig+0x384>)
 8009504:	fba3 2302 	umull	r2, r3, r3, r2
 8009508:	095b      	lsrs	r3, r3, #5
 800950a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	461d      	mov	r5, r3
 8009512:	f04f 0600 	mov.w	r6, #0
 8009516:	46a9      	mov	r9, r5
 8009518:	46b2      	mov	sl, r6
 800951a:	eb19 0309 	adds.w	r3, r9, r9
 800951e:	eb4a 040a 	adc.w	r4, sl, sl
 8009522:	4699      	mov	r9, r3
 8009524:	46a2      	mov	sl, r4
 8009526:	eb19 0905 	adds.w	r9, r9, r5
 800952a:	eb4a 0a06 	adc.w	sl, sl, r6
 800952e:	f04f 0100 	mov.w	r1, #0
 8009532:	f04f 0200 	mov.w	r2, #0
 8009536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800953a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800953e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009542:	4689      	mov	r9, r1
 8009544:	4692      	mov	sl, r2
 8009546:	eb19 0005 	adds.w	r0, r9, r5
 800954a:	eb4a 0106 	adc.w	r1, sl, r6
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	461d      	mov	r5, r3
 8009554:	f04f 0600 	mov.w	r6, #0
 8009558:	196b      	adds	r3, r5, r5
 800955a:	eb46 0406 	adc.w	r4, r6, r6
 800955e:	461a      	mov	r2, r3
 8009560:	4623      	mov	r3, r4
 8009562:	f7f7 fb41 	bl	8000be8 <__aeabi_uldivmod>
 8009566:	4603      	mov	r3, r0
 8009568:	460c      	mov	r4, r1
 800956a:	461a      	mov	r2, r3
 800956c:	4b2c      	ldr	r3, [pc, #176]	; (8009620 <UART_SetConfig+0x384>)
 800956e:	fba3 1302 	umull	r1, r3, r3, r2
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	2164      	movs	r1, #100	; 0x64
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	3332      	adds	r3, #50	; 0x32
 8009580:	4a27      	ldr	r2, [pc, #156]	; (8009620 <UART_SetConfig+0x384>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800958e:	4498      	add	r8, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	461d      	mov	r5, r3
 8009594:	f04f 0600 	mov.w	r6, #0
 8009598:	46a9      	mov	r9, r5
 800959a:	46b2      	mov	sl, r6
 800959c:	eb19 0309 	adds.w	r3, r9, r9
 80095a0:	eb4a 040a 	adc.w	r4, sl, sl
 80095a4:	4699      	mov	r9, r3
 80095a6:	46a2      	mov	sl, r4
 80095a8:	eb19 0905 	adds.w	r9, r9, r5
 80095ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	f04f 0200 	mov.w	r2, #0
 80095b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095c4:	4689      	mov	r9, r1
 80095c6:	4692      	mov	sl, r2
 80095c8:	eb19 0005 	adds.w	r0, r9, r5
 80095cc:	eb4a 0106 	adc.w	r1, sl, r6
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	461d      	mov	r5, r3
 80095d6:	f04f 0600 	mov.w	r6, #0
 80095da:	196b      	adds	r3, r5, r5
 80095dc:	eb46 0406 	adc.w	r4, r6, r6
 80095e0:	461a      	mov	r2, r3
 80095e2:	4623      	mov	r3, r4
 80095e4:	f7f7 fb00 	bl	8000be8 <__aeabi_uldivmod>
 80095e8:	4603      	mov	r3, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	461a      	mov	r2, r3
 80095ee:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <UART_SetConfig+0x384>)
 80095f0:	fba3 1302 	umull	r1, r3, r3, r2
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	2164      	movs	r1, #100	; 0x64
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	3332      	adds	r3, #50	; 0x32
 8009602:	4a07      	ldr	r2, [pc, #28]	; (8009620 <UART_SetConfig+0x384>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	f003 0207 	and.w	r2, r3, #7
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4442      	add	r2, r8
 8009614:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009616:	e1b2      	b.n	800997e <UART_SetConfig+0x6e2>
 8009618:	40011000 	.word	0x40011000
 800961c:	40011400 	.word	0x40011400
 8009620:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4ad7      	ldr	r2, [pc, #860]	; (8009988 <UART_SetConfig+0x6ec>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d005      	beq.n	800963a <UART_SetConfig+0x39e>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4ad6      	ldr	r2, [pc, #856]	; (800998c <UART_SetConfig+0x6f0>)
 8009634:	4293      	cmp	r3, r2
 8009636:	f040 80d1 	bne.w	80097dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800963a:	f7fe fd85 	bl	8008148 <HAL_RCC_GetPCLK2Freq>
 800963e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	469a      	mov	sl, r3
 8009644:	f04f 0b00 	mov.w	fp, #0
 8009648:	46d0      	mov	r8, sl
 800964a:	46d9      	mov	r9, fp
 800964c:	eb18 0308 	adds.w	r3, r8, r8
 8009650:	eb49 0409 	adc.w	r4, r9, r9
 8009654:	4698      	mov	r8, r3
 8009656:	46a1      	mov	r9, r4
 8009658:	eb18 080a 	adds.w	r8, r8, sl
 800965c:	eb49 090b 	adc.w	r9, r9, fp
 8009660:	f04f 0100 	mov.w	r1, #0
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800966c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009670:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009674:	4688      	mov	r8, r1
 8009676:	4691      	mov	r9, r2
 8009678:	eb1a 0508 	adds.w	r5, sl, r8
 800967c:	eb4b 0609 	adc.w	r6, fp, r9
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	4619      	mov	r1, r3
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	f04f 0400 	mov.w	r4, #0
 8009692:	0094      	lsls	r4, r2, #2
 8009694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009698:	008b      	lsls	r3, r1, #2
 800969a:	461a      	mov	r2, r3
 800969c:	4623      	mov	r3, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	4631      	mov	r1, r6
 80096a2:	f7f7 faa1 	bl	8000be8 <__aeabi_uldivmod>
 80096a6:	4603      	mov	r3, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	461a      	mov	r2, r3
 80096ac:	4bb8      	ldr	r3, [pc, #736]	; (8009990 <UART_SetConfig+0x6f4>)
 80096ae:	fba3 2302 	umull	r2, r3, r3, r2
 80096b2:	095b      	lsrs	r3, r3, #5
 80096b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	469b      	mov	fp, r3
 80096bc:	f04f 0c00 	mov.w	ip, #0
 80096c0:	46d9      	mov	r9, fp
 80096c2:	46e2      	mov	sl, ip
 80096c4:	eb19 0309 	adds.w	r3, r9, r9
 80096c8:	eb4a 040a 	adc.w	r4, sl, sl
 80096cc:	4699      	mov	r9, r3
 80096ce:	46a2      	mov	sl, r4
 80096d0:	eb19 090b 	adds.w	r9, r9, fp
 80096d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80096d8:	f04f 0100 	mov.w	r1, #0
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096ec:	4689      	mov	r9, r1
 80096ee:	4692      	mov	sl, r2
 80096f0:	eb1b 0509 	adds.w	r5, fp, r9
 80096f4:	eb4c 060a 	adc.w	r6, ip, sl
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	4619      	mov	r1, r3
 80096fe:	f04f 0200 	mov.w	r2, #0
 8009702:	f04f 0300 	mov.w	r3, #0
 8009706:	f04f 0400 	mov.w	r4, #0
 800970a:	0094      	lsls	r4, r2, #2
 800970c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009710:	008b      	lsls	r3, r1, #2
 8009712:	461a      	mov	r2, r3
 8009714:	4623      	mov	r3, r4
 8009716:	4628      	mov	r0, r5
 8009718:	4631      	mov	r1, r6
 800971a:	f7f7 fa65 	bl	8000be8 <__aeabi_uldivmod>
 800971e:	4603      	mov	r3, r0
 8009720:	460c      	mov	r4, r1
 8009722:	461a      	mov	r2, r3
 8009724:	4b9a      	ldr	r3, [pc, #616]	; (8009990 <UART_SetConfig+0x6f4>)
 8009726:	fba3 1302 	umull	r1, r3, r3, r2
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	2164      	movs	r1, #100	; 0x64
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	3332      	adds	r3, #50	; 0x32
 8009738:	4a95      	ldr	r2, [pc, #596]	; (8009990 <UART_SetConfig+0x6f4>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009744:	4498      	add	r8, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	469b      	mov	fp, r3
 800974a:	f04f 0c00 	mov.w	ip, #0
 800974e:	46d9      	mov	r9, fp
 8009750:	46e2      	mov	sl, ip
 8009752:	eb19 0309 	adds.w	r3, r9, r9
 8009756:	eb4a 040a 	adc.w	r4, sl, sl
 800975a:	4699      	mov	r9, r3
 800975c:	46a2      	mov	sl, r4
 800975e:	eb19 090b 	adds.w	r9, r9, fp
 8009762:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009766:	f04f 0100 	mov.w	r1, #0
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800977a:	4689      	mov	r9, r1
 800977c:	4692      	mov	sl, r2
 800977e:	eb1b 0509 	adds.w	r5, fp, r9
 8009782:	eb4c 060a 	adc.w	r6, ip, sl
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	4619      	mov	r1, r3
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	f04f 0300 	mov.w	r3, #0
 8009794:	f04f 0400 	mov.w	r4, #0
 8009798:	0094      	lsls	r4, r2, #2
 800979a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800979e:	008b      	lsls	r3, r1, #2
 80097a0:	461a      	mov	r2, r3
 80097a2:	4623      	mov	r3, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	4631      	mov	r1, r6
 80097a8:	f7f7 fa1e 	bl	8000be8 <__aeabi_uldivmod>
 80097ac:	4603      	mov	r3, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	461a      	mov	r2, r3
 80097b2:	4b77      	ldr	r3, [pc, #476]	; (8009990 <UART_SetConfig+0x6f4>)
 80097b4:	fba3 1302 	umull	r1, r3, r3, r2
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	2164      	movs	r1, #100	; 0x64
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	3332      	adds	r3, #50	; 0x32
 80097c6:	4a72      	ldr	r2, [pc, #456]	; (8009990 <UART_SetConfig+0x6f4>)
 80097c8:	fba2 2303 	umull	r2, r3, r2, r3
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	f003 020f 	and.w	r2, r3, #15
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4442      	add	r2, r8
 80097d8:	609a      	str	r2, [r3, #8]
 80097da:	e0d0      	b.n	800997e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80097dc:	f7fe fca0 	bl	8008120 <HAL_RCC_GetPCLK1Freq>
 80097e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	469a      	mov	sl, r3
 80097e6:	f04f 0b00 	mov.w	fp, #0
 80097ea:	46d0      	mov	r8, sl
 80097ec:	46d9      	mov	r9, fp
 80097ee:	eb18 0308 	adds.w	r3, r8, r8
 80097f2:	eb49 0409 	adc.w	r4, r9, r9
 80097f6:	4698      	mov	r8, r3
 80097f8:	46a1      	mov	r9, r4
 80097fa:	eb18 080a 	adds.w	r8, r8, sl
 80097fe:	eb49 090b 	adc.w	r9, r9, fp
 8009802:	f04f 0100 	mov.w	r1, #0
 8009806:	f04f 0200 	mov.w	r2, #0
 800980a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800980e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009812:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009816:	4688      	mov	r8, r1
 8009818:	4691      	mov	r9, r2
 800981a:	eb1a 0508 	adds.w	r5, sl, r8
 800981e:	eb4b 0609 	adc.w	r6, fp, r9
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	4619      	mov	r1, r3
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	f04f 0300 	mov.w	r3, #0
 8009830:	f04f 0400 	mov.w	r4, #0
 8009834:	0094      	lsls	r4, r2, #2
 8009836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800983a:	008b      	lsls	r3, r1, #2
 800983c:	461a      	mov	r2, r3
 800983e:	4623      	mov	r3, r4
 8009840:	4628      	mov	r0, r5
 8009842:	4631      	mov	r1, r6
 8009844:	f7f7 f9d0 	bl	8000be8 <__aeabi_uldivmod>
 8009848:	4603      	mov	r3, r0
 800984a:	460c      	mov	r4, r1
 800984c:	461a      	mov	r2, r3
 800984e:	4b50      	ldr	r3, [pc, #320]	; (8009990 <UART_SetConfig+0x6f4>)
 8009850:	fba3 2302 	umull	r2, r3, r3, r2
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	469b      	mov	fp, r3
 800985e:	f04f 0c00 	mov.w	ip, #0
 8009862:	46d9      	mov	r9, fp
 8009864:	46e2      	mov	sl, ip
 8009866:	eb19 0309 	adds.w	r3, r9, r9
 800986a:	eb4a 040a 	adc.w	r4, sl, sl
 800986e:	4699      	mov	r9, r3
 8009870:	46a2      	mov	sl, r4
 8009872:	eb19 090b 	adds.w	r9, r9, fp
 8009876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800987a:	f04f 0100 	mov.w	r1, #0
 800987e:	f04f 0200 	mov.w	r2, #0
 8009882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800988a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800988e:	4689      	mov	r9, r1
 8009890:	4692      	mov	sl, r2
 8009892:	eb1b 0509 	adds.w	r5, fp, r9
 8009896:	eb4c 060a 	adc.w	r6, ip, sl
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4619      	mov	r1, r3
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	f04f 0400 	mov.w	r4, #0
 80098ac:	0094      	lsls	r4, r2, #2
 80098ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098b2:	008b      	lsls	r3, r1, #2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4623      	mov	r3, r4
 80098b8:	4628      	mov	r0, r5
 80098ba:	4631      	mov	r1, r6
 80098bc:	f7f7 f994 	bl	8000be8 <__aeabi_uldivmod>
 80098c0:	4603      	mov	r3, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	461a      	mov	r2, r3
 80098c6:	4b32      	ldr	r3, [pc, #200]	; (8009990 <UART_SetConfig+0x6f4>)
 80098c8:	fba3 1302 	umull	r1, r3, r3, r2
 80098cc:	095b      	lsrs	r3, r3, #5
 80098ce:	2164      	movs	r1, #100	; 0x64
 80098d0:	fb01 f303 	mul.w	r3, r1, r3
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	3332      	adds	r3, #50	; 0x32
 80098da:	4a2d      	ldr	r2, [pc, #180]	; (8009990 <UART_SetConfig+0x6f4>)
 80098dc:	fba2 2303 	umull	r2, r3, r2, r3
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098e6:	4498      	add	r8, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	469b      	mov	fp, r3
 80098ec:	f04f 0c00 	mov.w	ip, #0
 80098f0:	46d9      	mov	r9, fp
 80098f2:	46e2      	mov	sl, ip
 80098f4:	eb19 0309 	adds.w	r3, r9, r9
 80098f8:	eb4a 040a 	adc.w	r4, sl, sl
 80098fc:	4699      	mov	r9, r3
 80098fe:	46a2      	mov	sl, r4
 8009900:	eb19 090b 	adds.w	r9, r9, fp
 8009904:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009908:	f04f 0100 	mov.w	r1, #0
 800990c:	f04f 0200 	mov.w	r2, #0
 8009910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009914:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009918:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800991c:	4689      	mov	r9, r1
 800991e:	4692      	mov	sl, r2
 8009920:	eb1b 0509 	adds.w	r5, fp, r9
 8009924:	eb4c 060a 	adc.w	r6, ip, sl
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4619      	mov	r1, r3
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	f04f 0400 	mov.w	r4, #0
 800993a:	0094      	lsls	r4, r2, #2
 800993c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009940:	008b      	lsls	r3, r1, #2
 8009942:	461a      	mov	r2, r3
 8009944:	4623      	mov	r3, r4
 8009946:	4628      	mov	r0, r5
 8009948:	4631      	mov	r1, r6
 800994a:	f7f7 f94d 	bl	8000be8 <__aeabi_uldivmod>
 800994e:	4603      	mov	r3, r0
 8009950:	460c      	mov	r4, r1
 8009952:	461a      	mov	r2, r3
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <UART_SetConfig+0x6f4>)
 8009956:	fba3 1302 	umull	r1, r3, r3, r2
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	2164      	movs	r1, #100	; 0x64
 800995e:	fb01 f303 	mul.w	r3, r1, r3
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	3332      	adds	r3, #50	; 0x32
 8009968:	4a09      	ldr	r2, [pc, #36]	; (8009990 <UART_SetConfig+0x6f4>)
 800996a:	fba2 2303 	umull	r2, r3, r2, r3
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	f003 020f 	and.w	r2, r3, #15
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4442      	add	r2, r8
 800997a:	609a      	str	r2, [r3, #8]
}
 800997c:	e7ff      	b.n	800997e <UART_SetConfig+0x6e2>
 800997e:	bf00      	nop
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	40011000 	.word	0x40011000
 800998c:	40011400 	.word	0x40011400
 8009990:	51eb851f 	.word	0x51eb851f

08009994 <_Znwj>:
 8009994:	b510      	push	{r4, lr}
 8009996:	2800      	cmp	r0, #0
 8009998:	bf14      	ite	ne
 800999a:	4604      	movne	r4, r0
 800999c:	2401      	moveq	r4, #1
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 f84c 	bl	8009a3c <malloc>
 80099a4:	b930      	cbnz	r0, 80099b4 <_Znwj+0x20>
 80099a6:	f000 f807 	bl	80099b8 <_ZSt15get_new_handlerv>
 80099aa:	b908      	cbnz	r0, 80099b0 <_Znwj+0x1c>
 80099ac:	f000 f814 	bl	80099d8 <abort>
 80099b0:	4780      	blx	r0
 80099b2:	e7f4      	b.n	800999e <_Znwj+0xa>
 80099b4:	bd10      	pop	{r4, pc}
	...

080099b8 <_ZSt15get_new_handlerv>:
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <_ZSt15get_new_handlerv+0xc>)
 80099ba:	6818      	ldr	r0, [r3, #0]
 80099bc:	f3bf 8f5b 	dmb	ish
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	200004dc 	.word	0x200004dc

080099c8 <_ZdlPv>:
 80099c8:	f000 b840 	b.w	8009a4c <free>

080099cc <_ZSt17__throw_bad_allocv>:
 80099cc:	b508      	push	{r3, lr}
 80099ce:	f000 f803 	bl	80099d8 <abort>

080099d2 <_ZSt20__throw_length_errorPKc>:
 80099d2:	b508      	push	{r3, lr}
 80099d4:	f000 f800 	bl	80099d8 <abort>

080099d8 <abort>:
 80099d8:	b508      	push	{r3, lr}
 80099da:	2006      	movs	r0, #6
 80099dc:	f000 fdbe 	bl	800a55c <raise>
 80099e0:	2001      	movs	r0, #1
 80099e2:	f7fd fd77 	bl	80074d4 <_exit>
	...

080099e8 <__errno>:
 80099e8:	4b01      	ldr	r3, [pc, #4]	; (80099f0 <__errno+0x8>)
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	2000000c 	.word	0x2000000c

080099f4 <__libc_init_array>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	4e0d      	ldr	r6, [pc, #52]	; (8009a2c <__libc_init_array+0x38>)
 80099f8:	4c0d      	ldr	r4, [pc, #52]	; (8009a30 <__libc_init_array+0x3c>)
 80099fa:	1ba4      	subs	r4, r4, r6
 80099fc:	10a4      	asrs	r4, r4, #2
 80099fe:	2500      	movs	r5, #0
 8009a00:	42a5      	cmp	r5, r4
 8009a02:	d109      	bne.n	8009a18 <__libc_init_array+0x24>
 8009a04:	4e0b      	ldr	r6, [pc, #44]	; (8009a34 <__libc_init_array+0x40>)
 8009a06:	4c0c      	ldr	r4, [pc, #48]	; (8009a38 <__libc_init_array+0x44>)
 8009a08:	f002 fbae 	bl	800c168 <_init>
 8009a0c:	1ba4      	subs	r4, r4, r6
 8009a0e:	10a4      	asrs	r4, r4, #2
 8009a10:	2500      	movs	r5, #0
 8009a12:	42a5      	cmp	r5, r4
 8009a14:	d105      	bne.n	8009a22 <__libc_init_array+0x2e>
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a1c:	4798      	blx	r3
 8009a1e:	3501      	adds	r5, #1
 8009a20:	e7ee      	b.n	8009a00 <__libc_init_array+0xc>
 8009a22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a26:	4798      	blx	r3
 8009a28:	3501      	adds	r5, #1
 8009a2a:	e7f2      	b.n	8009a12 <__libc_init_array+0x1e>
 8009a2c:	0800c4d0 	.word	0x0800c4d0
 8009a30:	0800c4d0 	.word	0x0800c4d0
 8009a34:	0800c4d0 	.word	0x0800c4d0
 8009a38:	0800c4dc 	.word	0x0800c4dc

08009a3c <malloc>:
 8009a3c:	4b02      	ldr	r3, [pc, #8]	; (8009a48 <malloc+0xc>)
 8009a3e:	4601      	mov	r1, r0
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f000 b885 	b.w	8009b50 <_malloc_r>
 8009a46:	bf00      	nop
 8009a48:	2000000c 	.word	0x2000000c

08009a4c <free>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <free+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f000 b82f 	b.w	8009ab4 <_free_r>
 8009a56:	bf00      	nop
 8009a58:	2000000c 	.word	0x2000000c

08009a5c <memcpy>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	1e43      	subs	r3, r0, #1
 8009a60:	440a      	add	r2, r1
 8009a62:	4291      	cmp	r1, r2
 8009a64:	d100      	bne.n	8009a68 <memcpy+0xc>
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a70:	e7f7      	b.n	8009a62 <memcpy+0x6>

08009a72 <memmove>:
 8009a72:	4288      	cmp	r0, r1
 8009a74:	b510      	push	{r4, lr}
 8009a76:	eb01 0302 	add.w	r3, r1, r2
 8009a7a:	d807      	bhi.n	8009a8c <memmove+0x1a>
 8009a7c:	1e42      	subs	r2, r0, #1
 8009a7e:	4299      	cmp	r1, r3
 8009a80:	d00a      	beq.n	8009a98 <memmove+0x26>
 8009a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a8a:	e7f8      	b.n	8009a7e <memmove+0xc>
 8009a8c:	4283      	cmp	r3, r0
 8009a8e:	d9f5      	bls.n	8009a7c <memmove+0xa>
 8009a90:	1881      	adds	r1, r0, r2
 8009a92:	1ad2      	subs	r2, r2, r3
 8009a94:	42d3      	cmn	r3, r2
 8009a96:	d100      	bne.n	8009a9a <memmove+0x28>
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009aa2:	e7f7      	b.n	8009a94 <memmove+0x22>

08009aa4 <memset>:
 8009aa4:	4402      	add	r2, r0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d100      	bne.n	8009aae <memset+0xa>
 8009aac:	4770      	bx	lr
 8009aae:	f803 1b01 	strb.w	r1, [r3], #1
 8009ab2:	e7f9      	b.n	8009aa8 <memset+0x4>

08009ab4 <_free_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d045      	beq.n	8009b48 <_free_r+0x94>
 8009abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac0:	1f0c      	subs	r4, r1, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bfb8      	it	lt
 8009ac6:	18e4      	addlt	r4, r4, r3
 8009ac8:	f001 fc82 	bl	800b3d0 <__malloc_lock>
 8009acc:	4a1f      	ldr	r2, [pc, #124]	; (8009b4c <_free_r+0x98>)
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	b933      	cbnz	r3, 8009ae2 <_free_r+0x2e>
 8009ad4:	6063      	str	r3, [r4, #4]
 8009ad6:	6014      	str	r4, [r2, #0]
 8009ad8:	4628      	mov	r0, r5
 8009ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ade:	f001 bc78 	b.w	800b3d2 <__malloc_unlock>
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	d90c      	bls.n	8009b00 <_free_r+0x4c>
 8009ae6:	6821      	ldr	r1, [r4, #0]
 8009ae8:	1862      	adds	r2, r4, r1
 8009aea:	4293      	cmp	r3, r2
 8009aec:	bf04      	itt	eq
 8009aee:	681a      	ldreq	r2, [r3, #0]
 8009af0:	685b      	ldreq	r3, [r3, #4]
 8009af2:	6063      	str	r3, [r4, #4]
 8009af4:	bf04      	itt	eq
 8009af6:	1852      	addeq	r2, r2, r1
 8009af8:	6022      	streq	r2, [r4, #0]
 8009afa:	6004      	str	r4, [r0, #0]
 8009afc:	e7ec      	b.n	8009ad8 <_free_r+0x24>
 8009afe:	4613      	mov	r3, r2
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	b10a      	cbz	r2, 8009b08 <_free_r+0x54>
 8009b04:	42a2      	cmp	r2, r4
 8009b06:	d9fa      	bls.n	8009afe <_free_r+0x4a>
 8009b08:	6819      	ldr	r1, [r3, #0]
 8009b0a:	1858      	adds	r0, r3, r1
 8009b0c:	42a0      	cmp	r0, r4
 8009b0e:	d10b      	bne.n	8009b28 <_free_r+0x74>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	4401      	add	r1, r0
 8009b14:	1858      	adds	r0, r3, r1
 8009b16:	4282      	cmp	r2, r0
 8009b18:	6019      	str	r1, [r3, #0]
 8009b1a:	d1dd      	bne.n	8009ad8 <_free_r+0x24>
 8009b1c:	6810      	ldr	r0, [r2, #0]
 8009b1e:	6852      	ldr	r2, [r2, #4]
 8009b20:	605a      	str	r2, [r3, #4]
 8009b22:	4401      	add	r1, r0
 8009b24:	6019      	str	r1, [r3, #0]
 8009b26:	e7d7      	b.n	8009ad8 <_free_r+0x24>
 8009b28:	d902      	bls.n	8009b30 <_free_r+0x7c>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	e7d3      	b.n	8009ad8 <_free_r+0x24>
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	1821      	adds	r1, r4, r0
 8009b34:	428a      	cmp	r2, r1
 8009b36:	bf04      	itt	eq
 8009b38:	6811      	ldreq	r1, [r2, #0]
 8009b3a:	6852      	ldreq	r2, [r2, #4]
 8009b3c:	6062      	str	r2, [r4, #4]
 8009b3e:	bf04      	itt	eq
 8009b40:	1809      	addeq	r1, r1, r0
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	605c      	str	r4, [r3, #4]
 8009b46:	e7c7      	b.n	8009ad8 <_free_r+0x24>
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200004e0 	.word	0x200004e0

08009b50 <_malloc_r>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	1ccd      	adds	r5, r1, #3
 8009b54:	f025 0503 	bic.w	r5, r5, #3
 8009b58:	3508      	adds	r5, #8
 8009b5a:	2d0c      	cmp	r5, #12
 8009b5c:	bf38      	it	cc
 8009b5e:	250c      	movcc	r5, #12
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	4606      	mov	r6, r0
 8009b64:	db01      	blt.n	8009b6a <_malloc_r+0x1a>
 8009b66:	42a9      	cmp	r1, r5
 8009b68:	d903      	bls.n	8009b72 <_malloc_r+0x22>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	2000      	movs	r0, #0
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	f001 fc2d 	bl	800b3d0 <__malloc_lock>
 8009b76:	4a21      	ldr	r2, [pc, #132]	; (8009bfc <_malloc_r+0xac>)
 8009b78:	6814      	ldr	r4, [r2, #0]
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	b991      	cbnz	r1, 8009ba4 <_malloc_r+0x54>
 8009b7e:	4c20      	ldr	r4, [pc, #128]	; (8009c00 <_malloc_r+0xb0>)
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	b91b      	cbnz	r3, 8009b8c <_malloc_r+0x3c>
 8009b84:	4630      	mov	r0, r6
 8009b86:	f000 fcb1 	bl	800a4ec <_sbrk_r>
 8009b8a:	6020      	str	r0, [r4, #0]
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f000 fcac 	bl	800a4ec <_sbrk_r>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d124      	bne.n	8009be2 <_malloc_r+0x92>
 8009b98:	230c      	movs	r3, #12
 8009b9a:	6033      	str	r3, [r6, #0]
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f001 fc18 	bl	800b3d2 <__malloc_unlock>
 8009ba2:	e7e4      	b.n	8009b6e <_malloc_r+0x1e>
 8009ba4:	680b      	ldr	r3, [r1, #0]
 8009ba6:	1b5b      	subs	r3, r3, r5
 8009ba8:	d418      	bmi.n	8009bdc <_malloc_r+0x8c>
 8009baa:	2b0b      	cmp	r3, #11
 8009bac:	d90f      	bls.n	8009bce <_malloc_r+0x7e>
 8009bae:	600b      	str	r3, [r1, #0]
 8009bb0:	50cd      	str	r5, [r1, r3]
 8009bb2:	18cc      	adds	r4, r1, r3
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f001 fc0c 	bl	800b3d2 <__malloc_unlock>
 8009bba:	f104 000b 	add.w	r0, r4, #11
 8009bbe:	1d23      	adds	r3, r4, #4
 8009bc0:	f020 0007 	bic.w	r0, r0, #7
 8009bc4:	1ac3      	subs	r3, r0, r3
 8009bc6:	d0d3      	beq.n	8009b70 <_malloc_r+0x20>
 8009bc8:	425a      	negs	r2, r3
 8009bca:	50e2      	str	r2, [r4, r3]
 8009bcc:	e7d0      	b.n	8009b70 <_malloc_r+0x20>
 8009bce:	428c      	cmp	r4, r1
 8009bd0:	684b      	ldr	r3, [r1, #4]
 8009bd2:	bf16      	itet	ne
 8009bd4:	6063      	strne	r3, [r4, #4]
 8009bd6:	6013      	streq	r3, [r2, #0]
 8009bd8:	460c      	movne	r4, r1
 8009bda:	e7eb      	b.n	8009bb4 <_malloc_r+0x64>
 8009bdc:	460c      	mov	r4, r1
 8009bde:	6849      	ldr	r1, [r1, #4]
 8009be0:	e7cc      	b.n	8009b7c <_malloc_r+0x2c>
 8009be2:	1cc4      	adds	r4, r0, #3
 8009be4:	f024 0403 	bic.w	r4, r4, #3
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d005      	beq.n	8009bf8 <_malloc_r+0xa8>
 8009bec:	1a21      	subs	r1, r4, r0
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f000 fc7c 	bl	800a4ec <_sbrk_r>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d0cf      	beq.n	8009b98 <_malloc_r+0x48>
 8009bf8:	6025      	str	r5, [r4, #0]
 8009bfa:	e7db      	b.n	8009bb4 <_malloc_r+0x64>
 8009bfc:	200004e0 	.word	0x200004e0
 8009c00:	200004e4 	.word	0x200004e4

08009c04 <__cvt>:
 8009c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	ec55 4b10 	vmov	r4, r5, d0
 8009c0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009c0e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	460e      	mov	r6, r1
 8009c16:	4691      	mov	r9, r2
 8009c18:	4619      	mov	r1, r3
 8009c1a:	bfb8      	it	lt
 8009c1c:	4622      	movlt	r2, r4
 8009c1e:	462b      	mov	r3, r5
 8009c20:	f027 0720 	bic.w	r7, r7, #32
 8009c24:	bfbb      	ittet	lt
 8009c26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c2a:	461d      	movlt	r5, r3
 8009c2c:	2300      	movge	r3, #0
 8009c2e:	232d      	movlt	r3, #45	; 0x2d
 8009c30:	bfb8      	it	lt
 8009c32:	4614      	movlt	r4, r2
 8009c34:	2f46      	cmp	r7, #70	; 0x46
 8009c36:	700b      	strb	r3, [r1, #0]
 8009c38:	d004      	beq.n	8009c44 <__cvt+0x40>
 8009c3a:	2f45      	cmp	r7, #69	; 0x45
 8009c3c:	d100      	bne.n	8009c40 <__cvt+0x3c>
 8009c3e:	3601      	adds	r6, #1
 8009c40:	2102      	movs	r1, #2
 8009c42:	e000      	b.n	8009c46 <__cvt+0x42>
 8009c44:	2103      	movs	r1, #3
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	ab02      	add	r3, sp, #8
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	4632      	mov	r2, r6
 8009c50:	4653      	mov	r3, sl
 8009c52:	ec45 4b10 	vmov	d0, r4, r5
 8009c56:	f000 fd2b 	bl	800a6b0 <_dtoa_r>
 8009c5a:	2f47      	cmp	r7, #71	; 0x47
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	d102      	bne.n	8009c66 <__cvt+0x62>
 8009c60:	f019 0f01 	tst.w	r9, #1
 8009c64:	d026      	beq.n	8009cb4 <__cvt+0xb0>
 8009c66:	2f46      	cmp	r7, #70	; 0x46
 8009c68:	eb08 0906 	add.w	r9, r8, r6
 8009c6c:	d111      	bne.n	8009c92 <__cvt+0x8e>
 8009c6e:	f898 3000 	ldrb.w	r3, [r8]
 8009c72:	2b30      	cmp	r3, #48	; 0x30
 8009c74:	d10a      	bne.n	8009c8c <__cvt+0x88>
 8009c76:	2200      	movs	r2, #0
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	f7f6 ff43 	bl	8000b08 <__aeabi_dcmpeq>
 8009c82:	b918      	cbnz	r0, 8009c8c <__cvt+0x88>
 8009c84:	f1c6 0601 	rsb	r6, r6, #1
 8009c88:	f8ca 6000 	str.w	r6, [sl]
 8009c8c:	f8da 3000 	ldr.w	r3, [sl]
 8009c90:	4499      	add	r9, r3
 8009c92:	2200      	movs	r2, #0
 8009c94:	2300      	movs	r3, #0
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 ff35 	bl	8000b08 <__aeabi_dcmpeq>
 8009c9e:	b938      	cbnz	r0, 8009cb0 <__cvt+0xac>
 8009ca0:	2230      	movs	r2, #48	; 0x30
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	454b      	cmp	r3, r9
 8009ca6:	d205      	bcs.n	8009cb4 <__cvt+0xb0>
 8009ca8:	1c59      	adds	r1, r3, #1
 8009caa:	9103      	str	r1, [sp, #12]
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	e7f8      	b.n	8009ca2 <__cvt+0x9e>
 8009cb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb8:	eba3 0308 	sub.w	r3, r3, r8
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	b004      	add	sp, #16
 8009cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009cc6 <__exponent>:
 8009cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	4604      	mov	r4, r0
 8009ccc:	bfba      	itte	lt
 8009cce:	4249      	neglt	r1, r1
 8009cd0:	232d      	movlt	r3, #45	; 0x2d
 8009cd2:	232b      	movge	r3, #43	; 0x2b
 8009cd4:	2909      	cmp	r1, #9
 8009cd6:	f804 2b02 	strb.w	r2, [r4], #2
 8009cda:	7043      	strb	r3, [r0, #1]
 8009cdc:	dd20      	ble.n	8009d20 <__exponent+0x5a>
 8009cde:	f10d 0307 	add.w	r3, sp, #7
 8009ce2:	461f      	mov	r7, r3
 8009ce4:	260a      	movs	r6, #10
 8009ce6:	fb91 f5f6 	sdiv	r5, r1, r6
 8009cea:	fb06 1115 	mls	r1, r6, r5, r1
 8009cee:	3130      	adds	r1, #48	; 0x30
 8009cf0:	2d09      	cmp	r5, #9
 8009cf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009cf6:	f103 32ff 	add.w	r2, r3, #4294967295
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	dc09      	bgt.n	8009d12 <__exponent+0x4c>
 8009cfe:	3130      	adds	r1, #48	; 0x30
 8009d00:	3b02      	subs	r3, #2
 8009d02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d06:	42bb      	cmp	r3, r7
 8009d08:	4622      	mov	r2, r4
 8009d0a:	d304      	bcc.n	8009d16 <__exponent+0x50>
 8009d0c:	1a10      	subs	r0, r2, r0
 8009d0e:	b003      	add	sp, #12
 8009d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d12:	4613      	mov	r3, r2
 8009d14:	e7e7      	b.n	8009ce6 <__exponent+0x20>
 8009d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d1a:	f804 2b01 	strb.w	r2, [r4], #1
 8009d1e:	e7f2      	b.n	8009d06 <__exponent+0x40>
 8009d20:	2330      	movs	r3, #48	; 0x30
 8009d22:	4419      	add	r1, r3
 8009d24:	7083      	strb	r3, [r0, #2]
 8009d26:	1d02      	adds	r2, r0, #4
 8009d28:	70c1      	strb	r1, [r0, #3]
 8009d2a:	e7ef      	b.n	8009d0c <__exponent+0x46>

08009d2c <_printf_float>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	b08d      	sub	sp, #52	; 0x34
 8009d32:	460c      	mov	r4, r1
 8009d34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009d38:	4616      	mov	r6, r2
 8009d3a:	461f      	mov	r7, r3
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	f001 fb39 	bl	800b3b4 <_localeconv_r>
 8009d42:	6803      	ldr	r3, [r0, #0]
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7f6 fa62 	bl	8000210 <strlen>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d50:	f8d8 3000 	ldr.w	r3, [r8]
 8009d54:	9005      	str	r0, [sp, #20]
 8009d56:	3307      	adds	r3, #7
 8009d58:	f023 0307 	bic.w	r3, r3, #7
 8009d5c:	f103 0208 	add.w	r2, r3, #8
 8009d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d64:	f8d4 b000 	ldr.w	fp, [r4]
 8009d68:	f8c8 2000 	str.w	r2, [r8]
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295
 8009d86:	4ba7      	ldr	r3, [pc, #668]	; (800a024 <_printf_float+0x2f8>)
 8009d88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d8c:	f7f6 feee 	bl	8000b6c <__aeabi_dcmpun>
 8009d90:	bb70      	cbnz	r0, 8009df0 <_printf_float+0xc4>
 8009d92:	f04f 32ff 	mov.w	r2, #4294967295
 8009d96:	4ba3      	ldr	r3, [pc, #652]	; (800a024 <_printf_float+0x2f8>)
 8009d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d9c:	f7f6 fec8 	bl	8000b30 <__aeabi_dcmple>
 8009da0:	bb30      	cbnz	r0, 8009df0 <_printf_float+0xc4>
 8009da2:	2200      	movs	r2, #0
 8009da4:	2300      	movs	r3, #0
 8009da6:	4640      	mov	r0, r8
 8009da8:	4649      	mov	r1, r9
 8009daa:	f7f6 feb7 	bl	8000b1c <__aeabi_dcmplt>
 8009dae:	b110      	cbz	r0, 8009db6 <_printf_float+0x8a>
 8009db0:	232d      	movs	r3, #45	; 0x2d
 8009db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db6:	4a9c      	ldr	r2, [pc, #624]	; (800a028 <_printf_float+0x2fc>)
 8009db8:	4b9c      	ldr	r3, [pc, #624]	; (800a02c <_printf_float+0x300>)
 8009dba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009dbe:	bf8c      	ite	hi
 8009dc0:	4690      	movhi	r8, r2
 8009dc2:	4698      	movls	r8, r3
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	f02b 0204 	bic.w	r2, fp, #4
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	f04f 0900 	mov.w	r9, #0
 8009dd2:	9700      	str	r7, [sp, #0]
 8009dd4:	4633      	mov	r3, r6
 8009dd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f000 f9e6 	bl	800a1ac <_printf_common>
 8009de0:	3001      	adds	r0, #1
 8009de2:	f040 808d 	bne.w	8009f00 <_printf_float+0x1d4>
 8009de6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dea:	b00d      	add	sp, #52	; 0x34
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	4640      	mov	r0, r8
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 feb8 	bl	8000b6c <__aeabi_dcmpun>
 8009dfc:	b110      	cbz	r0, 8009e04 <_printf_float+0xd8>
 8009dfe:	4a8c      	ldr	r2, [pc, #560]	; (800a030 <_printf_float+0x304>)
 8009e00:	4b8c      	ldr	r3, [pc, #560]	; (800a034 <_printf_float+0x308>)
 8009e02:	e7da      	b.n	8009dba <_printf_float+0x8e>
 8009e04:	6861      	ldr	r1, [r4, #4]
 8009e06:	1c4b      	adds	r3, r1, #1
 8009e08:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009e0c:	a80a      	add	r0, sp, #40	; 0x28
 8009e0e:	d13e      	bne.n	8009e8e <_printf_float+0x162>
 8009e10:	2306      	movs	r3, #6
 8009e12:	6063      	str	r3, [r4, #4]
 8009e14:	2300      	movs	r3, #0
 8009e16:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009e1a:	ab09      	add	r3, sp, #36	; 0x24
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	ec49 8b10 	vmov	d0, r8, r9
 8009e22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	f8cd a004 	str.w	sl, [sp, #4]
 8009e2c:	6861      	ldr	r1, [r4, #4]
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7ff fee8 	bl	8009c04 <__cvt>
 8009e34:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009e38:	2b47      	cmp	r3, #71	; 0x47
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	d109      	bne.n	8009e52 <_printf_float+0x126>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e40:	1cd8      	adds	r0, r3, #3
 8009e42:	db02      	blt.n	8009e4a <_printf_float+0x11e>
 8009e44:	6862      	ldr	r2, [r4, #4]
 8009e46:	4293      	cmp	r3, r2
 8009e48:	dd47      	ble.n	8009eda <_printf_float+0x1ae>
 8009e4a:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e4e:	fa5f fa8a 	uxtb.w	sl, sl
 8009e52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e58:	d824      	bhi.n	8009ea4 <_printf_float+0x178>
 8009e5a:	3901      	subs	r1, #1
 8009e5c:	4652      	mov	r2, sl
 8009e5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e62:	9109      	str	r1, [sp, #36]	; 0x24
 8009e64:	f7ff ff2f 	bl	8009cc6 <__exponent>
 8009e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e6a:	1813      	adds	r3, r2, r0
 8009e6c:	2a01      	cmp	r2, #1
 8009e6e:	4681      	mov	r9, r0
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	dc02      	bgt.n	8009e7a <_printf_float+0x14e>
 8009e74:	6822      	ldr	r2, [r4, #0]
 8009e76:	07d1      	lsls	r1, r2, #31
 8009e78:	d501      	bpl.n	8009e7e <_printf_float+0x152>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0a5      	beq.n	8009dd2 <_printf_float+0xa6>
 8009e86:	232d      	movs	r3, #45	; 0x2d
 8009e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e8c:	e7a1      	b.n	8009dd2 <_printf_float+0xa6>
 8009e8e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009e92:	f000 8177 	beq.w	800a184 <_printf_float+0x458>
 8009e96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009e9a:	d1bb      	bne.n	8009e14 <_printf_float+0xe8>
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d1b9      	bne.n	8009e14 <_printf_float+0xe8>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e7b6      	b.n	8009e12 <_printf_float+0xe6>
 8009ea4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009ea8:	d119      	bne.n	8009ede <_printf_float+0x1b2>
 8009eaa:	2900      	cmp	r1, #0
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	dd0c      	ble.n	8009eca <_printf_float+0x19e>
 8009eb0:	6121      	str	r1, [r4, #16]
 8009eb2:	b913      	cbnz	r3, 8009eba <_printf_float+0x18e>
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	07d2      	lsls	r2, r2, #31
 8009eb8:	d502      	bpl.n	8009ec0 <_printf_float+0x194>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	440b      	add	r3, r1
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec2:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ec4:	f04f 0900 	mov.w	r9, #0
 8009ec8:	e7d9      	b.n	8009e7e <_printf_float+0x152>
 8009eca:	b913      	cbnz	r3, 8009ed2 <_printf_float+0x1a6>
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	07d0      	lsls	r0, r2, #31
 8009ed0:	d501      	bpl.n	8009ed6 <_printf_float+0x1aa>
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	e7f3      	b.n	8009ebe <_printf_float+0x192>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e7f1      	b.n	8009ebe <_printf_float+0x192>
 8009eda:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009ede:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	db05      	blt.n	8009ef2 <_printf_float+0x1c6>
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	6123      	str	r3, [r4, #16]
 8009eea:	07d1      	lsls	r1, r2, #31
 8009eec:	d5e8      	bpl.n	8009ec0 <_printf_float+0x194>
 8009eee:	3301      	adds	r3, #1
 8009ef0:	e7e5      	b.n	8009ebe <_printf_float+0x192>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfd4      	ite	le
 8009ef6:	f1c3 0302 	rsble	r3, r3, #2
 8009efa:	2301      	movgt	r3, #1
 8009efc:	4413      	add	r3, r2
 8009efe:	e7de      	b.n	8009ebe <_printf_float+0x192>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	055a      	lsls	r2, r3, #21
 8009f04:	d407      	bmi.n	8009f16 <_printf_float+0x1ea>
 8009f06:	6923      	ldr	r3, [r4, #16]
 8009f08:	4642      	mov	r2, r8
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	d12b      	bne.n	8009f6c <_printf_float+0x240>
 8009f14:	e767      	b.n	8009de6 <_printf_float+0xba>
 8009f16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009f1a:	f240 80dc 	bls.w	800a0d6 <_printf_float+0x3aa>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f26:	f7f6 fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d033      	beq.n	8009f96 <_printf_float+0x26a>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4a41      	ldr	r2, [pc, #260]	; (800a038 <_printf_float+0x30c>)
 8009f32:	4631      	mov	r1, r6
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b8      	blx	r7
 8009f38:	3001      	adds	r0, #1
 8009f3a:	f43f af54 	beq.w	8009de6 <_printf_float+0xba>
 8009f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f42:	429a      	cmp	r2, r3
 8009f44:	db02      	blt.n	8009f4c <_printf_float+0x220>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	07d8      	lsls	r0, r3, #31
 8009f4a:	d50f      	bpl.n	8009f6c <_printf_float+0x240>
 8009f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f50:	4631      	mov	r1, r6
 8009f52:	4628      	mov	r0, r5
 8009f54:	47b8      	blx	r7
 8009f56:	3001      	adds	r0, #1
 8009f58:	f43f af45 	beq.w	8009de6 <_printf_float+0xba>
 8009f5c:	f04f 0800 	mov.w	r8, #0
 8009f60:	f104 091a 	add.w	r9, r4, #26
 8009f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f66:	3b01      	subs	r3, #1
 8009f68:	4543      	cmp	r3, r8
 8009f6a:	dc09      	bgt.n	8009f80 <_printf_float+0x254>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	079b      	lsls	r3, r3, #30
 8009f70:	f100 8103 	bmi.w	800a17a <_printf_float+0x44e>
 8009f74:	68e0      	ldr	r0, [r4, #12]
 8009f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f78:	4298      	cmp	r0, r3
 8009f7a:	bfb8      	it	lt
 8009f7c:	4618      	movlt	r0, r3
 8009f7e:	e734      	b.n	8009dea <_printf_float+0xbe>
 8009f80:	2301      	movs	r3, #1
 8009f82:	464a      	mov	r2, r9
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f af2b 	beq.w	8009de6 <_printf_float+0xba>
 8009f90:	f108 0801 	add.w	r8, r8, #1
 8009f94:	e7e6      	b.n	8009f64 <_printf_float+0x238>
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dc2b      	bgt.n	8009ff4 <_printf_float+0x2c8>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4a26      	ldr	r2, [pc, #152]	; (800a038 <_printf_float+0x30c>)
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b8      	blx	r7
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f43f af1d 	beq.w	8009de6 <_printf_float+0xba>
 8009fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fae:	b923      	cbnz	r3, 8009fba <_printf_float+0x28e>
 8009fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb2:	b913      	cbnz	r3, 8009fba <_printf_float+0x28e>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	07d9      	lsls	r1, r3, #31
 8009fb8:	d5d8      	bpl.n	8009f6c <_printf_float+0x240>
 8009fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	47b8      	blx	r7
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f43f af0e 	beq.w	8009de6 <_printf_float+0xba>
 8009fca:	f04f 0900 	mov.w	r9, #0
 8009fce:	f104 0a1a 	add.w	sl, r4, #26
 8009fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd4:	425b      	negs	r3, r3
 8009fd6:	454b      	cmp	r3, r9
 8009fd8:	dc01      	bgt.n	8009fde <_printf_float+0x2b2>
 8009fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fdc:	e794      	b.n	8009f08 <_printf_float+0x1dc>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b8      	blx	r7
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f43f aefc 	beq.w	8009de6 <_printf_float+0xba>
 8009fee:	f109 0901 	add.w	r9, r9, #1
 8009ff2:	e7ee      	b.n	8009fd2 <_printf_float+0x2a6>
 8009ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	bfa8      	it	ge
 8009ffc:	461a      	movge	r2, r3
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	4691      	mov	r9, r2
 800a002:	dd07      	ble.n	800a014 <_printf_float+0x2e8>
 800a004:	4613      	mov	r3, r2
 800a006:	4631      	mov	r1, r6
 800a008:	4642      	mov	r2, r8
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	f43f aee9 	beq.w	8009de6 <_printf_float+0xba>
 800a014:	f104 031a 	add.w	r3, r4, #26
 800a018:	f04f 0b00 	mov.w	fp, #0
 800a01c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a020:	9306      	str	r3, [sp, #24]
 800a022:	e015      	b.n	800a050 <_printf_float+0x324>
 800a024:	7fefffff 	.word	0x7fefffff
 800a028:	0800c20c 	.word	0x0800c20c
 800a02c:	0800c208 	.word	0x0800c208
 800a030:	0800c214 	.word	0x0800c214
 800a034:	0800c210 	.word	0x0800c210
 800a038:	0800c218 	.word	0x0800c218
 800a03c:	2301      	movs	r3, #1
 800a03e:	9a06      	ldr	r2, [sp, #24]
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	f43f aecd 	beq.w	8009de6 <_printf_float+0xba>
 800a04c:	f10b 0b01 	add.w	fp, fp, #1
 800a050:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a054:	ebaa 0309 	sub.w	r3, sl, r9
 800a058:	455b      	cmp	r3, fp
 800a05a:	dcef      	bgt.n	800a03c <_printf_float+0x310>
 800a05c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a060:	429a      	cmp	r2, r3
 800a062:	44d0      	add	r8, sl
 800a064:	db15      	blt.n	800a092 <_printf_float+0x366>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	07da      	lsls	r2, r3, #31
 800a06a:	d412      	bmi.n	800a092 <_printf_float+0x366>
 800a06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a070:	eba3 020a 	sub.w	r2, r3, sl
 800a074:	eba3 0a01 	sub.w	sl, r3, r1
 800a078:	4592      	cmp	sl, r2
 800a07a:	bfa8      	it	ge
 800a07c:	4692      	movge	sl, r2
 800a07e:	f1ba 0f00 	cmp.w	sl, #0
 800a082:	dc0e      	bgt.n	800a0a2 <_printf_float+0x376>
 800a084:	f04f 0800 	mov.w	r8, #0
 800a088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a08c:	f104 091a 	add.w	r9, r4, #26
 800a090:	e019      	b.n	800a0c6 <_printf_float+0x39a>
 800a092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	d1e5      	bne.n	800a06c <_printf_float+0x340>
 800a0a0:	e6a1      	b.n	8009de6 <_printf_float+0xba>
 800a0a2:	4653      	mov	r3, sl
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d1e9      	bne.n	800a084 <_printf_float+0x358>
 800a0b0:	e699      	b.n	8009de6 <_printf_float+0xba>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	464a      	mov	r2, r9
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	47b8      	blx	r7
 800a0bc:	3001      	adds	r0, #1
 800a0be:	f43f ae92 	beq.w	8009de6 <_printf_float+0xba>
 800a0c2:	f108 0801 	add.w	r8, r8, #1
 800a0c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	eba3 030a 	sub.w	r3, r3, sl
 800a0d0:	4543      	cmp	r3, r8
 800a0d2:	dcee      	bgt.n	800a0b2 <_printf_float+0x386>
 800a0d4:	e74a      	b.n	8009f6c <_printf_float+0x240>
 800a0d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0d8:	2a01      	cmp	r2, #1
 800a0da:	dc01      	bgt.n	800a0e0 <_printf_float+0x3b4>
 800a0dc:	07db      	lsls	r3, r3, #31
 800a0de:	d53a      	bpl.n	800a156 <_printf_float+0x42a>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f ae7b 	beq.w	8009de6 <_printf_float+0xba>
 800a0f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	47b8      	blx	r7
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	f108 0801 	add.w	r8, r8, #1
 800a100:	f43f ae71 	beq.w	8009de6 <_printf_float+0xba>
 800a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a106:	2200      	movs	r2, #0
 800a108:	f103 3aff 	add.w	sl, r3, #4294967295
 800a10c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a110:	2300      	movs	r3, #0
 800a112:	f7f6 fcf9 	bl	8000b08 <__aeabi_dcmpeq>
 800a116:	b9c8      	cbnz	r0, 800a14c <_printf_float+0x420>
 800a118:	4653      	mov	r3, sl
 800a11a:	4642      	mov	r2, r8
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	d10e      	bne.n	800a144 <_printf_float+0x418>
 800a126:	e65e      	b.n	8009de6 <_printf_float+0xba>
 800a128:	2301      	movs	r3, #1
 800a12a:	4652      	mov	r2, sl
 800a12c:	4631      	mov	r1, r6
 800a12e:	4628      	mov	r0, r5
 800a130:	47b8      	blx	r7
 800a132:	3001      	adds	r0, #1
 800a134:	f43f ae57 	beq.w	8009de6 <_printf_float+0xba>
 800a138:	f108 0801 	add.w	r8, r8, #1
 800a13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a13e:	3b01      	subs	r3, #1
 800a140:	4543      	cmp	r3, r8
 800a142:	dcf1      	bgt.n	800a128 <_printf_float+0x3fc>
 800a144:	464b      	mov	r3, r9
 800a146:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a14a:	e6de      	b.n	8009f0a <_printf_float+0x1de>
 800a14c:	f04f 0800 	mov.w	r8, #0
 800a150:	f104 0a1a 	add.w	sl, r4, #26
 800a154:	e7f2      	b.n	800a13c <_printf_float+0x410>
 800a156:	2301      	movs	r3, #1
 800a158:	e7df      	b.n	800a11a <_printf_float+0x3ee>
 800a15a:	2301      	movs	r3, #1
 800a15c:	464a      	mov	r2, r9
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	f43f ae3e 	beq.w	8009de6 <_printf_float+0xba>
 800a16a:	f108 0801 	add.w	r8, r8, #1
 800a16e:	68e3      	ldr	r3, [r4, #12]
 800a170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	4543      	cmp	r3, r8
 800a176:	dcf0      	bgt.n	800a15a <_printf_float+0x42e>
 800a178:	e6fc      	b.n	8009f74 <_printf_float+0x248>
 800a17a:	f04f 0800 	mov.w	r8, #0
 800a17e:	f104 0919 	add.w	r9, r4, #25
 800a182:	e7f4      	b.n	800a16e <_printf_float+0x442>
 800a184:	2900      	cmp	r1, #0
 800a186:	f43f ae8b 	beq.w	8009ea0 <_printf_float+0x174>
 800a18a:	2300      	movs	r3, #0
 800a18c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a190:	ab09      	add	r3, sp, #36	; 0x24
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	ec49 8b10 	vmov	d0, r8, r9
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	f8cd a004 	str.w	sl, [sp, #4]
 800a19e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7ff fd2e 	bl	8009c04 <__cvt>
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	e648      	b.n	8009e3e <_printf_float+0x112>

0800a1ac <_printf_common>:
 800a1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b0:	4691      	mov	r9, r2
 800a1b2:	461f      	mov	r7, r3
 800a1b4:	688a      	ldr	r2, [r1, #8]
 800a1b6:	690b      	ldr	r3, [r1, #16]
 800a1b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	bfb8      	it	lt
 800a1c0:	4613      	movlt	r3, r2
 800a1c2:	f8c9 3000 	str.w	r3, [r9]
 800a1c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	b112      	cbz	r2, 800a1d6 <_printf_common+0x2a>
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	f8c9 3000 	str.w	r3, [r9]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	0699      	lsls	r1, r3, #26
 800a1da:	bf42      	ittt	mi
 800a1dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a1e0:	3302      	addmi	r3, #2
 800a1e2:	f8c9 3000 	strmi.w	r3, [r9]
 800a1e6:	6825      	ldr	r5, [r4, #0]
 800a1e8:	f015 0506 	ands.w	r5, r5, #6
 800a1ec:	d107      	bne.n	800a1fe <_printf_common+0x52>
 800a1ee:	f104 0a19 	add.w	sl, r4, #25
 800a1f2:	68e3      	ldr	r3, [r4, #12]
 800a1f4:	f8d9 2000 	ldr.w	r2, [r9]
 800a1f8:	1a9b      	subs	r3, r3, r2
 800a1fa:	42ab      	cmp	r3, r5
 800a1fc:	dc28      	bgt.n	800a250 <_printf_common+0xa4>
 800a1fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a202:	6822      	ldr	r2, [r4, #0]
 800a204:	3300      	adds	r3, #0
 800a206:	bf18      	it	ne
 800a208:	2301      	movne	r3, #1
 800a20a:	0692      	lsls	r2, r2, #26
 800a20c:	d42d      	bmi.n	800a26a <_printf_common+0xbe>
 800a20e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a212:	4639      	mov	r1, r7
 800a214:	4630      	mov	r0, r6
 800a216:	47c0      	blx	r8
 800a218:	3001      	adds	r0, #1
 800a21a:	d020      	beq.n	800a25e <_printf_common+0xb2>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	68e5      	ldr	r5, [r4, #12]
 800a220:	f8d9 2000 	ldr.w	r2, [r9]
 800a224:	f003 0306 	and.w	r3, r3, #6
 800a228:	2b04      	cmp	r3, #4
 800a22a:	bf08      	it	eq
 800a22c:	1aad      	subeq	r5, r5, r2
 800a22e:	68a3      	ldr	r3, [r4, #8]
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	bf0c      	ite	eq
 800a234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a238:	2500      	movne	r5, #0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bfc4      	itt	gt
 800a23e:	1a9b      	subgt	r3, r3, r2
 800a240:	18ed      	addgt	r5, r5, r3
 800a242:	f04f 0900 	mov.w	r9, #0
 800a246:	341a      	adds	r4, #26
 800a248:	454d      	cmp	r5, r9
 800a24a:	d11a      	bne.n	800a282 <_printf_common+0xd6>
 800a24c:	2000      	movs	r0, #0
 800a24e:	e008      	b.n	800a262 <_printf_common+0xb6>
 800a250:	2301      	movs	r3, #1
 800a252:	4652      	mov	r2, sl
 800a254:	4639      	mov	r1, r7
 800a256:	4630      	mov	r0, r6
 800a258:	47c0      	blx	r8
 800a25a:	3001      	adds	r0, #1
 800a25c:	d103      	bne.n	800a266 <_printf_common+0xba>
 800a25e:	f04f 30ff 	mov.w	r0, #4294967295
 800a262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a266:	3501      	adds	r5, #1
 800a268:	e7c3      	b.n	800a1f2 <_printf_common+0x46>
 800a26a:	18e1      	adds	r1, r4, r3
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	2030      	movs	r0, #48	; 0x30
 800a270:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a274:	4422      	add	r2, r4
 800a276:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a27a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a27e:	3302      	adds	r3, #2
 800a280:	e7c5      	b.n	800a20e <_printf_common+0x62>
 800a282:	2301      	movs	r3, #1
 800a284:	4622      	mov	r2, r4
 800a286:	4639      	mov	r1, r7
 800a288:	4630      	mov	r0, r6
 800a28a:	47c0      	blx	r8
 800a28c:	3001      	adds	r0, #1
 800a28e:	d0e6      	beq.n	800a25e <_printf_common+0xb2>
 800a290:	f109 0901 	add.w	r9, r9, #1
 800a294:	e7d8      	b.n	800a248 <_printf_common+0x9c>
	...

0800a298 <_printf_i>:
 800a298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a29c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	7e09      	ldrb	r1, [r1, #24]
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	296e      	cmp	r1, #110	; 0x6e
 800a2a8:	4617      	mov	r7, r2
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	4698      	mov	r8, r3
 800a2ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2b0:	f000 80b3 	beq.w	800a41a <_printf_i+0x182>
 800a2b4:	d822      	bhi.n	800a2fc <_printf_i+0x64>
 800a2b6:	2963      	cmp	r1, #99	; 0x63
 800a2b8:	d036      	beq.n	800a328 <_printf_i+0x90>
 800a2ba:	d80a      	bhi.n	800a2d2 <_printf_i+0x3a>
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	f000 80b9 	beq.w	800a434 <_printf_i+0x19c>
 800a2c2:	2958      	cmp	r1, #88	; 0x58
 800a2c4:	f000 8083 	beq.w	800a3ce <_printf_i+0x136>
 800a2c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a2d0:	e032      	b.n	800a338 <_printf_i+0xa0>
 800a2d2:	2964      	cmp	r1, #100	; 0x64
 800a2d4:	d001      	beq.n	800a2da <_printf_i+0x42>
 800a2d6:	2969      	cmp	r1, #105	; 0x69
 800a2d8:	d1f6      	bne.n	800a2c8 <_printf_i+0x30>
 800a2da:	6820      	ldr	r0, [r4, #0]
 800a2dc:	6813      	ldr	r3, [r2, #0]
 800a2de:	0605      	lsls	r5, r0, #24
 800a2e0:	f103 0104 	add.w	r1, r3, #4
 800a2e4:	d52a      	bpl.n	800a33c <_printf_i+0xa4>
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6011      	str	r1, [r2, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da03      	bge.n	800a2f6 <_printf_i+0x5e>
 800a2ee:	222d      	movs	r2, #45	; 0x2d
 800a2f0:	425b      	negs	r3, r3
 800a2f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2f6:	486f      	ldr	r0, [pc, #444]	; (800a4b4 <_printf_i+0x21c>)
 800a2f8:	220a      	movs	r2, #10
 800a2fa:	e039      	b.n	800a370 <_printf_i+0xd8>
 800a2fc:	2973      	cmp	r1, #115	; 0x73
 800a2fe:	f000 809d 	beq.w	800a43c <_printf_i+0x1a4>
 800a302:	d808      	bhi.n	800a316 <_printf_i+0x7e>
 800a304:	296f      	cmp	r1, #111	; 0x6f
 800a306:	d020      	beq.n	800a34a <_printf_i+0xb2>
 800a308:	2970      	cmp	r1, #112	; 0x70
 800a30a:	d1dd      	bne.n	800a2c8 <_printf_i+0x30>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	f043 0320 	orr.w	r3, r3, #32
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	e003      	b.n	800a31e <_printf_i+0x86>
 800a316:	2975      	cmp	r1, #117	; 0x75
 800a318:	d017      	beq.n	800a34a <_printf_i+0xb2>
 800a31a:	2978      	cmp	r1, #120	; 0x78
 800a31c:	d1d4      	bne.n	800a2c8 <_printf_i+0x30>
 800a31e:	2378      	movs	r3, #120	; 0x78
 800a320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a324:	4864      	ldr	r0, [pc, #400]	; (800a4b8 <_printf_i+0x220>)
 800a326:	e055      	b.n	800a3d4 <_printf_i+0x13c>
 800a328:	6813      	ldr	r3, [r2, #0]
 800a32a:	1d19      	adds	r1, r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	6011      	str	r1, [r2, #0]
 800a330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a338:	2301      	movs	r3, #1
 800a33a:	e08c      	b.n	800a456 <_printf_i+0x1be>
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6011      	str	r1, [r2, #0]
 800a340:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a344:	bf18      	it	ne
 800a346:	b21b      	sxthne	r3, r3
 800a348:	e7cf      	b.n	800a2ea <_printf_i+0x52>
 800a34a:	6813      	ldr	r3, [r2, #0]
 800a34c:	6825      	ldr	r5, [r4, #0]
 800a34e:	1d18      	adds	r0, r3, #4
 800a350:	6010      	str	r0, [r2, #0]
 800a352:	0628      	lsls	r0, r5, #24
 800a354:	d501      	bpl.n	800a35a <_printf_i+0xc2>
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	e002      	b.n	800a360 <_printf_i+0xc8>
 800a35a:	0668      	lsls	r0, r5, #25
 800a35c:	d5fb      	bpl.n	800a356 <_printf_i+0xbe>
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	4854      	ldr	r0, [pc, #336]	; (800a4b4 <_printf_i+0x21c>)
 800a362:	296f      	cmp	r1, #111	; 0x6f
 800a364:	bf14      	ite	ne
 800a366:	220a      	movne	r2, #10
 800a368:	2208      	moveq	r2, #8
 800a36a:	2100      	movs	r1, #0
 800a36c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a370:	6865      	ldr	r5, [r4, #4]
 800a372:	60a5      	str	r5, [r4, #8]
 800a374:	2d00      	cmp	r5, #0
 800a376:	f2c0 8095 	blt.w	800a4a4 <_printf_i+0x20c>
 800a37a:	6821      	ldr	r1, [r4, #0]
 800a37c:	f021 0104 	bic.w	r1, r1, #4
 800a380:	6021      	str	r1, [r4, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d13d      	bne.n	800a402 <_printf_i+0x16a>
 800a386:	2d00      	cmp	r5, #0
 800a388:	f040 808e 	bne.w	800a4a8 <_printf_i+0x210>
 800a38c:	4665      	mov	r5, ip
 800a38e:	2a08      	cmp	r2, #8
 800a390:	d10b      	bne.n	800a3aa <_printf_i+0x112>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	07db      	lsls	r3, r3, #31
 800a396:	d508      	bpl.n	800a3aa <_printf_i+0x112>
 800a398:	6923      	ldr	r3, [r4, #16]
 800a39a:	6862      	ldr	r2, [r4, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	bfde      	ittt	le
 800a3a0:	2330      	movle	r3, #48	; 0x30
 800a3a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3aa:	ebac 0305 	sub.w	r3, ip, r5
 800a3ae:	6123      	str	r3, [r4, #16]
 800a3b0:	f8cd 8000 	str.w	r8, [sp]
 800a3b4:	463b      	mov	r3, r7
 800a3b6:	aa03      	add	r2, sp, #12
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff fef6 	bl	800a1ac <_printf_common>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d14d      	bne.n	800a460 <_printf_i+0x1c8>
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	b005      	add	sp, #20
 800a3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	4839      	ldr	r0, [pc, #228]	; (800a4b4 <_printf_i+0x21c>)
 800a3d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a3d4:	6813      	ldr	r3, [r2, #0]
 800a3d6:	6821      	ldr	r1, [r4, #0]
 800a3d8:	1d1d      	adds	r5, r3, #4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6015      	str	r5, [r2, #0]
 800a3de:	060a      	lsls	r2, r1, #24
 800a3e0:	d50b      	bpl.n	800a3fa <_printf_i+0x162>
 800a3e2:	07ca      	lsls	r2, r1, #31
 800a3e4:	bf44      	itt	mi
 800a3e6:	f041 0120 	orrmi.w	r1, r1, #32
 800a3ea:	6021      	strmi	r1, [r4, #0]
 800a3ec:	b91b      	cbnz	r3, 800a3f6 <_printf_i+0x15e>
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	f022 0220 	bic.w	r2, r2, #32
 800a3f4:	6022      	str	r2, [r4, #0]
 800a3f6:	2210      	movs	r2, #16
 800a3f8:	e7b7      	b.n	800a36a <_printf_i+0xd2>
 800a3fa:	064d      	lsls	r5, r1, #25
 800a3fc:	bf48      	it	mi
 800a3fe:	b29b      	uxthmi	r3, r3
 800a400:	e7ef      	b.n	800a3e2 <_printf_i+0x14a>
 800a402:	4665      	mov	r5, ip
 800a404:	fbb3 f1f2 	udiv	r1, r3, r2
 800a408:	fb02 3311 	mls	r3, r2, r1, r3
 800a40c:	5cc3      	ldrb	r3, [r0, r3]
 800a40e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a412:	460b      	mov	r3, r1
 800a414:	2900      	cmp	r1, #0
 800a416:	d1f5      	bne.n	800a404 <_printf_i+0x16c>
 800a418:	e7b9      	b.n	800a38e <_printf_i+0xf6>
 800a41a:	6813      	ldr	r3, [r2, #0]
 800a41c:	6825      	ldr	r5, [r4, #0]
 800a41e:	6961      	ldr	r1, [r4, #20]
 800a420:	1d18      	adds	r0, r3, #4
 800a422:	6010      	str	r0, [r2, #0]
 800a424:	0628      	lsls	r0, r5, #24
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	d501      	bpl.n	800a42e <_printf_i+0x196>
 800a42a:	6019      	str	r1, [r3, #0]
 800a42c:	e002      	b.n	800a434 <_printf_i+0x19c>
 800a42e:	066a      	lsls	r2, r5, #25
 800a430:	d5fb      	bpl.n	800a42a <_printf_i+0x192>
 800a432:	8019      	strh	r1, [r3, #0]
 800a434:	2300      	movs	r3, #0
 800a436:	6123      	str	r3, [r4, #16]
 800a438:	4665      	mov	r5, ip
 800a43a:	e7b9      	b.n	800a3b0 <_printf_i+0x118>
 800a43c:	6813      	ldr	r3, [r2, #0]
 800a43e:	1d19      	adds	r1, r3, #4
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	681d      	ldr	r5, [r3, #0]
 800a444:	6862      	ldr	r2, [r4, #4]
 800a446:	2100      	movs	r1, #0
 800a448:	4628      	mov	r0, r5
 800a44a:	f7f5 fee9 	bl	8000220 <memchr>
 800a44e:	b108      	cbz	r0, 800a454 <_printf_i+0x1bc>
 800a450:	1b40      	subs	r0, r0, r5
 800a452:	6060      	str	r0, [r4, #4]
 800a454:	6863      	ldr	r3, [r4, #4]
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	2300      	movs	r3, #0
 800a45a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a45e:	e7a7      	b.n	800a3b0 <_printf_i+0x118>
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	462a      	mov	r2, r5
 800a464:	4639      	mov	r1, r7
 800a466:	4630      	mov	r0, r6
 800a468:	47c0      	blx	r8
 800a46a:	3001      	adds	r0, #1
 800a46c:	d0aa      	beq.n	800a3c4 <_printf_i+0x12c>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	079b      	lsls	r3, r3, #30
 800a472:	d413      	bmi.n	800a49c <_printf_i+0x204>
 800a474:	68e0      	ldr	r0, [r4, #12]
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	4298      	cmp	r0, r3
 800a47a:	bfb8      	it	lt
 800a47c:	4618      	movlt	r0, r3
 800a47e:	e7a3      	b.n	800a3c8 <_printf_i+0x130>
 800a480:	2301      	movs	r3, #1
 800a482:	464a      	mov	r2, r9
 800a484:	4639      	mov	r1, r7
 800a486:	4630      	mov	r0, r6
 800a488:	47c0      	blx	r8
 800a48a:	3001      	adds	r0, #1
 800a48c:	d09a      	beq.n	800a3c4 <_printf_i+0x12c>
 800a48e:	3501      	adds	r5, #1
 800a490:	68e3      	ldr	r3, [r4, #12]
 800a492:	9a03      	ldr	r2, [sp, #12]
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	42ab      	cmp	r3, r5
 800a498:	dcf2      	bgt.n	800a480 <_printf_i+0x1e8>
 800a49a:	e7eb      	b.n	800a474 <_printf_i+0x1dc>
 800a49c:	2500      	movs	r5, #0
 800a49e:	f104 0919 	add.w	r9, r4, #25
 800a4a2:	e7f5      	b.n	800a490 <_printf_i+0x1f8>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1ac      	bne.n	800a402 <_printf_i+0x16a>
 800a4a8:	7803      	ldrb	r3, [r0, #0]
 800a4aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4b2:	e76c      	b.n	800a38e <_printf_i+0xf6>
 800a4b4:	0800c21a 	.word	0x0800c21a
 800a4b8:	0800c22b 	.word	0x0800c22b

0800a4bc <iprintf>:
 800a4bc:	b40f      	push	{r0, r1, r2, r3}
 800a4be:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <iprintf+0x2c>)
 800a4c0:	b513      	push	{r0, r1, r4, lr}
 800a4c2:	681c      	ldr	r4, [r3, #0]
 800a4c4:	b124      	cbz	r4, 800a4d0 <iprintf+0x14>
 800a4c6:	69a3      	ldr	r3, [r4, #24]
 800a4c8:	b913      	cbnz	r3, 800a4d0 <iprintf+0x14>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fee8 	bl	800b2a0 <__sinit>
 800a4d0:	ab05      	add	r3, sp, #20
 800a4d2:	9a04      	ldr	r2, [sp, #16]
 800a4d4:	68a1      	ldr	r1, [r4, #8]
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f001 fa8f 	bl	800b9fc <_vfiprintf_r>
 800a4de:	b002      	add	sp, #8
 800a4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e4:	b004      	add	sp, #16
 800a4e6:	4770      	bx	lr
 800a4e8:	2000000c 	.word	0x2000000c

0800a4ec <_sbrk_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4c06      	ldr	r4, [pc, #24]	; (800a508 <_sbrk_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	6023      	str	r3, [r4, #0]
 800a4f8:	f7fd f848 	bl	800758c <_sbrk>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_sbrk_r+0x1a>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	b103      	cbz	r3, 800a506 <_sbrk_r+0x1a>
 800a504:	602b      	str	r3, [r5, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	200004ec 	.word	0x200004ec

0800a50c <_raise_r>:
 800a50c:	291f      	cmp	r1, #31
 800a50e:	b538      	push	{r3, r4, r5, lr}
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	d904      	bls.n	800a520 <_raise_r+0x14>
 800a516:	2316      	movs	r3, #22
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	f04f 30ff 	mov.w	r0, #4294967295
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a522:	b112      	cbz	r2, 800a52a <_raise_r+0x1e>
 800a524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a528:	b94b      	cbnz	r3, 800a53e <_raise_r+0x32>
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f830 	bl	800a590 <_getpid_r>
 800a530:	462a      	mov	r2, r5
 800a532:	4601      	mov	r1, r0
 800a534:	4620      	mov	r0, r4
 800a536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a53a:	f000 b817 	b.w	800a56c <_kill_r>
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d00a      	beq.n	800a558 <_raise_r+0x4c>
 800a542:	1c59      	adds	r1, r3, #1
 800a544:	d103      	bne.n	800a54e <_raise_r+0x42>
 800a546:	2316      	movs	r3, #22
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	2001      	movs	r0, #1
 800a54c:	e7e7      	b.n	800a51e <_raise_r+0x12>
 800a54e:	2400      	movs	r4, #0
 800a550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a554:	4628      	mov	r0, r5
 800a556:	4798      	blx	r3
 800a558:	2000      	movs	r0, #0
 800a55a:	e7e0      	b.n	800a51e <_raise_r+0x12>

0800a55c <raise>:
 800a55c:	4b02      	ldr	r3, [pc, #8]	; (800a568 <raise+0xc>)
 800a55e:	4601      	mov	r1, r0
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	f7ff bfd3 	b.w	800a50c <_raise_r>
 800a566:	bf00      	nop
 800a568:	2000000c 	.word	0x2000000c

0800a56c <_kill_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4c07      	ldr	r4, [pc, #28]	; (800a58c <_kill_r+0x20>)
 800a570:	2300      	movs	r3, #0
 800a572:	4605      	mov	r5, r0
 800a574:	4608      	mov	r0, r1
 800a576:	4611      	mov	r1, r2
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	f7fc ff9b 	bl	80074b4 <_kill>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	d102      	bne.n	800a588 <_kill_r+0x1c>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	b103      	cbz	r3, 800a588 <_kill_r+0x1c>
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	bd38      	pop	{r3, r4, r5, pc}
 800a58a:	bf00      	nop
 800a58c:	200004ec 	.word	0x200004ec

0800a590 <_getpid_r>:
 800a590:	f7fc bf88 	b.w	80074a4 <_getpid>

0800a594 <quorem>:
 800a594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	6903      	ldr	r3, [r0, #16]
 800a59a:	690c      	ldr	r4, [r1, #16]
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	4680      	mov	r8, r0
 800a5a0:	f2c0 8082 	blt.w	800a6a8 <quorem+0x114>
 800a5a4:	3c01      	subs	r4, #1
 800a5a6:	f101 0714 	add.w	r7, r1, #20
 800a5aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a5ae:	f100 0614 	add.w	r6, r0, #20
 800a5b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a5b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a5ba:	eb06 030c 	add.w	r3, r6, ip
 800a5be:	3501      	adds	r5, #1
 800a5c0:	eb07 090c 	add.w	r9, r7, ip
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	fbb0 f5f5 	udiv	r5, r0, r5
 800a5ca:	b395      	cbz	r5, 800a632 <quorem+0x9e>
 800a5cc:	f04f 0a00 	mov.w	sl, #0
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	46b6      	mov	lr, r6
 800a5d4:	46d3      	mov	fp, sl
 800a5d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5da:	b293      	uxth	r3, r2
 800a5dc:	fb05 a303 	mla	r3, r5, r3, sl
 800a5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	ebab 0303 	sub.w	r3, fp, r3
 800a5ea:	0c12      	lsrs	r2, r2, #16
 800a5ec:	f8de b000 	ldr.w	fp, [lr]
 800a5f0:	fb05 a202 	mla	r2, r5, r2, sl
 800a5f4:	fa13 f38b 	uxtah	r3, r3, fp
 800a5f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a5fc:	fa1f fb82 	uxth.w	fp, r2
 800a600:	f8de 2000 	ldr.w	r2, [lr]
 800a604:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a612:	4581      	cmp	r9, r0
 800a614:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a618:	f84e 3b04 	str.w	r3, [lr], #4
 800a61c:	d2db      	bcs.n	800a5d6 <quorem+0x42>
 800a61e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a622:	b933      	cbnz	r3, 800a632 <quorem+0x9e>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	3b04      	subs	r3, #4
 800a628:	429e      	cmp	r6, r3
 800a62a:	461a      	mov	r2, r3
 800a62c:	d330      	bcc.n	800a690 <quorem+0xfc>
 800a62e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a632:	4640      	mov	r0, r8
 800a634:	f001 f8e4 	bl	800b800 <__mcmp>
 800a638:	2800      	cmp	r0, #0
 800a63a:	db25      	blt.n	800a688 <quorem+0xf4>
 800a63c:	3501      	adds	r5, #1
 800a63e:	4630      	mov	r0, r6
 800a640:	f04f 0c00 	mov.w	ip, #0
 800a644:	f857 2b04 	ldr.w	r2, [r7], #4
 800a648:	f8d0 e000 	ldr.w	lr, [r0]
 800a64c:	b293      	uxth	r3, r2
 800a64e:	ebac 0303 	sub.w	r3, ip, r3
 800a652:	0c12      	lsrs	r2, r2, #16
 800a654:	fa13 f38e 	uxtah	r3, r3, lr
 800a658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a660:	b29b      	uxth	r3, r3
 800a662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a666:	45b9      	cmp	r9, r7
 800a668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a66c:	f840 3b04 	str.w	r3, [r0], #4
 800a670:	d2e8      	bcs.n	800a644 <quorem+0xb0>
 800a672:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a676:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a67a:	b92a      	cbnz	r2, 800a688 <quorem+0xf4>
 800a67c:	3b04      	subs	r3, #4
 800a67e:	429e      	cmp	r6, r3
 800a680:	461a      	mov	r2, r3
 800a682:	d30b      	bcc.n	800a69c <quorem+0x108>
 800a684:	f8c8 4010 	str.w	r4, [r8, #16]
 800a688:	4628      	mov	r0, r5
 800a68a:	b003      	add	sp, #12
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	3b04      	subs	r3, #4
 800a694:	2a00      	cmp	r2, #0
 800a696:	d1ca      	bne.n	800a62e <quorem+0x9a>
 800a698:	3c01      	subs	r4, #1
 800a69a:	e7c5      	b.n	800a628 <quorem+0x94>
 800a69c:	6812      	ldr	r2, [r2, #0]
 800a69e:	3b04      	subs	r3, #4
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	d1ef      	bne.n	800a684 <quorem+0xf0>
 800a6a4:	3c01      	subs	r4, #1
 800a6a6:	e7ea      	b.n	800a67e <quorem+0xea>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e7ee      	b.n	800a68a <quorem+0xf6>
 800a6ac:	0000      	movs	r0, r0
	...

0800a6b0 <_dtoa_r>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	ec57 6b10 	vmov	r6, r7, d0
 800a6b8:	b097      	sub	sp, #92	; 0x5c
 800a6ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6bc:	9106      	str	r1, [sp, #24]
 800a6be:	4604      	mov	r4, r0
 800a6c0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6c2:	9312      	str	r3, [sp, #72]	; 0x48
 800a6c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6c8:	e9cd 6700 	strd	r6, r7, [sp]
 800a6cc:	b93d      	cbnz	r5, 800a6de <_dtoa_r+0x2e>
 800a6ce:	2010      	movs	r0, #16
 800a6d0:	f7ff f9b4 	bl	8009a3c <malloc>
 800a6d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6da:	6005      	str	r5, [r0, #0]
 800a6dc:	60c5      	str	r5, [r0, #12]
 800a6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6e0:	6819      	ldr	r1, [r3, #0]
 800a6e2:	b151      	cbz	r1, 800a6fa <_dtoa_r+0x4a>
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	604a      	str	r2, [r1, #4]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4093      	lsls	r3, r2
 800a6ec:	608b      	str	r3, [r1, #8]
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fea4 	bl	800b43c <_Bfree>
 800a6f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	1e3b      	subs	r3, r7, #0
 800a6fc:	bfbb      	ittet	lt
 800a6fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a702:	9301      	strlt	r3, [sp, #4]
 800a704:	2300      	movge	r3, #0
 800a706:	2201      	movlt	r2, #1
 800a708:	bfac      	ite	ge
 800a70a:	f8c8 3000 	strge.w	r3, [r8]
 800a70e:	f8c8 2000 	strlt.w	r2, [r8]
 800a712:	4baf      	ldr	r3, [pc, #700]	; (800a9d0 <_dtoa_r+0x320>)
 800a714:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a718:	ea33 0308 	bics.w	r3, r3, r8
 800a71c:	d114      	bne.n	800a748 <_dtoa_r+0x98>
 800a71e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a720:	f242 730f 	movw	r3, #9999	; 0x270f
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	b923      	cbnz	r3, 800a734 <_dtoa_r+0x84>
 800a72a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a72e:	2800      	cmp	r0, #0
 800a730:	f000 8542 	beq.w	800b1b8 <_dtoa_r+0xb08>
 800a734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a736:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a9e4 <_dtoa_r+0x334>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8544 	beq.w	800b1c8 <_dtoa_r+0xb18>
 800a740:	f10b 0303 	add.w	r3, fp, #3
 800a744:	f000 bd3e 	b.w	800b1c4 <_dtoa_r+0xb14>
 800a748:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f6 f9d8 	bl	8000b08 <__aeabi_dcmpeq>
 800a758:	4681      	mov	r9, r0
 800a75a:	b168      	cbz	r0, 800a778 <_dtoa_r+0xc8>
 800a75c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a75e:	2301      	movs	r3, #1
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8524 	beq.w	800b1b2 <_dtoa_r+0xb02>
 800a76a:	4b9a      	ldr	r3, [pc, #616]	; (800a9d4 <_dtoa_r+0x324>)
 800a76c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a76e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	f000 bd28 	b.w	800b1c8 <_dtoa_r+0xb18>
 800a778:	aa14      	add	r2, sp, #80	; 0x50
 800a77a:	a915      	add	r1, sp, #84	; 0x54
 800a77c:	ec47 6b10 	vmov	d0, r6, r7
 800a780:	4620      	mov	r0, r4
 800a782:	f001 f8b4 	bl	800b8ee <__d2b>
 800a786:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a78a:	9004      	str	r0, [sp, #16]
 800a78c:	2d00      	cmp	r5, #0
 800a78e:	d07c      	beq.n	800a88a <_dtoa_r+0x1da>
 800a790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a794:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a798:	46b2      	mov	sl, r6
 800a79a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a79e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4b8b      	ldr	r3, [pc, #556]	; (800a9d8 <_dtoa_r+0x328>)
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	f7f5 fd8b 	bl	80002c8 <__aeabi_dsub>
 800a7b2:	a381      	add	r3, pc, #516	; (adr r3, 800a9b8 <_dtoa_r+0x308>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f7f5 ff3e 	bl	8000638 <__aeabi_dmul>
 800a7bc:	a380      	add	r3, pc, #512	; (adr r3, 800a9c0 <_dtoa_r+0x310>)
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	f7f5 fd83 	bl	80002cc <__adddf3>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	460f      	mov	r7, r1
 800a7cc:	f7f5 feca 	bl	8000564 <__aeabi_i2d>
 800a7d0:	a37d      	add	r3, pc, #500	; (adr r3, 800a9c8 <_dtoa_r+0x318>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f5 ff2f 	bl	8000638 <__aeabi_dmul>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f5 fd73 	bl	80002cc <__adddf3>
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	f7f6 f9d5 	bl	8000b98 <__aeabi_d2iz>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4682      	mov	sl, r0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	f7f6 f990 	bl	8000b1c <__aeabi_dcmplt>
 800a7fc:	b148      	cbz	r0, 800a812 <_dtoa_r+0x162>
 800a7fe:	4650      	mov	r0, sl
 800a800:	f7f5 feb0 	bl	8000564 <__aeabi_i2d>
 800a804:	4632      	mov	r2, r6
 800a806:	463b      	mov	r3, r7
 800a808:	f7f6 f97e 	bl	8000b08 <__aeabi_dcmpeq>
 800a80c:	b908      	cbnz	r0, 800a812 <_dtoa_r+0x162>
 800a80e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a812:	f1ba 0f16 	cmp.w	sl, #22
 800a816:	d859      	bhi.n	800a8cc <_dtoa_r+0x21c>
 800a818:	4970      	ldr	r1, [pc, #448]	; (800a9dc <_dtoa_r+0x32c>)
 800a81a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a822:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a826:	f7f6 f997 	bl	8000b58 <__aeabi_dcmpgt>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d050      	beq.n	800a8d0 <_dtoa_r+0x220>
 800a82e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a832:	2300      	movs	r3, #0
 800a834:	930f      	str	r3, [sp, #60]	; 0x3c
 800a836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a838:	1b5d      	subs	r5, r3, r5
 800a83a:	f1b5 0801 	subs.w	r8, r5, #1
 800a83e:	bf49      	itett	mi
 800a840:	f1c5 0301 	rsbmi	r3, r5, #1
 800a844:	2300      	movpl	r3, #0
 800a846:	9305      	strmi	r3, [sp, #20]
 800a848:	f04f 0800 	movmi.w	r8, #0
 800a84c:	bf58      	it	pl
 800a84e:	9305      	strpl	r3, [sp, #20]
 800a850:	f1ba 0f00 	cmp.w	sl, #0
 800a854:	db3e      	blt.n	800a8d4 <_dtoa_r+0x224>
 800a856:	2300      	movs	r3, #0
 800a858:	44d0      	add	r8, sl
 800a85a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a85e:	9307      	str	r3, [sp, #28]
 800a860:	9b06      	ldr	r3, [sp, #24]
 800a862:	2b09      	cmp	r3, #9
 800a864:	f200 8090 	bhi.w	800a988 <_dtoa_r+0x2d8>
 800a868:	2b05      	cmp	r3, #5
 800a86a:	bfc4      	itt	gt
 800a86c:	3b04      	subgt	r3, #4
 800a86e:	9306      	strgt	r3, [sp, #24]
 800a870:	9b06      	ldr	r3, [sp, #24]
 800a872:	f1a3 0302 	sub.w	r3, r3, #2
 800a876:	bfcc      	ite	gt
 800a878:	2500      	movgt	r5, #0
 800a87a:	2501      	movle	r5, #1
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	f200 808f 	bhi.w	800a9a0 <_dtoa_r+0x2f0>
 800a882:	e8df f003 	tbb	[pc, r3]
 800a886:	7f7d      	.short	0x7f7d
 800a888:	7131      	.short	0x7131
 800a88a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a88e:	441d      	add	r5, r3
 800a890:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a894:	2820      	cmp	r0, #32
 800a896:	dd13      	ble.n	800a8c0 <_dtoa_r+0x210>
 800a898:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a89c:	9b00      	ldr	r3, [sp, #0]
 800a89e:	fa08 f800 	lsl.w	r8, r8, r0
 800a8a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a8a6:	fa23 f000 	lsr.w	r0, r3, r0
 800a8aa:	ea48 0000 	orr.w	r0, r8, r0
 800a8ae:	f7f5 fe49 	bl	8000544 <__aeabi_ui2d>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a8ba:	3d01      	subs	r5, #1
 800a8bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8be:	e772      	b.n	800a7a6 <_dtoa_r+0xf6>
 800a8c0:	9b00      	ldr	r3, [sp, #0]
 800a8c2:	f1c0 0020 	rsb	r0, r0, #32
 800a8c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ca:	e7f0      	b.n	800a8ae <_dtoa_r+0x1fe>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e7b1      	b.n	800a834 <_dtoa_r+0x184>
 800a8d0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a8d2:	e7b0      	b.n	800a836 <_dtoa_r+0x186>
 800a8d4:	9b05      	ldr	r3, [sp, #20]
 800a8d6:	eba3 030a 	sub.w	r3, r3, sl
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	f1ca 0300 	rsb	r3, sl, #0
 800a8e0:	9307      	str	r3, [sp, #28]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a8e6:	e7bb      	b.n	800a860 <_dtoa_r+0x1b0>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dd59      	ble.n	800a9a6 <_dtoa_r+0x2f6>
 800a8f2:	9302      	str	r3, [sp, #8]
 800a8f4:	4699      	mov	r9, r3
 800a8f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	6072      	str	r2, [r6, #4]
 800a8fc:	2204      	movs	r2, #4
 800a8fe:	f102 0014 	add.w	r0, r2, #20
 800a902:	4298      	cmp	r0, r3
 800a904:	6871      	ldr	r1, [r6, #4]
 800a906:	d953      	bls.n	800a9b0 <_dtoa_r+0x300>
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fd63 	bl	800b3d4 <_Balloc>
 800a90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a910:	6030      	str	r0, [r6, #0]
 800a912:	f1b9 0f0e 	cmp.w	r9, #14
 800a916:	f8d3 b000 	ldr.w	fp, [r3]
 800a91a:	f200 80e6 	bhi.w	800aaea <_dtoa_r+0x43a>
 800a91e:	2d00      	cmp	r5, #0
 800a920:	f000 80e3 	beq.w	800aaea <_dtoa_r+0x43a>
 800a924:	ed9d 7b00 	vldr	d7, [sp]
 800a928:	f1ba 0f00 	cmp.w	sl, #0
 800a92c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a930:	dd74      	ble.n	800aa1c <_dtoa_r+0x36c>
 800a932:	4a2a      	ldr	r2, [pc, #168]	; (800a9dc <_dtoa_r+0x32c>)
 800a934:	f00a 030f 	and.w	r3, sl, #15
 800a938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a93c:	ed93 7b00 	vldr	d7, [r3]
 800a940:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a944:	06f0      	lsls	r0, r6, #27
 800a946:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a94a:	d565      	bpl.n	800aa18 <_dtoa_r+0x368>
 800a94c:	4b24      	ldr	r3, [pc, #144]	; (800a9e0 <_dtoa_r+0x330>)
 800a94e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a956:	f7f5 ff99 	bl	800088c <__aeabi_ddiv>
 800a95a:	e9cd 0100 	strd	r0, r1, [sp]
 800a95e:	f006 060f 	and.w	r6, r6, #15
 800a962:	2503      	movs	r5, #3
 800a964:	4f1e      	ldr	r7, [pc, #120]	; (800a9e0 <_dtoa_r+0x330>)
 800a966:	e04c      	b.n	800aa02 <_dtoa_r+0x352>
 800a968:	2301      	movs	r3, #1
 800a96a:	930a      	str	r3, [sp, #40]	; 0x28
 800a96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96e:	4453      	add	r3, sl
 800a970:	f103 0901 	add.w	r9, r3, #1
 800a974:	9302      	str	r3, [sp, #8]
 800a976:	464b      	mov	r3, r9
 800a978:	2b01      	cmp	r3, #1
 800a97a:	bfb8      	it	lt
 800a97c:	2301      	movlt	r3, #1
 800a97e:	e7ba      	b.n	800a8f6 <_dtoa_r+0x246>
 800a980:	2300      	movs	r3, #0
 800a982:	e7b2      	b.n	800a8ea <_dtoa_r+0x23a>
 800a984:	2300      	movs	r3, #0
 800a986:	e7f0      	b.n	800a96a <_dtoa_r+0x2ba>
 800a988:	2501      	movs	r5, #1
 800a98a:	2300      	movs	r3, #0
 800a98c:	9306      	str	r3, [sp, #24]
 800a98e:	950a      	str	r5, [sp, #40]	; 0x28
 800a990:	f04f 33ff 	mov.w	r3, #4294967295
 800a994:	9302      	str	r3, [sp, #8]
 800a996:	4699      	mov	r9, r3
 800a998:	2200      	movs	r2, #0
 800a99a:	2312      	movs	r3, #18
 800a99c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a99e:	e7aa      	b.n	800a8f6 <_dtoa_r+0x246>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a4:	e7f4      	b.n	800a990 <_dtoa_r+0x2e0>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	4699      	mov	r9, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	e7f5      	b.n	800a99c <_dtoa_r+0x2ec>
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	6071      	str	r1, [r6, #4]
 800a9b4:	0052      	lsls	r2, r2, #1
 800a9b6:	e7a2      	b.n	800a8fe <_dtoa_r+0x24e>
 800a9b8:	636f4361 	.word	0x636f4361
 800a9bc:	3fd287a7 	.word	0x3fd287a7
 800a9c0:	8b60c8b3 	.word	0x8b60c8b3
 800a9c4:	3fc68a28 	.word	0x3fc68a28
 800a9c8:	509f79fb 	.word	0x509f79fb
 800a9cc:	3fd34413 	.word	0x3fd34413
 800a9d0:	7ff00000 	.word	0x7ff00000
 800a9d4:	0800c219 	.word	0x0800c219
 800a9d8:	3ff80000 	.word	0x3ff80000
 800a9dc:	0800c2d8 	.word	0x0800c2d8
 800a9e0:	0800c2b0 	.word	0x0800c2b0
 800a9e4:	0800c245 	.word	0x0800c245
 800a9e8:	07f1      	lsls	r1, r6, #31
 800a9ea:	d508      	bpl.n	800a9fe <_dtoa_r+0x34e>
 800a9ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f4:	f7f5 fe20 	bl	8000638 <__aeabi_dmul>
 800a9f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	1076      	asrs	r6, r6, #1
 800aa00:	3708      	adds	r7, #8
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	d1f0      	bne.n	800a9e8 <_dtoa_r+0x338>
 800aa06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa0e:	f7f5 ff3d 	bl	800088c <__aeabi_ddiv>
 800aa12:	e9cd 0100 	strd	r0, r1, [sp]
 800aa16:	e01a      	b.n	800aa4e <_dtoa_r+0x39e>
 800aa18:	2502      	movs	r5, #2
 800aa1a:	e7a3      	b.n	800a964 <_dtoa_r+0x2b4>
 800aa1c:	f000 80a0 	beq.w	800ab60 <_dtoa_r+0x4b0>
 800aa20:	f1ca 0600 	rsb	r6, sl, #0
 800aa24:	4b9f      	ldr	r3, [pc, #636]	; (800aca4 <_dtoa_r+0x5f4>)
 800aa26:	4fa0      	ldr	r7, [pc, #640]	; (800aca8 <_dtoa_r+0x5f8>)
 800aa28:	f006 020f 	and.w	r2, r6, #15
 800aa2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa38:	f7f5 fdfe 	bl	8000638 <__aeabi_dmul>
 800aa3c:	e9cd 0100 	strd	r0, r1, [sp]
 800aa40:	1136      	asrs	r6, r6, #4
 800aa42:	2300      	movs	r3, #0
 800aa44:	2502      	movs	r5, #2
 800aa46:	2e00      	cmp	r6, #0
 800aa48:	d17f      	bne.n	800ab4a <_dtoa_r+0x49a>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e1      	bne.n	800aa12 <_dtoa_r+0x362>
 800aa4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 8087 	beq.w	800ab64 <_dtoa_r+0x4b4>
 800aa56:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4b93      	ldr	r3, [pc, #588]	; (800acac <_dtoa_r+0x5fc>)
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f6 f85b 	bl	8000b1c <__aeabi_dcmplt>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d07c      	beq.n	800ab64 <_dtoa_r+0x4b4>
 800aa6a:	f1b9 0f00 	cmp.w	r9, #0
 800aa6e:	d079      	beq.n	800ab64 <_dtoa_r+0x4b4>
 800aa70:	9b02      	ldr	r3, [sp, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd35      	ble.n	800aae2 <_dtoa_r+0x432>
 800aa76:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aa7a:	9308      	str	r3, [sp, #32]
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4b8b      	ldr	r3, [pc, #556]	; (800acb0 <_dtoa_r+0x600>)
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7f5 fdd8 	bl	8000638 <__aeabi_dmul>
 800aa88:	e9cd 0100 	strd	r0, r1, [sp]
 800aa8c:	9f02      	ldr	r7, [sp, #8]
 800aa8e:	3501      	adds	r5, #1
 800aa90:	4628      	mov	r0, r5
 800aa92:	f7f5 fd67 	bl	8000564 <__aeabi_i2d>
 800aa96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa9a:	f7f5 fdcd 	bl	8000638 <__aeabi_dmul>
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	4b84      	ldr	r3, [pc, #528]	; (800acb4 <_dtoa_r+0x604>)
 800aaa2:	f7f5 fc13 	bl	80002cc <__adddf3>
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aaac:	2f00      	cmp	r7, #0
 800aaae:	d15d      	bne.n	800ab6c <_dtoa_r+0x4bc>
 800aab0:	2200      	movs	r2, #0
 800aab2:	4b81      	ldr	r3, [pc, #516]	; (800acb8 <_dtoa_r+0x608>)
 800aab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aab8:	f7f5 fc06 	bl	80002c8 <__aeabi_dsub>
 800aabc:	462a      	mov	r2, r5
 800aabe:	4633      	mov	r3, r6
 800aac0:	e9cd 0100 	strd	r0, r1, [sp]
 800aac4:	f7f6 f848 	bl	8000b58 <__aeabi_dcmpgt>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f040 8288 	bne.w	800afde <_dtoa_r+0x92e>
 800aace:	462a      	mov	r2, r5
 800aad0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aad8:	f7f6 f820 	bl	8000b1c <__aeabi_dcmplt>
 800aadc:	2800      	cmp	r0, #0
 800aade:	f040 827c 	bne.w	800afda <_dtoa_r+0x92a>
 800aae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aae6:	e9cd 2300 	strd	r2, r3, [sp]
 800aaea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f2c0 8150 	blt.w	800ad92 <_dtoa_r+0x6e2>
 800aaf2:	f1ba 0f0e 	cmp.w	sl, #14
 800aaf6:	f300 814c 	bgt.w	800ad92 <_dtoa_r+0x6e2>
 800aafa:	4b6a      	ldr	r3, [pc, #424]	; (800aca4 <_dtoa_r+0x5f4>)
 800aafc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab00:	ed93 7b00 	vldr	d7, [r3]
 800ab04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab0c:	f280 80d8 	bge.w	800acc0 <_dtoa_r+0x610>
 800ab10:	f1b9 0f00 	cmp.w	r9, #0
 800ab14:	f300 80d4 	bgt.w	800acc0 <_dtoa_r+0x610>
 800ab18:	f040 825e 	bne.w	800afd8 <_dtoa_r+0x928>
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4b66      	ldr	r3, [pc, #408]	; (800acb8 <_dtoa_r+0x608>)
 800ab20:	ec51 0b17 	vmov	r0, r1, d7
 800ab24:	f7f5 fd88 	bl	8000638 <__aeabi_dmul>
 800ab28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab2c:	f7f6 f80a 	bl	8000b44 <__aeabi_dcmpge>
 800ab30:	464f      	mov	r7, r9
 800ab32:	464e      	mov	r6, r9
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f040 8234 	bne.w	800afa2 <_dtoa_r+0x8f2>
 800ab3a:	2331      	movs	r3, #49	; 0x31
 800ab3c:	f10b 0501 	add.w	r5, fp, #1
 800ab40:	f88b 3000 	strb.w	r3, [fp]
 800ab44:	f10a 0a01 	add.w	sl, sl, #1
 800ab48:	e22f      	b.n	800afaa <_dtoa_r+0x8fa>
 800ab4a:	07f2      	lsls	r2, r6, #31
 800ab4c:	d505      	bpl.n	800ab5a <_dtoa_r+0x4aa>
 800ab4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab52:	f7f5 fd71 	bl	8000638 <__aeabi_dmul>
 800ab56:	3501      	adds	r5, #1
 800ab58:	2301      	movs	r3, #1
 800ab5a:	1076      	asrs	r6, r6, #1
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	e772      	b.n	800aa46 <_dtoa_r+0x396>
 800ab60:	2502      	movs	r5, #2
 800ab62:	e774      	b.n	800aa4e <_dtoa_r+0x39e>
 800ab64:	f8cd a020 	str.w	sl, [sp, #32]
 800ab68:	464f      	mov	r7, r9
 800ab6a:	e791      	b.n	800aa90 <_dtoa_r+0x3e0>
 800ab6c:	4b4d      	ldr	r3, [pc, #308]	; (800aca4 <_dtoa_r+0x5f4>)
 800ab6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ab76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d047      	beq.n	800ac0c <_dtoa_r+0x55c>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	2000      	movs	r0, #0
 800ab82:	494e      	ldr	r1, [pc, #312]	; (800acbc <_dtoa_r+0x60c>)
 800ab84:	f7f5 fe82 	bl	800088c <__aeabi_ddiv>
 800ab88:	462a      	mov	r2, r5
 800ab8a:	4633      	mov	r3, r6
 800ab8c:	f7f5 fb9c 	bl	80002c8 <__aeabi_dsub>
 800ab90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ab94:	465d      	mov	r5, fp
 800ab96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab9a:	f7f5 fffd 	bl	8000b98 <__aeabi_d2iz>
 800ab9e:	4606      	mov	r6, r0
 800aba0:	f7f5 fce0 	bl	8000564 <__aeabi_i2d>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abac:	f7f5 fb8c 	bl	80002c8 <__aeabi_dsub>
 800abb0:	3630      	adds	r6, #48	; 0x30
 800abb2:	f805 6b01 	strb.w	r6, [r5], #1
 800abb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800abba:	e9cd 0100 	strd	r0, r1, [sp]
 800abbe:	f7f5 ffad 	bl	8000b1c <__aeabi_dcmplt>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d163      	bne.n	800ac8e <_dtoa_r+0x5de>
 800abc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abca:	2000      	movs	r0, #0
 800abcc:	4937      	ldr	r1, [pc, #220]	; (800acac <_dtoa_r+0x5fc>)
 800abce:	f7f5 fb7b 	bl	80002c8 <__aeabi_dsub>
 800abd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800abd6:	f7f5 ffa1 	bl	8000b1c <__aeabi_dcmplt>
 800abda:	2800      	cmp	r0, #0
 800abdc:	f040 80b7 	bne.w	800ad4e <_dtoa_r+0x69e>
 800abe0:	eba5 030b 	sub.w	r3, r5, fp
 800abe4:	429f      	cmp	r7, r3
 800abe6:	f77f af7c 	ble.w	800aae2 <_dtoa_r+0x432>
 800abea:	2200      	movs	r2, #0
 800abec:	4b30      	ldr	r3, [pc, #192]	; (800acb0 <_dtoa_r+0x600>)
 800abee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abf2:	f7f5 fd21 	bl	8000638 <__aeabi_dmul>
 800abf6:	2200      	movs	r2, #0
 800abf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800abfc:	4b2c      	ldr	r3, [pc, #176]	; (800acb0 <_dtoa_r+0x600>)
 800abfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac02:	f7f5 fd19 	bl	8000638 <__aeabi_dmul>
 800ac06:	e9cd 0100 	strd	r0, r1, [sp]
 800ac0a:	e7c4      	b.n	800ab96 <_dtoa_r+0x4e6>
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4633      	mov	r3, r6
 800ac10:	f7f5 fd12 	bl	8000638 <__aeabi_dmul>
 800ac14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac18:	eb0b 0507 	add.w	r5, fp, r7
 800ac1c:	465e      	mov	r6, fp
 800ac1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac22:	f7f5 ffb9 	bl	8000b98 <__aeabi_d2iz>
 800ac26:	4607      	mov	r7, r0
 800ac28:	f7f5 fc9c 	bl	8000564 <__aeabi_i2d>
 800ac2c:	3730      	adds	r7, #48	; 0x30
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac36:	f7f5 fb47 	bl	80002c8 <__aeabi_dsub>
 800ac3a:	f806 7b01 	strb.w	r7, [r6], #1
 800ac3e:	42ae      	cmp	r6, r5
 800ac40:	e9cd 0100 	strd	r0, r1, [sp]
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	d126      	bne.n	800ac98 <_dtoa_r+0x5e8>
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	; (800acbc <_dtoa_r+0x60c>)
 800ac4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac50:	f7f5 fb3c 	bl	80002cc <__adddf3>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac5c:	f7f5 ff7c 	bl	8000b58 <__aeabi_dcmpgt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d174      	bne.n	800ad4e <_dtoa_r+0x69e>
 800ac64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac68:	2000      	movs	r0, #0
 800ac6a:	4914      	ldr	r1, [pc, #80]	; (800acbc <_dtoa_r+0x60c>)
 800ac6c:	f7f5 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac78:	f7f5 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f af30 	beq.w	800aae2 <_dtoa_r+0x432>
 800ac82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac86:	2b30      	cmp	r3, #48	; 0x30
 800ac88:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac8c:	d002      	beq.n	800ac94 <_dtoa_r+0x5e4>
 800ac8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ac92:	e04a      	b.n	800ad2a <_dtoa_r+0x67a>
 800ac94:	4615      	mov	r5, r2
 800ac96:	e7f4      	b.n	800ac82 <_dtoa_r+0x5d2>
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <_dtoa_r+0x600>)
 800ac9a:	f7f5 fccd 	bl	8000638 <__aeabi_dmul>
 800ac9e:	e9cd 0100 	strd	r0, r1, [sp]
 800aca2:	e7bc      	b.n	800ac1e <_dtoa_r+0x56e>
 800aca4:	0800c2d8 	.word	0x0800c2d8
 800aca8:	0800c2b0 	.word	0x0800c2b0
 800acac:	3ff00000 	.word	0x3ff00000
 800acb0:	40240000 	.word	0x40240000
 800acb4:	401c0000 	.word	0x401c0000
 800acb8:	40140000 	.word	0x40140000
 800acbc:	3fe00000 	.word	0x3fe00000
 800acc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800acc4:	465d      	mov	r5, fp
 800acc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 fddd 	bl	800088c <__aeabi_ddiv>
 800acd2:	f7f5 ff61 	bl	8000b98 <__aeabi_d2iz>
 800acd6:	4680      	mov	r8, r0
 800acd8:	f7f5 fc44 	bl	8000564 <__aeabi_i2d>
 800acdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ace0:	f7f5 fcaa 	bl	8000638 <__aeabi_dmul>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4630      	mov	r0, r6
 800acea:	4639      	mov	r1, r7
 800acec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800acf0:	f7f5 faea 	bl	80002c8 <__aeabi_dsub>
 800acf4:	f805 6b01 	strb.w	r6, [r5], #1
 800acf8:	eba5 060b 	sub.w	r6, r5, fp
 800acfc:	45b1      	cmp	r9, r6
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	d139      	bne.n	800ad78 <_dtoa_r+0x6c8>
 800ad04:	f7f5 fae2 	bl	80002cc <__adddf3>
 800ad08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460f      	mov	r7, r1
 800ad10:	f7f5 ff22 	bl	8000b58 <__aeabi_dcmpgt>
 800ad14:	b9c8      	cbnz	r0, 800ad4a <_dtoa_r+0x69a>
 800ad16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f7f5 fef3 	bl	8000b08 <__aeabi_dcmpeq>
 800ad22:	b110      	cbz	r0, 800ad2a <_dtoa_r+0x67a>
 800ad24:	f018 0f01 	tst.w	r8, #1
 800ad28:	d10f      	bne.n	800ad4a <_dtoa_r+0x69a>
 800ad2a:	9904      	ldr	r1, [sp, #16]
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 fb85 	bl	800b43c <_Bfree>
 800ad32:	2300      	movs	r3, #0
 800ad34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad36:	702b      	strb	r3, [r5, #0]
 800ad38:	f10a 0301 	add.w	r3, sl, #1
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 8241 	beq.w	800b1c8 <_dtoa_r+0xb18>
 800ad46:	601d      	str	r5, [r3, #0]
 800ad48:	e23e      	b.n	800b1c8 <_dtoa_r+0xb18>
 800ad4a:	f8cd a020 	str.w	sl, [sp, #32]
 800ad4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad52:	2a39      	cmp	r2, #57	; 0x39
 800ad54:	f105 33ff 	add.w	r3, r5, #4294967295
 800ad58:	d108      	bne.n	800ad6c <_dtoa_r+0x6bc>
 800ad5a:	459b      	cmp	fp, r3
 800ad5c:	d10a      	bne.n	800ad74 <_dtoa_r+0x6c4>
 800ad5e:	9b08      	ldr	r3, [sp, #32]
 800ad60:	3301      	adds	r3, #1
 800ad62:	9308      	str	r3, [sp, #32]
 800ad64:	2330      	movs	r3, #48	; 0x30
 800ad66:	f88b 3000 	strb.w	r3, [fp]
 800ad6a:	465b      	mov	r3, fp
 800ad6c:	781a      	ldrb	r2, [r3, #0]
 800ad6e:	3201      	adds	r2, #1
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	e78c      	b.n	800ac8e <_dtoa_r+0x5de>
 800ad74:	461d      	mov	r5, r3
 800ad76:	e7ea      	b.n	800ad4e <_dtoa_r+0x69e>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4b9b      	ldr	r3, [pc, #620]	; (800afe8 <_dtoa_r+0x938>)
 800ad7c:	f7f5 fc5c 	bl	8000638 <__aeabi_dmul>
 800ad80:	2200      	movs	r2, #0
 800ad82:	2300      	movs	r3, #0
 800ad84:	4606      	mov	r6, r0
 800ad86:	460f      	mov	r7, r1
 800ad88:	f7f5 febe 	bl	8000b08 <__aeabi_dcmpeq>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d09a      	beq.n	800acc6 <_dtoa_r+0x616>
 800ad90:	e7cb      	b.n	800ad2a <_dtoa_r+0x67a>
 800ad92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	f000 808b 	beq.w	800aeb0 <_dtoa_r+0x800>
 800ad9a:	9a06      	ldr	r2, [sp, #24]
 800ad9c:	2a01      	cmp	r2, #1
 800ad9e:	dc6e      	bgt.n	800ae7e <_dtoa_r+0x7ce>
 800ada0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d067      	beq.n	800ae76 <_dtoa_r+0x7c6>
 800ada6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adaa:	9f07      	ldr	r7, [sp, #28]
 800adac:	9d05      	ldr	r5, [sp, #20]
 800adae:	9a05      	ldr	r2, [sp, #20]
 800adb0:	2101      	movs	r1, #1
 800adb2:	441a      	add	r2, r3
 800adb4:	4620      	mov	r0, r4
 800adb6:	9205      	str	r2, [sp, #20]
 800adb8:	4498      	add	r8, r3
 800adba:	f000 fbdf 	bl	800b57c <__i2b>
 800adbe:	4606      	mov	r6, r0
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	dd0c      	ble.n	800adde <_dtoa_r+0x72e>
 800adc4:	f1b8 0f00 	cmp.w	r8, #0
 800adc8:	dd09      	ble.n	800adde <_dtoa_r+0x72e>
 800adca:	4545      	cmp	r5, r8
 800adcc:	9a05      	ldr	r2, [sp, #20]
 800adce:	462b      	mov	r3, r5
 800add0:	bfa8      	it	ge
 800add2:	4643      	movge	r3, r8
 800add4:	1ad2      	subs	r2, r2, r3
 800add6:	9205      	str	r2, [sp, #20]
 800add8:	1aed      	subs	r5, r5, r3
 800adda:	eba8 0803 	sub.w	r8, r8, r3
 800adde:	9b07      	ldr	r3, [sp, #28]
 800ade0:	b1eb      	cbz	r3, 800ae1e <_dtoa_r+0x76e>
 800ade2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d067      	beq.n	800aeb8 <_dtoa_r+0x808>
 800ade8:	b18f      	cbz	r7, 800ae0e <_dtoa_r+0x75e>
 800adea:	4631      	mov	r1, r6
 800adec:	463a      	mov	r2, r7
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 fc64 	bl	800b6bc <__pow5mult>
 800adf4:	9a04      	ldr	r2, [sp, #16]
 800adf6:	4601      	mov	r1, r0
 800adf8:	4606      	mov	r6, r0
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fbc7 	bl	800b58e <__multiply>
 800ae00:	9904      	ldr	r1, [sp, #16]
 800ae02:	9008      	str	r0, [sp, #32]
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fb19 	bl	800b43c <_Bfree>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	9b07      	ldr	r3, [sp, #28]
 800ae10:	1bda      	subs	r2, r3, r7
 800ae12:	d004      	beq.n	800ae1e <_dtoa_r+0x76e>
 800ae14:	9904      	ldr	r1, [sp, #16]
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 fc50 	bl	800b6bc <__pow5mult>
 800ae1c:	9004      	str	r0, [sp, #16]
 800ae1e:	2101      	movs	r1, #1
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fbab 	bl	800b57c <__i2b>
 800ae26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae28:	4607      	mov	r7, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 81d0 	beq.w	800b1d0 <_dtoa_r+0xb20>
 800ae30:	461a      	mov	r2, r3
 800ae32:	4601      	mov	r1, r0
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 fc41 	bl	800b6bc <__pow5mult>
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	4607      	mov	r7, r0
 800ae40:	dc40      	bgt.n	800aec4 <_dtoa_r+0x814>
 800ae42:	9b00      	ldr	r3, [sp, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d139      	bne.n	800aebc <_dtoa_r+0x80c>
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d136      	bne.n	800aec0 <_dtoa_r+0x810>
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae58:	0d1b      	lsrs	r3, r3, #20
 800ae5a:	051b      	lsls	r3, r3, #20
 800ae5c:	b12b      	cbz	r3, 800ae6a <_dtoa_r+0x7ba>
 800ae5e:	9b05      	ldr	r3, [sp, #20]
 800ae60:	3301      	adds	r3, #1
 800ae62:	9305      	str	r3, [sp, #20]
 800ae64:	f108 0801 	add.w	r8, r8, #1
 800ae68:	2301      	movs	r3, #1
 800ae6a:	9307      	str	r3, [sp, #28]
 800ae6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d12a      	bne.n	800aec8 <_dtoa_r+0x818>
 800ae72:	2001      	movs	r0, #1
 800ae74:	e030      	b.n	800aed8 <_dtoa_r+0x828>
 800ae76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae7c:	e795      	b.n	800adaa <_dtoa_r+0x6fa>
 800ae7e:	9b07      	ldr	r3, [sp, #28]
 800ae80:	f109 37ff 	add.w	r7, r9, #4294967295
 800ae84:	42bb      	cmp	r3, r7
 800ae86:	bfbf      	itttt	lt
 800ae88:	9b07      	ldrlt	r3, [sp, #28]
 800ae8a:	9707      	strlt	r7, [sp, #28]
 800ae8c:	1afa      	sublt	r2, r7, r3
 800ae8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ae90:	bfbb      	ittet	lt
 800ae92:	189b      	addlt	r3, r3, r2
 800ae94:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ae96:	1bdf      	subge	r7, r3, r7
 800ae98:	2700      	movlt	r7, #0
 800ae9a:	f1b9 0f00 	cmp.w	r9, #0
 800ae9e:	bfb5      	itete	lt
 800aea0:	9b05      	ldrlt	r3, [sp, #20]
 800aea2:	9d05      	ldrge	r5, [sp, #20]
 800aea4:	eba3 0509 	sublt.w	r5, r3, r9
 800aea8:	464b      	movge	r3, r9
 800aeaa:	bfb8      	it	lt
 800aeac:	2300      	movlt	r3, #0
 800aeae:	e77e      	b.n	800adae <_dtoa_r+0x6fe>
 800aeb0:	9f07      	ldr	r7, [sp, #28]
 800aeb2:	9d05      	ldr	r5, [sp, #20]
 800aeb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aeb6:	e783      	b.n	800adc0 <_dtoa_r+0x710>
 800aeb8:	9a07      	ldr	r2, [sp, #28]
 800aeba:	e7ab      	b.n	800ae14 <_dtoa_r+0x764>
 800aebc:	2300      	movs	r3, #0
 800aebe:	e7d4      	b.n	800ae6a <_dtoa_r+0x7ba>
 800aec0:	9b00      	ldr	r3, [sp, #0]
 800aec2:	e7d2      	b.n	800ae6a <_dtoa_r+0x7ba>
 800aec4:	2300      	movs	r3, #0
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800aece:	6918      	ldr	r0, [r3, #16]
 800aed0:	f000 fb06 	bl	800b4e0 <__hi0bits>
 800aed4:	f1c0 0020 	rsb	r0, r0, #32
 800aed8:	4440      	add	r0, r8
 800aeda:	f010 001f 	ands.w	r0, r0, #31
 800aede:	d047      	beq.n	800af70 <_dtoa_r+0x8c0>
 800aee0:	f1c0 0320 	rsb	r3, r0, #32
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	dd3b      	ble.n	800af60 <_dtoa_r+0x8b0>
 800aee8:	9b05      	ldr	r3, [sp, #20]
 800aeea:	f1c0 001c 	rsb	r0, r0, #28
 800aeee:	4403      	add	r3, r0
 800aef0:	9305      	str	r3, [sp, #20]
 800aef2:	4405      	add	r5, r0
 800aef4:	4480      	add	r8, r0
 800aef6:	9b05      	ldr	r3, [sp, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dd05      	ble.n	800af08 <_dtoa_r+0x858>
 800aefc:	461a      	mov	r2, r3
 800aefe:	9904      	ldr	r1, [sp, #16]
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fc29 	bl	800b758 <__lshift>
 800af06:	9004      	str	r0, [sp, #16]
 800af08:	f1b8 0f00 	cmp.w	r8, #0
 800af0c:	dd05      	ble.n	800af1a <_dtoa_r+0x86a>
 800af0e:	4639      	mov	r1, r7
 800af10:	4642      	mov	r2, r8
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fc20 	bl	800b758 <__lshift>
 800af18:	4607      	mov	r7, r0
 800af1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af1c:	b353      	cbz	r3, 800af74 <_dtoa_r+0x8c4>
 800af1e:	4639      	mov	r1, r7
 800af20:	9804      	ldr	r0, [sp, #16]
 800af22:	f000 fc6d 	bl	800b800 <__mcmp>
 800af26:	2800      	cmp	r0, #0
 800af28:	da24      	bge.n	800af74 <_dtoa_r+0x8c4>
 800af2a:	2300      	movs	r3, #0
 800af2c:	220a      	movs	r2, #10
 800af2e:	9904      	ldr	r1, [sp, #16]
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fa9a 	bl	800b46a <__multadd>
 800af36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af38:	9004      	str	r0, [sp, #16]
 800af3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 814d 	beq.w	800b1de <_dtoa_r+0xb2e>
 800af44:	2300      	movs	r3, #0
 800af46:	4631      	mov	r1, r6
 800af48:	220a      	movs	r2, #10
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fa8d 	bl	800b46a <__multadd>
 800af50:	9b02      	ldr	r3, [sp, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	4606      	mov	r6, r0
 800af56:	dc4f      	bgt.n	800aff8 <_dtoa_r+0x948>
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	dd4c      	ble.n	800aff8 <_dtoa_r+0x948>
 800af5e:	e011      	b.n	800af84 <_dtoa_r+0x8d4>
 800af60:	d0c9      	beq.n	800aef6 <_dtoa_r+0x846>
 800af62:	9a05      	ldr	r2, [sp, #20]
 800af64:	331c      	adds	r3, #28
 800af66:	441a      	add	r2, r3
 800af68:	9205      	str	r2, [sp, #20]
 800af6a:	441d      	add	r5, r3
 800af6c:	4498      	add	r8, r3
 800af6e:	e7c2      	b.n	800aef6 <_dtoa_r+0x846>
 800af70:	4603      	mov	r3, r0
 800af72:	e7f6      	b.n	800af62 <_dtoa_r+0x8b2>
 800af74:	f1b9 0f00 	cmp.w	r9, #0
 800af78:	dc38      	bgt.n	800afec <_dtoa_r+0x93c>
 800af7a:	9b06      	ldr	r3, [sp, #24]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	dd35      	ble.n	800afec <_dtoa_r+0x93c>
 800af80:	f8cd 9008 	str.w	r9, [sp, #8]
 800af84:	9b02      	ldr	r3, [sp, #8]
 800af86:	b963      	cbnz	r3, 800afa2 <_dtoa_r+0x8f2>
 800af88:	4639      	mov	r1, r7
 800af8a:	2205      	movs	r2, #5
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fa6c 	bl	800b46a <__multadd>
 800af92:	4601      	mov	r1, r0
 800af94:	4607      	mov	r7, r0
 800af96:	9804      	ldr	r0, [sp, #16]
 800af98:	f000 fc32 	bl	800b800 <__mcmp>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f73f adcc 	bgt.w	800ab3a <_dtoa_r+0x48a>
 800afa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa4:	465d      	mov	r5, fp
 800afa6:	ea6f 0a03 	mvn.w	sl, r3
 800afaa:	f04f 0900 	mov.w	r9, #0
 800afae:	4639      	mov	r1, r7
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fa43 	bl	800b43c <_Bfree>
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	f43f aeb7 	beq.w	800ad2a <_dtoa_r+0x67a>
 800afbc:	f1b9 0f00 	cmp.w	r9, #0
 800afc0:	d005      	beq.n	800afce <_dtoa_r+0x91e>
 800afc2:	45b1      	cmp	r9, r6
 800afc4:	d003      	beq.n	800afce <_dtoa_r+0x91e>
 800afc6:	4649      	mov	r1, r9
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fa37 	bl	800b43c <_Bfree>
 800afce:	4631      	mov	r1, r6
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 fa33 	bl	800b43c <_Bfree>
 800afd6:	e6a8      	b.n	800ad2a <_dtoa_r+0x67a>
 800afd8:	2700      	movs	r7, #0
 800afda:	463e      	mov	r6, r7
 800afdc:	e7e1      	b.n	800afa2 <_dtoa_r+0x8f2>
 800afde:	f8dd a020 	ldr.w	sl, [sp, #32]
 800afe2:	463e      	mov	r6, r7
 800afe4:	e5a9      	b.n	800ab3a <_dtoa_r+0x48a>
 800afe6:	bf00      	nop
 800afe8:	40240000 	.word	0x40240000
 800afec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afee:	f8cd 9008 	str.w	r9, [sp, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 80fa 	beq.w	800b1ec <_dtoa_r+0xb3c>
 800aff8:	2d00      	cmp	r5, #0
 800affa:	dd05      	ble.n	800b008 <_dtoa_r+0x958>
 800affc:	4631      	mov	r1, r6
 800affe:	462a      	mov	r2, r5
 800b000:	4620      	mov	r0, r4
 800b002:	f000 fba9 	bl	800b758 <__lshift>
 800b006:	4606      	mov	r6, r0
 800b008:	9b07      	ldr	r3, [sp, #28]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d04c      	beq.n	800b0a8 <_dtoa_r+0x9f8>
 800b00e:	6871      	ldr	r1, [r6, #4]
 800b010:	4620      	mov	r0, r4
 800b012:	f000 f9df 	bl	800b3d4 <_Balloc>
 800b016:	6932      	ldr	r2, [r6, #16]
 800b018:	3202      	adds	r2, #2
 800b01a:	4605      	mov	r5, r0
 800b01c:	0092      	lsls	r2, r2, #2
 800b01e:	f106 010c 	add.w	r1, r6, #12
 800b022:	300c      	adds	r0, #12
 800b024:	f7fe fd1a 	bl	8009a5c <memcpy>
 800b028:	2201      	movs	r2, #1
 800b02a:	4629      	mov	r1, r5
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fb93 	bl	800b758 <__lshift>
 800b032:	9b00      	ldr	r3, [sp, #0]
 800b034:	f8cd b014 	str.w	fp, [sp, #20]
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	46b1      	mov	r9, r6
 800b03e:	9307      	str	r3, [sp, #28]
 800b040:	4606      	mov	r6, r0
 800b042:	4639      	mov	r1, r7
 800b044:	9804      	ldr	r0, [sp, #16]
 800b046:	f7ff faa5 	bl	800a594 <quorem>
 800b04a:	4649      	mov	r1, r9
 800b04c:	4605      	mov	r5, r0
 800b04e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b052:	9804      	ldr	r0, [sp, #16]
 800b054:	f000 fbd4 	bl	800b800 <__mcmp>
 800b058:	4632      	mov	r2, r6
 800b05a:	9000      	str	r0, [sp, #0]
 800b05c:	4639      	mov	r1, r7
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 fbe8 	bl	800b834 <__mdiff>
 800b064:	68c3      	ldr	r3, [r0, #12]
 800b066:	4602      	mov	r2, r0
 800b068:	bb03      	cbnz	r3, 800b0ac <_dtoa_r+0x9fc>
 800b06a:	4601      	mov	r1, r0
 800b06c:	9008      	str	r0, [sp, #32]
 800b06e:	9804      	ldr	r0, [sp, #16]
 800b070:	f000 fbc6 	bl	800b800 <__mcmp>
 800b074:	9a08      	ldr	r2, [sp, #32]
 800b076:	4603      	mov	r3, r0
 800b078:	4611      	mov	r1, r2
 800b07a:	4620      	mov	r0, r4
 800b07c:	9308      	str	r3, [sp, #32]
 800b07e:	f000 f9dd 	bl	800b43c <_Bfree>
 800b082:	9b08      	ldr	r3, [sp, #32]
 800b084:	b9a3      	cbnz	r3, 800b0b0 <_dtoa_r+0xa00>
 800b086:	9a06      	ldr	r2, [sp, #24]
 800b088:	b992      	cbnz	r2, 800b0b0 <_dtoa_r+0xa00>
 800b08a:	9a07      	ldr	r2, [sp, #28]
 800b08c:	b982      	cbnz	r2, 800b0b0 <_dtoa_r+0xa00>
 800b08e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b092:	d029      	beq.n	800b0e8 <_dtoa_r+0xa38>
 800b094:	9b00      	ldr	r3, [sp, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	dd01      	ble.n	800b09e <_dtoa_r+0x9ee>
 800b09a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b09e:	9b05      	ldr	r3, [sp, #20]
 800b0a0:	1c5d      	adds	r5, r3, #1
 800b0a2:	f883 8000 	strb.w	r8, [r3]
 800b0a6:	e782      	b.n	800afae <_dtoa_r+0x8fe>
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	e7c2      	b.n	800b032 <_dtoa_r+0x982>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e7e3      	b.n	800b078 <_dtoa_r+0x9c8>
 800b0b0:	9a00      	ldr	r2, [sp, #0]
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	db04      	blt.n	800b0c0 <_dtoa_r+0xa10>
 800b0b6:	d125      	bne.n	800b104 <_dtoa_r+0xa54>
 800b0b8:	9a06      	ldr	r2, [sp, #24]
 800b0ba:	bb1a      	cbnz	r2, 800b104 <_dtoa_r+0xa54>
 800b0bc:	9a07      	ldr	r2, [sp, #28]
 800b0be:	bb0a      	cbnz	r2, 800b104 <_dtoa_r+0xa54>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	ddec      	ble.n	800b09e <_dtoa_r+0x9ee>
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	9904      	ldr	r1, [sp, #16]
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fb45 	bl	800b758 <__lshift>
 800b0ce:	4639      	mov	r1, r7
 800b0d0:	9004      	str	r0, [sp, #16]
 800b0d2:	f000 fb95 	bl	800b800 <__mcmp>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	dc03      	bgt.n	800b0e2 <_dtoa_r+0xa32>
 800b0da:	d1e0      	bne.n	800b09e <_dtoa_r+0x9ee>
 800b0dc:	f018 0f01 	tst.w	r8, #1
 800b0e0:	d0dd      	beq.n	800b09e <_dtoa_r+0x9ee>
 800b0e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b0e6:	d1d8      	bne.n	800b09a <_dtoa_r+0x9ea>
 800b0e8:	9b05      	ldr	r3, [sp, #20]
 800b0ea:	9a05      	ldr	r2, [sp, #20]
 800b0ec:	1c5d      	adds	r5, r3, #1
 800b0ee:	2339      	movs	r3, #57	; 0x39
 800b0f0:	7013      	strb	r3, [r2, #0]
 800b0f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b0f6:	2b39      	cmp	r3, #57	; 0x39
 800b0f8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b0fc:	d04f      	beq.n	800b19e <_dtoa_r+0xaee>
 800b0fe:	3301      	adds	r3, #1
 800b100:	7013      	strb	r3, [r2, #0]
 800b102:	e754      	b.n	800afae <_dtoa_r+0x8fe>
 800b104:	9a05      	ldr	r2, [sp, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f102 0501 	add.w	r5, r2, #1
 800b10c:	dd06      	ble.n	800b11c <_dtoa_r+0xa6c>
 800b10e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b112:	d0e9      	beq.n	800b0e8 <_dtoa_r+0xa38>
 800b114:	f108 0801 	add.w	r8, r8, #1
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	e7c2      	b.n	800b0a2 <_dtoa_r+0x9f2>
 800b11c:	9a02      	ldr	r2, [sp, #8]
 800b11e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b122:	eba5 030b 	sub.w	r3, r5, fp
 800b126:	4293      	cmp	r3, r2
 800b128:	d021      	beq.n	800b16e <_dtoa_r+0xabe>
 800b12a:	2300      	movs	r3, #0
 800b12c:	220a      	movs	r2, #10
 800b12e:	9904      	ldr	r1, [sp, #16]
 800b130:	4620      	mov	r0, r4
 800b132:	f000 f99a 	bl	800b46a <__multadd>
 800b136:	45b1      	cmp	r9, r6
 800b138:	9004      	str	r0, [sp, #16]
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	f04f 020a 	mov.w	r2, #10
 800b142:	4649      	mov	r1, r9
 800b144:	4620      	mov	r0, r4
 800b146:	d105      	bne.n	800b154 <_dtoa_r+0xaa4>
 800b148:	f000 f98f 	bl	800b46a <__multadd>
 800b14c:	4681      	mov	r9, r0
 800b14e:	4606      	mov	r6, r0
 800b150:	9505      	str	r5, [sp, #20]
 800b152:	e776      	b.n	800b042 <_dtoa_r+0x992>
 800b154:	f000 f989 	bl	800b46a <__multadd>
 800b158:	4631      	mov	r1, r6
 800b15a:	4681      	mov	r9, r0
 800b15c:	2300      	movs	r3, #0
 800b15e:	220a      	movs	r2, #10
 800b160:	4620      	mov	r0, r4
 800b162:	f000 f982 	bl	800b46a <__multadd>
 800b166:	4606      	mov	r6, r0
 800b168:	e7f2      	b.n	800b150 <_dtoa_r+0xaa0>
 800b16a:	f04f 0900 	mov.w	r9, #0
 800b16e:	2201      	movs	r2, #1
 800b170:	9904      	ldr	r1, [sp, #16]
 800b172:	4620      	mov	r0, r4
 800b174:	f000 faf0 	bl	800b758 <__lshift>
 800b178:	4639      	mov	r1, r7
 800b17a:	9004      	str	r0, [sp, #16]
 800b17c:	f000 fb40 	bl	800b800 <__mcmp>
 800b180:	2800      	cmp	r0, #0
 800b182:	dcb6      	bgt.n	800b0f2 <_dtoa_r+0xa42>
 800b184:	d102      	bne.n	800b18c <_dtoa_r+0xadc>
 800b186:	f018 0f01 	tst.w	r8, #1
 800b18a:	d1b2      	bne.n	800b0f2 <_dtoa_r+0xa42>
 800b18c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b190:	2b30      	cmp	r3, #48	; 0x30
 800b192:	f105 32ff 	add.w	r2, r5, #4294967295
 800b196:	f47f af0a 	bne.w	800afae <_dtoa_r+0x8fe>
 800b19a:	4615      	mov	r5, r2
 800b19c:	e7f6      	b.n	800b18c <_dtoa_r+0xadc>
 800b19e:	4593      	cmp	fp, r2
 800b1a0:	d105      	bne.n	800b1ae <_dtoa_r+0xafe>
 800b1a2:	2331      	movs	r3, #49	; 0x31
 800b1a4:	f10a 0a01 	add.w	sl, sl, #1
 800b1a8:	f88b 3000 	strb.w	r3, [fp]
 800b1ac:	e6ff      	b.n	800afae <_dtoa_r+0x8fe>
 800b1ae:	4615      	mov	r5, r2
 800b1b0:	e79f      	b.n	800b0f2 <_dtoa_r+0xa42>
 800b1b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b218 <_dtoa_r+0xb68>
 800b1b6:	e007      	b.n	800b1c8 <_dtoa_r+0xb18>
 800b1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b21c <_dtoa_r+0xb6c>
 800b1be:	b11b      	cbz	r3, 800b1c8 <_dtoa_r+0xb18>
 800b1c0:	f10b 0308 	add.w	r3, fp, #8
 800b1c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	4658      	mov	r0, fp
 800b1ca:	b017      	add	sp, #92	; 0x5c
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d0:	9b06      	ldr	r3, [sp, #24]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	f77f ae35 	ble.w	800ae42 <_dtoa_r+0x792>
 800b1d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	e649      	b.n	800ae72 <_dtoa_r+0x7c2>
 800b1de:	9b02      	ldr	r3, [sp, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dc03      	bgt.n	800b1ec <_dtoa_r+0xb3c>
 800b1e4:	9b06      	ldr	r3, [sp, #24]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	f73f aecc 	bgt.w	800af84 <_dtoa_r+0x8d4>
 800b1ec:	465d      	mov	r5, fp
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	9804      	ldr	r0, [sp, #16]
 800b1f2:	f7ff f9cf 	bl	800a594 <quorem>
 800b1f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b1fa:	f805 8b01 	strb.w	r8, [r5], #1
 800b1fe:	9a02      	ldr	r2, [sp, #8]
 800b200:	eba5 030b 	sub.w	r3, r5, fp
 800b204:	429a      	cmp	r2, r3
 800b206:	ddb0      	ble.n	800b16a <_dtoa_r+0xaba>
 800b208:	2300      	movs	r3, #0
 800b20a:	220a      	movs	r2, #10
 800b20c:	9904      	ldr	r1, [sp, #16]
 800b20e:	4620      	mov	r0, r4
 800b210:	f000 f92b 	bl	800b46a <__multadd>
 800b214:	9004      	str	r0, [sp, #16]
 800b216:	e7ea      	b.n	800b1ee <_dtoa_r+0xb3e>
 800b218:	0800c218 	.word	0x0800c218
 800b21c:	0800c23c 	.word	0x0800c23c

0800b220 <std>:
 800b220:	2300      	movs	r3, #0
 800b222:	b510      	push	{r4, lr}
 800b224:	4604      	mov	r4, r0
 800b226:	e9c0 3300 	strd	r3, r3, [r0]
 800b22a:	6083      	str	r3, [r0, #8]
 800b22c:	8181      	strh	r1, [r0, #12]
 800b22e:	6643      	str	r3, [r0, #100]	; 0x64
 800b230:	81c2      	strh	r2, [r0, #14]
 800b232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b236:	6183      	str	r3, [r0, #24]
 800b238:	4619      	mov	r1, r3
 800b23a:	2208      	movs	r2, #8
 800b23c:	305c      	adds	r0, #92	; 0x5c
 800b23e:	f7fe fc31 	bl	8009aa4 <memset>
 800b242:	4b05      	ldr	r3, [pc, #20]	; (800b258 <std+0x38>)
 800b244:	6263      	str	r3, [r4, #36]	; 0x24
 800b246:	4b05      	ldr	r3, [pc, #20]	; (800b25c <std+0x3c>)
 800b248:	62a3      	str	r3, [r4, #40]	; 0x28
 800b24a:	4b05      	ldr	r3, [pc, #20]	; (800b260 <std+0x40>)
 800b24c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <std+0x44>)
 800b250:	6224      	str	r4, [r4, #32]
 800b252:	6323      	str	r3, [r4, #48]	; 0x30
 800b254:	bd10      	pop	{r4, pc}
 800b256:	bf00      	nop
 800b258:	0800bc29 	.word	0x0800bc29
 800b25c:	0800bc4b 	.word	0x0800bc4b
 800b260:	0800bc83 	.word	0x0800bc83
 800b264:	0800bca7 	.word	0x0800bca7

0800b268 <_cleanup_r>:
 800b268:	4901      	ldr	r1, [pc, #4]	; (800b270 <_cleanup_r+0x8>)
 800b26a:	f000 b885 	b.w	800b378 <_fwalk_reent>
 800b26e:	bf00      	nop
 800b270:	0800bf81 	.word	0x0800bf81

0800b274 <__sfmoreglue>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	1e4a      	subs	r2, r1, #1
 800b278:	2568      	movs	r5, #104	; 0x68
 800b27a:	4355      	muls	r5, r2
 800b27c:	460e      	mov	r6, r1
 800b27e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b282:	f7fe fc65 	bl	8009b50 <_malloc_r>
 800b286:	4604      	mov	r4, r0
 800b288:	b140      	cbz	r0, 800b29c <__sfmoreglue+0x28>
 800b28a:	2100      	movs	r1, #0
 800b28c:	e9c0 1600 	strd	r1, r6, [r0]
 800b290:	300c      	adds	r0, #12
 800b292:	60a0      	str	r0, [r4, #8]
 800b294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b298:	f7fe fc04 	bl	8009aa4 <memset>
 800b29c:	4620      	mov	r0, r4
 800b29e:	bd70      	pop	{r4, r5, r6, pc}

0800b2a0 <__sinit>:
 800b2a0:	6983      	ldr	r3, [r0, #24]
 800b2a2:	b510      	push	{r4, lr}
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	bb33      	cbnz	r3, 800b2f6 <__sinit+0x56>
 800b2a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b2ac:	6503      	str	r3, [r0, #80]	; 0x50
 800b2ae:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <__sinit+0x58>)
 800b2b0:	4a12      	ldr	r2, [pc, #72]	; (800b2fc <__sinit+0x5c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6282      	str	r2, [r0, #40]	; 0x28
 800b2b6:	4298      	cmp	r0, r3
 800b2b8:	bf04      	itt	eq
 800b2ba:	2301      	moveq	r3, #1
 800b2bc:	6183      	streq	r3, [r0, #24]
 800b2be:	f000 f81f 	bl	800b300 <__sfp>
 800b2c2:	6060      	str	r0, [r4, #4]
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 f81b 	bl	800b300 <__sfp>
 800b2ca:	60a0      	str	r0, [r4, #8]
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 f817 	bl	800b300 <__sfp>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	60e0      	str	r0, [r4, #12]
 800b2d6:	2104      	movs	r1, #4
 800b2d8:	6860      	ldr	r0, [r4, #4]
 800b2da:	f7ff ffa1 	bl	800b220 <std>
 800b2de:	2201      	movs	r2, #1
 800b2e0:	2109      	movs	r1, #9
 800b2e2:	68a0      	ldr	r0, [r4, #8]
 800b2e4:	f7ff ff9c 	bl	800b220 <std>
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	2112      	movs	r1, #18
 800b2ec:	68e0      	ldr	r0, [r4, #12]
 800b2ee:	f7ff ff97 	bl	800b220 <std>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	61a3      	str	r3, [r4, #24]
 800b2f6:	bd10      	pop	{r4, pc}
 800b2f8:	0800c204 	.word	0x0800c204
 800b2fc:	0800b269 	.word	0x0800b269

0800b300 <__sfp>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <__sfp+0x70>)
 800b304:	681e      	ldr	r6, [r3, #0]
 800b306:	69b3      	ldr	r3, [r6, #24]
 800b308:	4607      	mov	r7, r0
 800b30a:	b913      	cbnz	r3, 800b312 <__sfp+0x12>
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff ffc7 	bl	800b2a0 <__sinit>
 800b312:	3648      	adds	r6, #72	; 0x48
 800b314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b318:	3b01      	subs	r3, #1
 800b31a:	d503      	bpl.n	800b324 <__sfp+0x24>
 800b31c:	6833      	ldr	r3, [r6, #0]
 800b31e:	b133      	cbz	r3, 800b32e <__sfp+0x2e>
 800b320:	6836      	ldr	r6, [r6, #0]
 800b322:	e7f7      	b.n	800b314 <__sfp+0x14>
 800b324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b328:	b16d      	cbz	r5, 800b346 <__sfp+0x46>
 800b32a:	3468      	adds	r4, #104	; 0x68
 800b32c:	e7f4      	b.n	800b318 <__sfp+0x18>
 800b32e:	2104      	movs	r1, #4
 800b330:	4638      	mov	r0, r7
 800b332:	f7ff ff9f 	bl	800b274 <__sfmoreglue>
 800b336:	6030      	str	r0, [r6, #0]
 800b338:	2800      	cmp	r0, #0
 800b33a:	d1f1      	bne.n	800b320 <__sfp+0x20>
 800b33c:	230c      	movs	r3, #12
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	4604      	mov	r4, r0
 800b342:	4620      	mov	r0, r4
 800b344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <__sfp+0x74>)
 800b348:	6665      	str	r5, [r4, #100]	; 0x64
 800b34a:	e9c4 5500 	strd	r5, r5, [r4]
 800b34e:	60a5      	str	r5, [r4, #8]
 800b350:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b354:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b358:	2208      	movs	r2, #8
 800b35a:	4629      	mov	r1, r5
 800b35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b360:	f7fe fba0 	bl	8009aa4 <memset>
 800b364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b36c:	e7e9      	b.n	800b342 <__sfp+0x42>
 800b36e:	bf00      	nop
 800b370:	0800c204 	.word	0x0800c204
 800b374:	ffff0001 	.word	0xffff0001

0800b378 <_fwalk_reent>:
 800b378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b384:	2600      	movs	r6, #0
 800b386:	b914      	cbnz	r4, 800b38e <_fwalk_reent+0x16>
 800b388:	4630      	mov	r0, r6
 800b38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b38e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b392:	3f01      	subs	r7, #1
 800b394:	d501      	bpl.n	800b39a <_fwalk_reent+0x22>
 800b396:	6824      	ldr	r4, [r4, #0]
 800b398:	e7f5      	b.n	800b386 <_fwalk_reent+0xe>
 800b39a:	89ab      	ldrh	r3, [r5, #12]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d907      	bls.n	800b3b0 <_fwalk_reent+0x38>
 800b3a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	d003      	beq.n	800b3b0 <_fwalk_reent+0x38>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	47c8      	blx	r9
 800b3ae:	4306      	orrs	r6, r0
 800b3b0:	3568      	adds	r5, #104	; 0x68
 800b3b2:	e7ee      	b.n	800b392 <_fwalk_reent+0x1a>

0800b3b4 <_localeconv_r>:
 800b3b4:	4b04      	ldr	r3, [pc, #16]	; (800b3c8 <_localeconv_r+0x14>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6a18      	ldr	r0, [r3, #32]
 800b3ba:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <_localeconv_r+0x18>)
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	bf08      	it	eq
 800b3c0:	4618      	moveq	r0, r3
 800b3c2:	30f0      	adds	r0, #240	; 0xf0
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	2000000c 	.word	0x2000000c
 800b3cc:	20000070 	.word	0x20000070

0800b3d0 <__malloc_lock>:
 800b3d0:	4770      	bx	lr

0800b3d2 <__malloc_unlock>:
 800b3d2:	4770      	bx	lr

0800b3d4 <_Balloc>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3d8:	4604      	mov	r4, r0
 800b3da:	460e      	mov	r6, r1
 800b3dc:	b93d      	cbnz	r5, 800b3ee <_Balloc+0x1a>
 800b3de:	2010      	movs	r0, #16
 800b3e0:	f7fe fb2c 	bl	8009a3c <malloc>
 800b3e4:	6260      	str	r0, [r4, #36]	; 0x24
 800b3e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3ea:	6005      	str	r5, [r0, #0]
 800b3ec:	60c5      	str	r5, [r0, #12]
 800b3ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b3f0:	68eb      	ldr	r3, [r5, #12]
 800b3f2:	b183      	cbz	r3, 800b416 <_Balloc+0x42>
 800b3f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b3fc:	b9b8      	cbnz	r0, 800b42e <_Balloc+0x5a>
 800b3fe:	2101      	movs	r1, #1
 800b400:	fa01 f506 	lsl.w	r5, r1, r6
 800b404:	1d6a      	adds	r2, r5, #5
 800b406:	0092      	lsls	r2, r2, #2
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fabf 	bl	800b98c <_calloc_r>
 800b40e:	b160      	cbz	r0, 800b42a <_Balloc+0x56>
 800b410:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b414:	e00e      	b.n	800b434 <_Balloc+0x60>
 800b416:	2221      	movs	r2, #33	; 0x21
 800b418:	2104      	movs	r1, #4
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fab6 	bl	800b98c <_calloc_r>
 800b420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b422:	60e8      	str	r0, [r5, #12]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e4      	bne.n	800b3f4 <_Balloc+0x20>
 800b42a:	2000      	movs	r0, #0
 800b42c:	bd70      	pop	{r4, r5, r6, pc}
 800b42e:	6802      	ldr	r2, [r0, #0]
 800b430:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b434:	2300      	movs	r3, #0
 800b436:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b43a:	e7f7      	b.n	800b42c <_Balloc+0x58>

0800b43c <_Bfree>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b440:	4606      	mov	r6, r0
 800b442:	460d      	mov	r5, r1
 800b444:	b93c      	cbnz	r4, 800b456 <_Bfree+0x1a>
 800b446:	2010      	movs	r0, #16
 800b448:	f7fe faf8 	bl	8009a3c <malloc>
 800b44c:	6270      	str	r0, [r6, #36]	; 0x24
 800b44e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b452:	6004      	str	r4, [r0, #0]
 800b454:	60c4      	str	r4, [r0, #12]
 800b456:	b13d      	cbz	r5, 800b468 <_Bfree+0x2c>
 800b458:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b45a:	686a      	ldr	r2, [r5, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b462:	6029      	str	r1, [r5, #0]
 800b464:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b468:	bd70      	pop	{r4, r5, r6, pc}

0800b46a <__multadd>:
 800b46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	690d      	ldr	r5, [r1, #16]
 800b470:	461f      	mov	r7, r3
 800b472:	4606      	mov	r6, r0
 800b474:	460c      	mov	r4, r1
 800b476:	f101 0c14 	add.w	ip, r1, #20
 800b47a:	2300      	movs	r3, #0
 800b47c:	f8dc 0000 	ldr.w	r0, [ip]
 800b480:	b281      	uxth	r1, r0
 800b482:	fb02 7101 	mla	r1, r2, r1, r7
 800b486:	0c0f      	lsrs	r7, r1, #16
 800b488:	0c00      	lsrs	r0, r0, #16
 800b48a:	fb02 7000 	mla	r0, r2, r0, r7
 800b48e:	b289      	uxth	r1, r1
 800b490:	3301      	adds	r3, #1
 800b492:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b496:	429d      	cmp	r5, r3
 800b498:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b49c:	f84c 1b04 	str.w	r1, [ip], #4
 800b4a0:	dcec      	bgt.n	800b47c <__multadd+0x12>
 800b4a2:	b1d7      	cbz	r7, 800b4da <__multadd+0x70>
 800b4a4:	68a3      	ldr	r3, [r4, #8]
 800b4a6:	42ab      	cmp	r3, r5
 800b4a8:	dc12      	bgt.n	800b4d0 <__multadd+0x66>
 800b4aa:	6861      	ldr	r1, [r4, #4]
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	3101      	adds	r1, #1
 800b4b0:	f7ff ff90 	bl	800b3d4 <_Balloc>
 800b4b4:	6922      	ldr	r2, [r4, #16]
 800b4b6:	3202      	adds	r2, #2
 800b4b8:	f104 010c 	add.w	r1, r4, #12
 800b4bc:	4680      	mov	r8, r0
 800b4be:	0092      	lsls	r2, r2, #2
 800b4c0:	300c      	adds	r0, #12
 800b4c2:	f7fe facb 	bl	8009a5c <memcpy>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7ff ffb7 	bl	800b43c <_Bfree>
 800b4ce:	4644      	mov	r4, r8
 800b4d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	615f      	str	r7, [r3, #20]
 800b4d8:	6125      	str	r5, [r4, #16]
 800b4da:	4620      	mov	r0, r4
 800b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4e0 <__hi0bits>:
 800b4e0:	0c02      	lsrs	r2, r0, #16
 800b4e2:	0412      	lsls	r2, r2, #16
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	b9b2      	cbnz	r2, 800b516 <__hi0bits+0x36>
 800b4e8:	0403      	lsls	r3, r0, #16
 800b4ea:	2010      	movs	r0, #16
 800b4ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b4f0:	bf04      	itt	eq
 800b4f2:	021b      	lsleq	r3, r3, #8
 800b4f4:	3008      	addeq	r0, #8
 800b4f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b4fa:	bf04      	itt	eq
 800b4fc:	011b      	lsleq	r3, r3, #4
 800b4fe:	3004      	addeq	r0, #4
 800b500:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b504:	bf04      	itt	eq
 800b506:	009b      	lsleq	r3, r3, #2
 800b508:	3002      	addeq	r0, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	db06      	blt.n	800b51c <__hi0bits+0x3c>
 800b50e:	005b      	lsls	r3, r3, #1
 800b510:	d503      	bpl.n	800b51a <__hi0bits+0x3a>
 800b512:	3001      	adds	r0, #1
 800b514:	4770      	bx	lr
 800b516:	2000      	movs	r0, #0
 800b518:	e7e8      	b.n	800b4ec <__hi0bits+0xc>
 800b51a:	2020      	movs	r0, #32
 800b51c:	4770      	bx	lr

0800b51e <__lo0bits>:
 800b51e:	6803      	ldr	r3, [r0, #0]
 800b520:	f013 0207 	ands.w	r2, r3, #7
 800b524:	4601      	mov	r1, r0
 800b526:	d00b      	beq.n	800b540 <__lo0bits+0x22>
 800b528:	07da      	lsls	r2, r3, #31
 800b52a:	d423      	bmi.n	800b574 <__lo0bits+0x56>
 800b52c:	0798      	lsls	r0, r3, #30
 800b52e:	bf49      	itett	mi
 800b530:	085b      	lsrmi	r3, r3, #1
 800b532:	089b      	lsrpl	r3, r3, #2
 800b534:	2001      	movmi	r0, #1
 800b536:	600b      	strmi	r3, [r1, #0]
 800b538:	bf5c      	itt	pl
 800b53a:	600b      	strpl	r3, [r1, #0]
 800b53c:	2002      	movpl	r0, #2
 800b53e:	4770      	bx	lr
 800b540:	b298      	uxth	r0, r3
 800b542:	b9a8      	cbnz	r0, 800b570 <__lo0bits+0x52>
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	2010      	movs	r0, #16
 800b548:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b54c:	bf04      	itt	eq
 800b54e:	0a1b      	lsreq	r3, r3, #8
 800b550:	3008      	addeq	r0, #8
 800b552:	071a      	lsls	r2, r3, #28
 800b554:	bf04      	itt	eq
 800b556:	091b      	lsreq	r3, r3, #4
 800b558:	3004      	addeq	r0, #4
 800b55a:	079a      	lsls	r2, r3, #30
 800b55c:	bf04      	itt	eq
 800b55e:	089b      	lsreq	r3, r3, #2
 800b560:	3002      	addeq	r0, #2
 800b562:	07da      	lsls	r2, r3, #31
 800b564:	d402      	bmi.n	800b56c <__lo0bits+0x4e>
 800b566:	085b      	lsrs	r3, r3, #1
 800b568:	d006      	beq.n	800b578 <__lo0bits+0x5a>
 800b56a:	3001      	adds	r0, #1
 800b56c:	600b      	str	r3, [r1, #0]
 800b56e:	4770      	bx	lr
 800b570:	4610      	mov	r0, r2
 800b572:	e7e9      	b.n	800b548 <__lo0bits+0x2a>
 800b574:	2000      	movs	r0, #0
 800b576:	4770      	bx	lr
 800b578:	2020      	movs	r0, #32
 800b57a:	4770      	bx	lr

0800b57c <__i2b>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	460c      	mov	r4, r1
 800b580:	2101      	movs	r1, #1
 800b582:	f7ff ff27 	bl	800b3d4 <_Balloc>
 800b586:	2201      	movs	r2, #1
 800b588:	6144      	str	r4, [r0, #20]
 800b58a:	6102      	str	r2, [r0, #16]
 800b58c:	bd10      	pop	{r4, pc}

0800b58e <__multiply>:
 800b58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b592:	4614      	mov	r4, r2
 800b594:	690a      	ldr	r2, [r1, #16]
 800b596:	6923      	ldr	r3, [r4, #16]
 800b598:	429a      	cmp	r2, r3
 800b59a:	bfb8      	it	lt
 800b59c:	460b      	movlt	r3, r1
 800b59e:	4688      	mov	r8, r1
 800b5a0:	bfbc      	itt	lt
 800b5a2:	46a0      	movlt	r8, r4
 800b5a4:	461c      	movlt	r4, r3
 800b5a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5b6:	eb07 0609 	add.w	r6, r7, r9
 800b5ba:	42b3      	cmp	r3, r6
 800b5bc:	bfb8      	it	lt
 800b5be:	3101      	addlt	r1, #1
 800b5c0:	f7ff ff08 	bl	800b3d4 <_Balloc>
 800b5c4:	f100 0514 	add.w	r5, r0, #20
 800b5c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4573      	cmp	r3, lr
 800b5d2:	d316      	bcc.n	800b602 <__multiply+0x74>
 800b5d4:	f104 0214 	add.w	r2, r4, #20
 800b5d8:	f108 0114 	add.w	r1, r8, #20
 800b5dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b5e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	9b00      	ldr	r3, [sp, #0]
 800b5e8:	9201      	str	r2, [sp, #4]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d80c      	bhi.n	800b608 <__multiply+0x7a>
 800b5ee:	2e00      	cmp	r6, #0
 800b5f0:	dd03      	ble.n	800b5fa <__multiply+0x6c>
 800b5f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d05d      	beq.n	800b6b6 <__multiply+0x128>
 800b5fa:	6106      	str	r6, [r0, #16]
 800b5fc:	b003      	add	sp, #12
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	f843 2b04 	str.w	r2, [r3], #4
 800b606:	e7e3      	b.n	800b5d0 <__multiply+0x42>
 800b608:	f8b2 b000 	ldrh.w	fp, [r2]
 800b60c:	f1bb 0f00 	cmp.w	fp, #0
 800b610:	d023      	beq.n	800b65a <__multiply+0xcc>
 800b612:	4689      	mov	r9, r1
 800b614:	46ac      	mov	ip, r5
 800b616:	f04f 0800 	mov.w	r8, #0
 800b61a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b61e:	f8dc a000 	ldr.w	sl, [ip]
 800b622:	b2a3      	uxth	r3, r4
 800b624:	fa1f fa8a 	uxth.w	sl, sl
 800b628:	fb0b a303 	mla	r3, fp, r3, sl
 800b62c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b630:	f8dc 4000 	ldr.w	r4, [ip]
 800b634:	4443      	add	r3, r8
 800b636:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b63a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b63e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b642:	46e2      	mov	sl, ip
 800b644:	b29b      	uxth	r3, r3
 800b646:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b64a:	454f      	cmp	r7, r9
 800b64c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b650:	f84a 3b04 	str.w	r3, [sl], #4
 800b654:	d82b      	bhi.n	800b6ae <__multiply+0x120>
 800b656:	f8cc 8004 	str.w	r8, [ip, #4]
 800b65a:	9b01      	ldr	r3, [sp, #4]
 800b65c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b660:	3204      	adds	r2, #4
 800b662:	f1ba 0f00 	cmp.w	sl, #0
 800b666:	d020      	beq.n	800b6aa <__multiply+0x11c>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	4689      	mov	r9, r1
 800b66c:	46a8      	mov	r8, r5
 800b66e:	f04f 0b00 	mov.w	fp, #0
 800b672:	f8b9 c000 	ldrh.w	ip, [r9]
 800b676:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b67a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b67e:	445c      	add	r4, fp
 800b680:	46c4      	mov	ip, r8
 800b682:	b29b      	uxth	r3, r3
 800b684:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b688:	f84c 3b04 	str.w	r3, [ip], #4
 800b68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b690:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b694:	0c1b      	lsrs	r3, r3, #16
 800b696:	fb0a b303 	mla	r3, sl, r3, fp
 800b69a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b69e:	454f      	cmp	r7, r9
 800b6a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6a4:	d805      	bhi.n	800b6b2 <__multiply+0x124>
 800b6a6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6aa:	3504      	adds	r5, #4
 800b6ac:	e79b      	b.n	800b5e6 <__multiply+0x58>
 800b6ae:	46d4      	mov	ip, sl
 800b6b0:	e7b3      	b.n	800b61a <__multiply+0x8c>
 800b6b2:	46e0      	mov	r8, ip
 800b6b4:	e7dd      	b.n	800b672 <__multiply+0xe4>
 800b6b6:	3e01      	subs	r6, #1
 800b6b8:	e799      	b.n	800b5ee <__multiply+0x60>
	...

0800b6bc <__pow5mult>:
 800b6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	4615      	mov	r5, r2
 800b6c2:	f012 0203 	ands.w	r2, r2, #3
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	d007      	beq.n	800b6dc <__pow5mult+0x20>
 800b6cc:	3a01      	subs	r2, #1
 800b6ce:	4c21      	ldr	r4, [pc, #132]	; (800b754 <__pow5mult+0x98>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6d6:	f7ff fec8 	bl	800b46a <__multadd>
 800b6da:	4607      	mov	r7, r0
 800b6dc:	10ad      	asrs	r5, r5, #2
 800b6de:	d035      	beq.n	800b74c <__pow5mult+0x90>
 800b6e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6e2:	b93c      	cbnz	r4, 800b6f4 <__pow5mult+0x38>
 800b6e4:	2010      	movs	r0, #16
 800b6e6:	f7fe f9a9 	bl	8009a3c <malloc>
 800b6ea:	6270      	str	r0, [r6, #36]	; 0x24
 800b6ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6f0:	6004      	str	r4, [r0, #0]
 800b6f2:	60c4      	str	r4, [r0, #12]
 800b6f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6fc:	b94c      	cbnz	r4, 800b712 <__pow5mult+0x56>
 800b6fe:	f240 2171 	movw	r1, #625	; 0x271
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ff3a 	bl	800b57c <__i2b>
 800b708:	2300      	movs	r3, #0
 800b70a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b70e:	4604      	mov	r4, r0
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	f04f 0800 	mov.w	r8, #0
 800b716:	07eb      	lsls	r3, r5, #31
 800b718:	d50a      	bpl.n	800b730 <__pow5mult+0x74>
 800b71a:	4639      	mov	r1, r7
 800b71c:	4622      	mov	r2, r4
 800b71e:	4630      	mov	r0, r6
 800b720:	f7ff ff35 	bl	800b58e <__multiply>
 800b724:	4639      	mov	r1, r7
 800b726:	4681      	mov	r9, r0
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff fe87 	bl	800b43c <_Bfree>
 800b72e:	464f      	mov	r7, r9
 800b730:	106d      	asrs	r5, r5, #1
 800b732:	d00b      	beq.n	800b74c <__pow5mult+0x90>
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	b938      	cbnz	r0, 800b748 <__pow5mult+0x8c>
 800b738:	4622      	mov	r2, r4
 800b73a:	4621      	mov	r1, r4
 800b73c:	4630      	mov	r0, r6
 800b73e:	f7ff ff26 	bl	800b58e <__multiply>
 800b742:	6020      	str	r0, [r4, #0]
 800b744:	f8c0 8000 	str.w	r8, [r0]
 800b748:	4604      	mov	r4, r0
 800b74a:	e7e4      	b.n	800b716 <__pow5mult+0x5a>
 800b74c:	4638      	mov	r0, r7
 800b74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b752:	bf00      	nop
 800b754:	0800c3a0 	.word	0x0800c3a0

0800b758 <__lshift>:
 800b758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b75c:	460c      	mov	r4, r1
 800b75e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	6849      	ldr	r1, [r1, #4]
 800b766:	eb0a 0903 	add.w	r9, sl, r3
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	4607      	mov	r7, r0
 800b76e:	4616      	mov	r6, r2
 800b770:	f109 0501 	add.w	r5, r9, #1
 800b774:	42ab      	cmp	r3, r5
 800b776:	db32      	blt.n	800b7de <__lshift+0x86>
 800b778:	4638      	mov	r0, r7
 800b77a:	f7ff fe2b 	bl	800b3d4 <_Balloc>
 800b77e:	2300      	movs	r3, #0
 800b780:	4680      	mov	r8, r0
 800b782:	f100 0114 	add.w	r1, r0, #20
 800b786:	461a      	mov	r2, r3
 800b788:	4553      	cmp	r3, sl
 800b78a:	db2b      	blt.n	800b7e4 <__lshift+0x8c>
 800b78c:	6920      	ldr	r0, [r4, #16]
 800b78e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b792:	f104 0314 	add.w	r3, r4, #20
 800b796:	f016 021f 	ands.w	r2, r6, #31
 800b79a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b79e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7a2:	d025      	beq.n	800b7f0 <__lshift+0x98>
 800b7a4:	f1c2 0e20 	rsb	lr, r2, #32
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	681e      	ldr	r6, [r3, #0]
 800b7ac:	468a      	mov	sl, r1
 800b7ae:	4096      	lsls	r6, r2
 800b7b0:	4330      	orrs	r0, r6
 800b7b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b7b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7ba:	459c      	cmp	ip, r3
 800b7bc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b7c0:	d814      	bhi.n	800b7ec <__lshift+0x94>
 800b7c2:	6048      	str	r0, [r1, #4]
 800b7c4:	b108      	cbz	r0, 800b7ca <__lshift+0x72>
 800b7c6:	f109 0502 	add.w	r5, r9, #2
 800b7ca:	3d01      	subs	r5, #1
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f8c8 5010 	str.w	r5, [r8, #16]
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	f7ff fe32 	bl	800b43c <_Bfree>
 800b7d8:	4640      	mov	r0, r8
 800b7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7de:	3101      	adds	r1, #1
 800b7e0:	005b      	lsls	r3, r3, #1
 800b7e2:	e7c7      	b.n	800b774 <__lshift+0x1c>
 800b7e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	e7cd      	b.n	800b788 <__lshift+0x30>
 800b7ec:	4651      	mov	r1, sl
 800b7ee:	e7dc      	b.n	800b7aa <__lshift+0x52>
 800b7f0:	3904      	subs	r1, #4
 800b7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7fa:	459c      	cmp	ip, r3
 800b7fc:	d8f9      	bhi.n	800b7f2 <__lshift+0x9a>
 800b7fe:	e7e4      	b.n	800b7ca <__lshift+0x72>

0800b800 <__mcmp>:
 800b800:	6903      	ldr	r3, [r0, #16]
 800b802:	690a      	ldr	r2, [r1, #16]
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	b530      	push	{r4, r5, lr}
 800b808:	d10c      	bne.n	800b824 <__mcmp+0x24>
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	3014      	adds	r0, #20
 800b80e:	3114      	adds	r1, #20
 800b810:	1884      	adds	r4, r0, r2
 800b812:	4411      	add	r1, r2
 800b814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b81c:	4295      	cmp	r5, r2
 800b81e:	d003      	beq.n	800b828 <__mcmp+0x28>
 800b820:	d305      	bcc.n	800b82e <__mcmp+0x2e>
 800b822:	2301      	movs	r3, #1
 800b824:	4618      	mov	r0, r3
 800b826:	bd30      	pop	{r4, r5, pc}
 800b828:	42a0      	cmp	r0, r4
 800b82a:	d3f3      	bcc.n	800b814 <__mcmp+0x14>
 800b82c:	e7fa      	b.n	800b824 <__mcmp+0x24>
 800b82e:	f04f 33ff 	mov.w	r3, #4294967295
 800b832:	e7f7      	b.n	800b824 <__mcmp+0x24>

0800b834 <__mdiff>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	460d      	mov	r5, r1
 800b83a:	4607      	mov	r7, r0
 800b83c:	4611      	mov	r1, r2
 800b83e:	4628      	mov	r0, r5
 800b840:	4614      	mov	r4, r2
 800b842:	f7ff ffdd 	bl	800b800 <__mcmp>
 800b846:	1e06      	subs	r6, r0, #0
 800b848:	d108      	bne.n	800b85c <__mdiff+0x28>
 800b84a:	4631      	mov	r1, r6
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff fdc1 	bl	800b3d4 <_Balloc>
 800b852:	2301      	movs	r3, #1
 800b854:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85c:	bfa4      	itt	ge
 800b85e:	4623      	movge	r3, r4
 800b860:	462c      	movge	r4, r5
 800b862:	4638      	mov	r0, r7
 800b864:	6861      	ldr	r1, [r4, #4]
 800b866:	bfa6      	itte	ge
 800b868:	461d      	movge	r5, r3
 800b86a:	2600      	movge	r6, #0
 800b86c:	2601      	movlt	r6, #1
 800b86e:	f7ff fdb1 	bl	800b3d4 <_Balloc>
 800b872:	692b      	ldr	r3, [r5, #16]
 800b874:	60c6      	str	r6, [r0, #12]
 800b876:	6926      	ldr	r6, [r4, #16]
 800b878:	f105 0914 	add.w	r9, r5, #20
 800b87c:	f104 0214 	add.w	r2, r4, #20
 800b880:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b884:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b888:	f100 0514 	add.w	r5, r0, #20
 800b88c:	f04f 0e00 	mov.w	lr, #0
 800b890:	f852 ab04 	ldr.w	sl, [r2], #4
 800b894:	f859 4b04 	ldr.w	r4, [r9], #4
 800b898:	fa1e f18a 	uxtah	r1, lr, sl
 800b89c:	b2a3      	uxth	r3, r4
 800b89e:	1ac9      	subs	r1, r1, r3
 800b8a0:	0c23      	lsrs	r3, r4, #16
 800b8a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b8a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8aa:	b289      	uxth	r1, r1
 800b8ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8b0:	45c8      	cmp	r8, r9
 800b8b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8b6:	4694      	mov	ip, r2
 800b8b8:	f845 3b04 	str.w	r3, [r5], #4
 800b8bc:	d8e8      	bhi.n	800b890 <__mdiff+0x5c>
 800b8be:	45bc      	cmp	ip, r7
 800b8c0:	d304      	bcc.n	800b8cc <__mdiff+0x98>
 800b8c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b8c6:	b183      	cbz	r3, 800b8ea <__mdiff+0xb6>
 800b8c8:	6106      	str	r6, [r0, #16]
 800b8ca:	e7c5      	b.n	800b858 <__mdiff+0x24>
 800b8cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8d0:	fa1e f381 	uxtah	r3, lr, r1
 800b8d4:	141a      	asrs	r2, r3, #16
 800b8d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b8e4:	f845 3b04 	str.w	r3, [r5], #4
 800b8e8:	e7e9      	b.n	800b8be <__mdiff+0x8a>
 800b8ea:	3e01      	subs	r6, #1
 800b8ec:	e7e9      	b.n	800b8c2 <__mdiff+0x8e>

0800b8ee <__d2b>:
 800b8ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8f2:	460e      	mov	r6, r1
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	ec59 8b10 	vmov	r8, r9, d0
 800b8fa:	4615      	mov	r5, r2
 800b8fc:	f7ff fd6a 	bl	800b3d4 <_Balloc>
 800b900:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b904:	4607      	mov	r7, r0
 800b906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b90a:	bb34      	cbnz	r4, 800b95a <__d2b+0x6c>
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	f1b8 0300 	subs.w	r3, r8, #0
 800b912:	d027      	beq.n	800b964 <__d2b+0x76>
 800b914:	a802      	add	r0, sp, #8
 800b916:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b91a:	f7ff fe00 	bl	800b51e <__lo0bits>
 800b91e:	9900      	ldr	r1, [sp, #0]
 800b920:	b1f0      	cbz	r0, 800b960 <__d2b+0x72>
 800b922:	9a01      	ldr	r2, [sp, #4]
 800b924:	f1c0 0320 	rsb	r3, r0, #32
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	430b      	orrs	r3, r1
 800b92e:	40c2      	lsrs	r2, r0
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	9b01      	ldr	r3, [sp, #4]
 800b936:	61bb      	str	r3, [r7, #24]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bf14      	ite	ne
 800b93c:	2102      	movne	r1, #2
 800b93e:	2101      	moveq	r1, #1
 800b940:	6139      	str	r1, [r7, #16]
 800b942:	b1c4      	cbz	r4, 800b976 <__d2b+0x88>
 800b944:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b948:	4404      	add	r4, r0
 800b94a:	6034      	str	r4, [r6, #0]
 800b94c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b950:	6028      	str	r0, [r5, #0]
 800b952:	4638      	mov	r0, r7
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b95a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b95e:	e7d5      	b.n	800b90c <__d2b+0x1e>
 800b960:	6179      	str	r1, [r7, #20]
 800b962:	e7e7      	b.n	800b934 <__d2b+0x46>
 800b964:	a801      	add	r0, sp, #4
 800b966:	f7ff fdda 	bl	800b51e <__lo0bits>
 800b96a:	9b01      	ldr	r3, [sp, #4]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	2101      	movs	r1, #1
 800b970:	6139      	str	r1, [r7, #16]
 800b972:	3020      	adds	r0, #32
 800b974:	e7e5      	b.n	800b942 <__d2b+0x54>
 800b976:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b97a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b97e:	6030      	str	r0, [r6, #0]
 800b980:	6918      	ldr	r0, [r3, #16]
 800b982:	f7ff fdad 	bl	800b4e0 <__hi0bits>
 800b986:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b98a:	e7e1      	b.n	800b950 <__d2b+0x62>

0800b98c <_calloc_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	fb02 f401 	mul.w	r4, r2, r1
 800b992:	4621      	mov	r1, r4
 800b994:	f7fe f8dc 	bl	8009b50 <_malloc_r>
 800b998:	4605      	mov	r5, r0
 800b99a:	b118      	cbz	r0, 800b9a4 <_calloc_r+0x18>
 800b99c:	4622      	mov	r2, r4
 800b99e:	2100      	movs	r1, #0
 800b9a0:	f7fe f880 	bl	8009aa4 <memset>
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}

0800b9a8 <__sfputc_r>:
 800b9a8:	6893      	ldr	r3, [r2, #8]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	b410      	push	{r4}
 800b9b0:	6093      	str	r3, [r2, #8]
 800b9b2:	da08      	bge.n	800b9c6 <__sfputc_r+0x1e>
 800b9b4:	6994      	ldr	r4, [r2, #24]
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	db01      	blt.n	800b9be <__sfputc_r+0x16>
 800b9ba:	290a      	cmp	r1, #10
 800b9bc:	d103      	bne.n	800b9c6 <__sfputc_r+0x1e>
 800b9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9c2:	f000 b975 	b.w	800bcb0 <__swbuf_r>
 800b9c6:	6813      	ldr	r3, [r2, #0]
 800b9c8:	1c58      	adds	r0, r3, #1
 800b9ca:	6010      	str	r0, [r2, #0]
 800b9cc:	7019      	strb	r1, [r3, #0]
 800b9ce:	4608      	mov	r0, r1
 800b9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <__sfputs_r>:
 800b9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d8:	4606      	mov	r6, r0
 800b9da:	460f      	mov	r7, r1
 800b9dc:	4614      	mov	r4, r2
 800b9de:	18d5      	adds	r5, r2, r3
 800b9e0:	42ac      	cmp	r4, r5
 800b9e2:	d101      	bne.n	800b9e8 <__sfputs_r+0x12>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e007      	b.n	800b9f8 <__sfputs_r+0x22>
 800b9e8:	463a      	mov	r2, r7
 800b9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7ff ffda 	bl	800b9a8 <__sfputc_r>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d1f3      	bne.n	800b9e0 <__sfputs_r+0xa>
 800b9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9fc <_vfiprintf_r>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	460c      	mov	r4, r1
 800ba02:	b09d      	sub	sp, #116	; 0x74
 800ba04:	4617      	mov	r7, r2
 800ba06:	461d      	mov	r5, r3
 800ba08:	4606      	mov	r6, r0
 800ba0a:	b118      	cbz	r0, 800ba14 <_vfiprintf_r+0x18>
 800ba0c:	6983      	ldr	r3, [r0, #24]
 800ba0e:	b90b      	cbnz	r3, 800ba14 <_vfiprintf_r+0x18>
 800ba10:	f7ff fc46 	bl	800b2a0 <__sinit>
 800ba14:	4b7c      	ldr	r3, [pc, #496]	; (800bc08 <_vfiprintf_r+0x20c>)
 800ba16:	429c      	cmp	r4, r3
 800ba18:	d158      	bne.n	800bacc <_vfiprintf_r+0xd0>
 800ba1a:	6874      	ldr	r4, [r6, #4]
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	0718      	lsls	r0, r3, #28
 800ba20:	d55e      	bpl.n	800bae0 <_vfiprintf_r+0xe4>
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d05b      	beq.n	800bae0 <_vfiprintf_r+0xe4>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba2c:	2320      	movs	r3, #32
 800ba2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba32:	2330      	movs	r3, #48	; 0x30
 800ba34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba38:	9503      	str	r5, [sp, #12]
 800ba3a:	f04f 0b01 	mov.w	fp, #1
 800ba3e:	46b8      	mov	r8, r7
 800ba40:	4645      	mov	r5, r8
 800ba42:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba46:	b10b      	cbz	r3, 800ba4c <_vfiprintf_r+0x50>
 800ba48:	2b25      	cmp	r3, #37	; 0x25
 800ba4a:	d154      	bne.n	800baf6 <_vfiprintf_r+0xfa>
 800ba4c:	ebb8 0a07 	subs.w	sl, r8, r7
 800ba50:	d00b      	beq.n	800ba6a <_vfiprintf_r+0x6e>
 800ba52:	4653      	mov	r3, sl
 800ba54:	463a      	mov	r2, r7
 800ba56:	4621      	mov	r1, r4
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7ff ffbc 	bl	800b9d6 <__sfputs_r>
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f000 80c2 	beq.w	800bbe8 <_vfiprintf_r+0x1ec>
 800ba64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba66:	4453      	add	r3, sl
 800ba68:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6a:	f898 3000 	ldrb.w	r3, [r8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 80ba 	beq.w	800bbe8 <_vfiprintf_r+0x1ec>
 800ba74:	2300      	movs	r3, #0
 800ba76:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	9307      	str	r3, [sp, #28]
 800ba82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba86:	931a      	str	r3, [sp, #104]	; 0x68
 800ba88:	46a8      	mov	r8, r5
 800ba8a:	2205      	movs	r2, #5
 800ba8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ba90:	485e      	ldr	r0, [pc, #376]	; (800bc0c <_vfiprintf_r+0x210>)
 800ba92:	f7f4 fbc5 	bl	8000220 <memchr>
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	bb78      	cbnz	r0, 800bafa <_vfiprintf_r+0xfe>
 800ba9a:	06d9      	lsls	r1, r3, #27
 800ba9c:	bf44      	itt	mi
 800ba9e:	2220      	movmi	r2, #32
 800baa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800baa4:	071a      	lsls	r2, r3, #28
 800baa6:	bf44      	itt	mi
 800baa8:	222b      	movmi	r2, #43	; 0x2b
 800baaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800baae:	782a      	ldrb	r2, [r5, #0]
 800bab0:	2a2a      	cmp	r2, #42	; 0x2a
 800bab2:	d02a      	beq.n	800bb0a <_vfiprintf_r+0x10e>
 800bab4:	9a07      	ldr	r2, [sp, #28]
 800bab6:	46a8      	mov	r8, r5
 800bab8:	2000      	movs	r0, #0
 800baba:	250a      	movs	r5, #10
 800babc:	4641      	mov	r1, r8
 800babe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bac2:	3b30      	subs	r3, #48	; 0x30
 800bac4:	2b09      	cmp	r3, #9
 800bac6:	d969      	bls.n	800bb9c <_vfiprintf_r+0x1a0>
 800bac8:	b360      	cbz	r0, 800bb24 <_vfiprintf_r+0x128>
 800baca:	e024      	b.n	800bb16 <_vfiprintf_r+0x11a>
 800bacc:	4b50      	ldr	r3, [pc, #320]	; (800bc10 <_vfiprintf_r+0x214>)
 800bace:	429c      	cmp	r4, r3
 800bad0:	d101      	bne.n	800bad6 <_vfiprintf_r+0xda>
 800bad2:	68b4      	ldr	r4, [r6, #8]
 800bad4:	e7a2      	b.n	800ba1c <_vfiprintf_r+0x20>
 800bad6:	4b4f      	ldr	r3, [pc, #316]	; (800bc14 <_vfiprintf_r+0x218>)
 800bad8:	429c      	cmp	r4, r3
 800bada:	bf08      	it	eq
 800badc:	68f4      	ldreq	r4, [r6, #12]
 800bade:	e79d      	b.n	800ba1c <_vfiprintf_r+0x20>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4630      	mov	r0, r6
 800bae4:	f000 f948 	bl	800bd78 <__swsetup_r>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d09d      	beq.n	800ba28 <_vfiprintf_r+0x2c>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	b01d      	add	sp, #116	; 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	46a8      	mov	r8, r5
 800baf8:	e7a2      	b.n	800ba40 <_vfiprintf_r+0x44>
 800bafa:	4a44      	ldr	r2, [pc, #272]	; (800bc0c <_vfiprintf_r+0x210>)
 800bafc:	1a80      	subs	r0, r0, r2
 800bafe:	fa0b f000 	lsl.w	r0, fp, r0
 800bb02:	4318      	orrs	r0, r3
 800bb04:	9004      	str	r0, [sp, #16]
 800bb06:	4645      	mov	r5, r8
 800bb08:	e7be      	b.n	800ba88 <_vfiprintf_r+0x8c>
 800bb0a:	9a03      	ldr	r2, [sp, #12]
 800bb0c:	1d11      	adds	r1, r2, #4
 800bb0e:	6812      	ldr	r2, [r2, #0]
 800bb10:	9103      	str	r1, [sp, #12]
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	db01      	blt.n	800bb1a <_vfiprintf_r+0x11e>
 800bb16:	9207      	str	r2, [sp, #28]
 800bb18:	e004      	b.n	800bb24 <_vfiprintf_r+0x128>
 800bb1a:	4252      	negs	r2, r2
 800bb1c:	f043 0302 	orr.w	r3, r3, #2
 800bb20:	9207      	str	r2, [sp, #28]
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	f898 3000 	ldrb.w	r3, [r8]
 800bb28:	2b2e      	cmp	r3, #46	; 0x2e
 800bb2a:	d10e      	bne.n	800bb4a <_vfiprintf_r+0x14e>
 800bb2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb30:	2b2a      	cmp	r3, #42	; 0x2a
 800bb32:	d138      	bne.n	800bba6 <_vfiprintf_r+0x1aa>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	1d1a      	adds	r2, r3, #4
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	9203      	str	r2, [sp, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	bfb8      	it	lt
 800bb40:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb44:	f108 0802 	add.w	r8, r8, #2
 800bb48:	9305      	str	r3, [sp, #20]
 800bb4a:	4d33      	ldr	r5, [pc, #204]	; (800bc18 <_vfiprintf_r+0x21c>)
 800bb4c:	f898 1000 	ldrb.w	r1, [r8]
 800bb50:	2203      	movs	r2, #3
 800bb52:	4628      	mov	r0, r5
 800bb54:	f7f4 fb64 	bl	8000220 <memchr>
 800bb58:	b140      	cbz	r0, 800bb6c <_vfiprintf_r+0x170>
 800bb5a:	2340      	movs	r3, #64	; 0x40
 800bb5c:	1b40      	subs	r0, r0, r5
 800bb5e:	fa03 f000 	lsl.w	r0, r3, r0
 800bb62:	9b04      	ldr	r3, [sp, #16]
 800bb64:	4303      	orrs	r3, r0
 800bb66:	f108 0801 	add.w	r8, r8, #1
 800bb6a:	9304      	str	r3, [sp, #16]
 800bb6c:	f898 1000 	ldrb.w	r1, [r8]
 800bb70:	482a      	ldr	r0, [pc, #168]	; (800bc1c <_vfiprintf_r+0x220>)
 800bb72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb76:	2206      	movs	r2, #6
 800bb78:	f108 0701 	add.w	r7, r8, #1
 800bb7c:	f7f4 fb50 	bl	8000220 <memchr>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d037      	beq.n	800bbf4 <_vfiprintf_r+0x1f8>
 800bb84:	4b26      	ldr	r3, [pc, #152]	; (800bc20 <_vfiprintf_r+0x224>)
 800bb86:	bb1b      	cbnz	r3, 800bbd0 <_vfiprintf_r+0x1d4>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	3307      	adds	r3, #7
 800bb8c:	f023 0307 	bic.w	r3, r3, #7
 800bb90:	3308      	adds	r3, #8
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb96:	444b      	add	r3, r9
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	e750      	b.n	800ba3e <_vfiprintf_r+0x42>
 800bb9c:	fb05 3202 	mla	r2, r5, r2, r3
 800bba0:	2001      	movs	r0, #1
 800bba2:	4688      	mov	r8, r1
 800bba4:	e78a      	b.n	800babc <_vfiprintf_r+0xc0>
 800bba6:	2300      	movs	r3, #0
 800bba8:	f108 0801 	add.w	r8, r8, #1
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	250a      	movs	r5, #10
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb8:	3a30      	subs	r2, #48	; 0x30
 800bbba:	2a09      	cmp	r2, #9
 800bbbc:	d903      	bls.n	800bbc6 <_vfiprintf_r+0x1ca>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0c3      	beq.n	800bb4a <_vfiprintf_r+0x14e>
 800bbc2:	9105      	str	r1, [sp, #20]
 800bbc4:	e7c1      	b.n	800bb4a <_vfiprintf_r+0x14e>
 800bbc6:	fb05 2101 	mla	r1, r5, r1, r2
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4680      	mov	r8, r0
 800bbce:	e7f0      	b.n	800bbb2 <_vfiprintf_r+0x1b6>
 800bbd0:	ab03      	add	r3, sp, #12
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	4b13      	ldr	r3, [pc, #76]	; (800bc24 <_vfiprintf_r+0x228>)
 800bbd8:	a904      	add	r1, sp, #16
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f7fe f8a6 	bl	8009d2c <_printf_float>
 800bbe0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bbe4:	4681      	mov	r9, r0
 800bbe6:	d1d5      	bne.n	800bb94 <_vfiprintf_r+0x198>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	065b      	lsls	r3, r3, #25
 800bbec:	f53f af7e 	bmi.w	800baec <_vfiprintf_r+0xf0>
 800bbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf2:	e77d      	b.n	800baf0 <_vfiprintf_r+0xf4>
 800bbf4:	ab03      	add	r3, sp, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <_vfiprintf_r+0x228>)
 800bbfc:	a904      	add	r1, sp, #16
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7fe fb4a 	bl	800a298 <_printf_i>
 800bc04:	e7ec      	b.n	800bbe0 <_vfiprintf_r+0x1e4>
 800bc06:	bf00      	nop
 800bc08:	0800c26c 	.word	0x0800c26c
 800bc0c:	0800c3ac 	.word	0x0800c3ac
 800bc10:	0800c28c 	.word	0x0800c28c
 800bc14:	0800c24c 	.word	0x0800c24c
 800bc18:	0800c3b2 	.word	0x0800c3b2
 800bc1c:	0800c3b6 	.word	0x0800c3b6
 800bc20:	08009d2d 	.word	0x08009d2d
 800bc24:	0800b9d7 	.word	0x0800b9d7

0800bc28 <__sread>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc30:	f000 fa58 	bl	800c0e4 <_read_r>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	bfab      	itete	ge
 800bc38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc3c:	181b      	addge	r3, r3, r0
 800bc3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc42:	bfac      	ite	ge
 800bc44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc46:	81a3      	strhlt	r3, [r4, #12]
 800bc48:	bd10      	pop	{r4, pc}

0800bc4a <__swrite>:
 800bc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4e:	461f      	mov	r7, r3
 800bc50:	898b      	ldrh	r3, [r1, #12]
 800bc52:	05db      	lsls	r3, r3, #23
 800bc54:	4605      	mov	r5, r0
 800bc56:	460c      	mov	r4, r1
 800bc58:	4616      	mov	r6, r2
 800bc5a:	d505      	bpl.n	800bc68 <__swrite+0x1e>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc64:	f000 f9b6 	bl	800bfd4 <_lseek_r>
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	4632      	mov	r2, r6
 800bc76:	463b      	mov	r3, r7
 800bc78:	4628      	mov	r0, r5
 800bc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7e:	f000 b869 	b.w	800bd54 <_write_r>

0800bc82 <__sseek>:
 800bc82:	b510      	push	{r4, lr}
 800bc84:	460c      	mov	r4, r1
 800bc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8a:	f000 f9a3 	bl	800bfd4 <_lseek_r>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	bf15      	itete	ne
 800bc94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc9e:	81a3      	strheq	r3, [r4, #12]
 800bca0:	bf18      	it	ne
 800bca2:	81a3      	strhne	r3, [r4, #12]
 800bca4:	bd10      	pop	{r4, pc}

0800bca6 <__sclose>:
 800bca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcaa:	f000 b8d3 	b.w	800be54 <_close_r>
	...

0800bcb0 <__swbuf_r>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	460e      	mov	r6, r1
 800bcb4:	4614      	mov	r4, r2
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	b118      	cbz	r0, 800bcc2 <__swbuf_r+0x12>
 800bcba:	6983      	ldr	r3, [r0, #24]
 800bcbc:	b90b      	cbnz	r3, 800bcc2 <__swbuf_r+0x12>
 800bcbe:	f7ff faef 	bl	800b2a0 <__sinit>
 800bcc2:	4b21      	ldr	r3, [pc, #132]	; (800bd48 <__swbuf_r+0x98>)
 800bcc4:	429c      	cmp	r4, r3
 800bcc6:	d12a      	bne.n	800bd1e <__swbuf_r+0x6e>
 800bcc8:	686c      	ldr	r4, [r5, #4]
 800bcca:	69a3      	ldr	r3, [r4, #24]
 800bccc:	60a3      	str	r3, [r4, #8]
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	071a      	lsls	r2, r3, #28
 800bcd2:	d52e      	bpl.n	800bd32 <__swbuf_r+0x82>
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	b363      	cbz	r3, 800bd32 <__swbuf_r+0x82>
 800bcd8:	6923      	ldr	r3, [r4, #16]
 800bcda:	6820      	ldr	r0, [r4, #0]
 800bcdc:	1ac0      	subs	r0, r0, r3
 800bcde:	6963      	ldr	r3, [r4, #20]
 800bce0:	b2f6      	uxtb	r6, r6
 800bce2:	4283      	cmp	r3, r0
 800bce4:	4637      	mov	r7, r6
 800bce6:	dc04      	bgt.n	800bcf2 <__swbuf_r+0x42>
 800bce8:	4621      	mov	r1, r4
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 f948 	bl	800bf80 <_fflush_r>
 800bcf0:	bb28      	cbnz	r0, 800bd3e <__swbuf_r+0x8e>
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	60a3      	str	r3, [r4, #8]
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	6022      	str	r2, [r4, #0]
 800bcfe:	701e      	strb	r6, [r3, #0]
 800bd00:	6963      	ldr	r3, [r4, #20]
 800bd02:	3001      	adds	r0, #1
 800bd04:	4283      	cmp	r3, r0
 800bd06:	d004      	beq.n	800bd12 <__swbuf_r+0x62>
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	07db      	lsls	r3, r3, #31
 800bd0c:	d519      	bpl.n	800bd42 <__swbuf_r+0x92>
 800bd0e:	2e0a      	cmp	r6, #10
 800bd10:	d117      	bne.n	800bd42 <__swbuf_r+0x92>
 800bd12:	4621      	mov	r1, r4
 800bd14:	4628      	mov	r0, r5
 800bd16:	f000 f933 	bl	800bf80 <_fflush_r>
 800bd1a:	b190      	cbz	r0, 800bd42 <__swbuf_r+0x92>
 800bd1c:	e00f      	b.n	800bd3e <__swbuf_r+0x8e>
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <__swbuf_r+0x9c>)
 800bd20:	429c      	cmp	r4, r3
 800bd22:	d101      	bne.n	800bd28 <__swbuf_r+0x78>
 800bd24:	68ac      	ldr	r4, [r5, #8]
 800bd26:	e7d0      	b.n	800bcca <__swbuf_r+0x1a>
 800bd28:	4b09      	ldr	r3, [pc, #36]	; (800bd50 <__swbuf_r+0xa0>)
 800bd2a:	429c      	cmp	r4, r3
 800bd2c:	bf08      	it	eq
 800bd2e:	68ec      	ldreq	r4, [r5, #12]
 800bd30:	e7cb      	b.n	800bcca <__swbuf_r+0x1a>
 800bd32:	4621      	mov	r1, r4
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 f81f 	bl	800bd78 <__swsetup_r>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d0cc      	beq.n	800bcd8 <__swbuf_r+0x28>
 800bd3e:	f04f 37ff 	mov.w	r7, #4294967295
 800bd42:	4638      	mov	r0, r7
 800bd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd46:	bf00      	nop
 800bd48:	0800c26c 	.word	0x0800c26c
 800bd4c:	0800c28c 	.word	0x0800c28c
 800bd50:	0800c24c 	.word	0x0800c24c

0800bd54 <_write_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4c07      	ldr	r4, [pc, #28]	; (800bd74 <_write_r+0x20>)
 800bd58:	4605      	mov	r5, r0
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6022      	str	r2, [r4, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	f7fb f999 	bl	800709a <_write>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_write_r+0x1e>
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_write_r+0x1e>
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	200004ec 	.word	0x200004ec

0800bd78 <__swsetup_r>:
 800bd78:	4b32      	ldr	r3, [pc, #200]	; (800be44 <__swsetup_r+0xcc>)
 800bd7a:	b570      	push	{r4, r5, r6, lr}
 800bd7c:	681d      	ldr	r5, [r3, #0]
 800bd7e:	4606      	mov	r6, r0
 800bd80:	460c      	mov	r4, r1
 800bd82:	b125      	cbz	r5, 800bd8e <__swsetup_r+0x16>
 800bd84:	69ab      	ldr	r3, [r5, #24]
 800bd86:	b913      	cbnz	r3, 800bd8e <__swsetup_r+0x16>
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f7ff fa89 	bl	800b2a0 <__sinit>
 800bd8e:	4b2e      	ldr	r3, [pc, #184]	; (800be48 <__swsetup_r+0xd0>)
 800bd90:	429c      	cmp	r4, r3
 800bd92:	d10f      	bne.n	800bdb4 <__swsetup_r+0x3c>
 800bd94:	686c      	ldr	r4, [r5, #4]
 800bd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	0715      	lsls	r5, r2, #28
 800bd9e:	d42c      	bmi.n	800bdfa <__swsetup_r+0x82>
 800bda0:	06d0      	lsls	r0, r2, #27
 800bda2:	d411      	bmi.n	800bdc8 <__swsetup_r+0x50>
 800bda4:	2209      	movs	r2, #9
 800bda6:	6032      	str	r2, [r6, #0]
 800bda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb2:	e03e      	b.n	800be32 <__swsetup_r+0xba>
 800bdb4:	4b25      	ldr	r3, [pc, #148]	; (800be4c <__swsetup_r+0xd4>)
 800bdb6:	429c      	cmp	r4, r3
 800bdb8:	d101      	bne.n	800bdbe <__swsetup_r+0x46>
 800bdba:	68ac      	ldr	r4, [r5, #8]
 800bdbc:	e7eb      	b.n	800bd96 <__swsetup_r+0x1e>
 800bdbe:	4b24      	ldr	r3, [pc, #144]	; (800be50 <__swsetup_r+0xd8>)
 800bdc0:	429c      	cmp	r4, r3
 800bdc2:	bf08      	it	eq
 800bdc4:	68ec      	ldreq	r4, [r5, #12]
 800bdc6:	e7e6      	b.n	800bd96 <__swsetup_r+0x1e>
 800bdc8:	0751      	lsls	r1, r2, #29
 800bdca:	d512      	bpl.n	800bdf2 <__swsetup_r+0x7a>
 800bdcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdce:	b141      	cbz	r1, 800bde2 <__swsetup_r+0x6a>
 800bdd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	d002      	beq.n	800bdde <__swsetup_r+0x66>
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7fd fe6b 	bl	8009ab4 <_free_r>
 800bdde:	2300      	movs	r3, #0
 800bde0:	6363      	str	r3, [r4, #52]	; 0x34
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	2300      	movs	r3, #0
 800bdec:	6063      	str	r3, [r4, #4]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f043 0308 	orr.w	r3, r3, #8
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	b94b      	cbnz	r3, 800be12 <__swsetup_r+0x9a>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be08:	d003      	beq.n	800be12 <__swsetup_r+0x9a>
 800be0a:	4621      	mov	r1, r4
 800be0c:	4630      	mov	r0, r6
 800be0e:	f000 f917 	bl	800c040 <__smakebuf_r>
 800be12:	89a2      	ldrh	r2, [r4, #12]
 800be14:	f012 0301 	ands.w	r3, r2, #1
 800be18:	d00c      	beq.n	800be34 <__swsetup_r+0xbc>
 800be1a:	2300      	movs	r3, #0
 800be1c:	60a3      	str	r3, [r4, #8]
 800be1e:	6963      	ldr	r3, [r4, #20]
 800be20:	425b      	negs	r3, r3
 800be22:	61a3      	str	r3, [r4, #24]
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	b953      	cbnz	r3, 800be3e <__swsetup_r+0xc6>
 800be28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800be30:	d1ba      	bne.n	800bda8 <__swsetup_r+0x30>
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	0792      	lsls	r2, r2, #30
 800be36:	bf58      	it	pl
 800be38:	6963      	ldrpl	r3, [r4, #20]
 800be3a:	60a3      	str	r3, [r4, #8]
 800be3c:	e7f2      	b.n	800be24 <__swsetup_r+0xac>
 800be3e:	2000      	movs	r0, #0
 800be40:	e7f7      	b.n	800be32 <__swsetup_r+0xba>
 800be42:	bf00      	nop
 800be44:	2000000c 	.word	0x2000000c
 800be48:	0800c26c 	.word	0x0800c26c
 800be4c:	0800c28c 	.word	0x0800c28c
 800be50:	0800c24c 	.word	0x0800c24c

0800be54 <_close_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4c06      	ldr	r4, [pc, #24]	; (800be70 <_close_r+0x1c>)
 800be58:	2300      	movs	r3, #0
 800be5a:	4605      	mov	r5, r0
 800be5c:	4608      	mov	r0, r1
 800be5e:	6023      	str	r3, [r4, #0]
 800be60:	f7fb fb5f 	bl	8007522 <_close>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_close_r+0x1a>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_close_r+0x1a>
 800be6c:	602b      	str	r3, [r5, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	200004ec 	.word	0x200004ec

0800be74 <__sflush_r>:
 800be74:	898a      	ldrh	r2, [r1, #12]
 800be76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7a:	4605      	mov	r5, r0
 800be7c:	0710      	lsls	r0, r2, #28
 800be7e:	460c      	mov	r4, r1
 800be80:	d458      	bmi.n	800bf34 <__sflush_r+0xc0>
 800be82:	684b      	ldr	r3, [r1, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	dc05      	bgt.n	800be94 <__sflush_r+0x20>
 800be88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	dc02      	bgt.n	800be94 <__sflush_r+0x20>
 800be8e:	2000      	movs	r0, #0
 800be90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be96:	2e00      	cmp	r6, #0
 800be98:	d0f9      	beq.n	800be8e <__sflush_r+0x1a>
 800be9a:	2300      	movs	r3, #0
 800be9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bea0:	682f      	ldr	r7, [r5, #0]
 800bea2:	6a21      	ldr	r1, [r4, #32]
 800bea4:	602b      	str	r3, [r5, #0]
 800bea6:	d032      	beq.n	800bf0e <__sflush_r+0x9a>
 800bea8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	075a      	lsls	r2, r3, #29
 800beae:	d505      	bpl.n	800bebc <__sflush_r+0x48>
 800beb0:	6863      	ldr	r3, [r4, #4]
 800beb2:	1ac0      	subs	r0, r0, r3
 800beb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800beb6:	b10b      	cbz	r3, 800bebc <__sflush_r+0x48>
 800beb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beba:	1ac0      	subs	r0, r0, r3
 800bebc:	2300      	movs	r3, #0
 800bebe:	4602      	mov	r2, r0
 800bec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bec2:	6a21      	ldr	r1, [r4, #32]
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b0      	blx	r6
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	d106      	bne.n	800bedc <__sflush_r+0x68>
 800bece:	6829      	ldr	r1, [r5, #0]
 800bed0:	291d      	cmp	r1, #29
 800bed2:	d848      	bhi.n	800bf66 <__sflush_r+0xf2>
 800bed4:	4a29      	ldr	r2, [pc, #164]	; (800bf7c <__sflush_r+0x108>)
 800bed6:	40ca      	lsrs	r2, r1
 800bed8:	07d6      	lsls	r6, r2, #31
 800beda:	d544      	bpl.n	800bf66 <__sflush_r+0xf2>
 800bedc:	2200      	movs	r2, #0
 800bede:	6062      	str	r2, [r4, #4]
 800bee0:	04d9      	lsls	r1, r3, #19
 800bee2:	6922      	ldr	r2, [r4, #16]
 800bee4:	6022      	str	r2, [r4, #0]
 800bee6:	d504      	bpl.n	800bef2 <__sflush_r+0x7e>
 800bee8:	1c42      	adds	r2, r0, #1
 800beea:	d101      	bne.n	800bef0 <__sflush_r+0x7c>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b903      	cbnz	r3, 800bef2 <__sflush_r+0x7e>
 800bef0:	6560      	str	r0, [r4, #84]	; 0x54
 800bef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bef4:	602f      	str	r7, [r5, #0]
 800bef6:	2900      	cmp	r1, #0
 800bef8:	d0c9      	beq.n	800be8e <__sflush_r+0x1a>
 800befa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800befe:	4299      	cmp	r1, r3
 800bf00:	d002      	beq.n	800bf08 <__sflush_r+0x94>
 800bf02:	4628      	mov	r0, r5
 800bf04:	f7fd fdd6 	bl	8009ab4 <_free_r>
 800bf08:	2000      	movs	r0, #0
 800bf0a:	6360      	str	r0, [r4, #52]	; 0x34
 800bf0c:	e7c0      	b.n	800be90 <__sflush_r+0x1c>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b0      	blx	r6
 800bf14:	1c41      	adds	r1, r0, #1
 800bf16:	d1c8      	bne.n	800beaa <__sflush_r+0x36>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0c5      	beq.n	800beaa <__sflush_r+0x36>
 800bf1e:	2b1d      	cmp	r3, #29
 800bf20:	d001      	beq.n	800bf26 <__sflush_r+0xb2>
 800bf22:	2b16      	cmp	r3, #22
 800bf24:	d101      	bne.n	800bf2a <__sflush_r+0xb6>
 800bf26:	602f      	str	r7, [r5, #0]
 800bf28:	e7b1      	b.n	800be8e <__sflush_r+0x1a>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	e7ad      	b.n	800be90 <__sflush_r+0x1c>
 800bf34:	690f      	ldr	r7, [r1, #16]
 800bf36:	2f00      	cmp	r7, #0
 800bf38:	d0a9      	beq.n	800be8e <__sflush_r+0x1a>
 800bf3a:	0793      	lsls	r3, r2, #30
 800bf3c:	680e      	ldr	r6, [r1, #0]
 800bf3e:	bf08      	it	eq
 800bf40:	694b      	ldreq	r3, [r1, #20]
 800bf42:	600f      	str	r7, [r1, #0]
 800bf44:	bf18      	it	ne
 800bf46:	2300      	movne	r3, #0
 800bf48:	eba6 0807 	sub.w	r8, r6, r7
 800bf4c:	608b      	str	r3, [r1, #8]
 800bf4e:	f1b8 0f00 	cmp.w	r8, #0
 800bf52:	dd9c      	ble.n	800be8e <__sflush_r+0x1a>
 800bf54:	4643      	mov	r3, r8
 800bf56:	463a      	mov	r2, r7
 800bf58:	6a21      	ldr	r1, [r4, #32]
 800bf5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	47b0      	blx	r6
 800bf60:	2800      	cmp	r0, #0
 800bf62:	dc06      	bgt.n	800bf72 <__sflush_r+0xfe>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	e78e      	b.n	800be90 <__sflush_r+0x1c>
 800bf72:	4407      	add	r7, r0
 800bf74:	eba8 0800 	sub.w	r8, r8, r0
 800bf78:	e7e9      	b.n	800bf4e <__sflush_r+0xda>
 800bf7a:	bf00      	nop
 800bf7c:	20400001 	.word	0x20400001

0800bf80 <_fflush_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	690b      	ldr	r3, [r1, #16]
 800bf84:	4605      	mov	r5, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	b1db      	cbz	r3, 800bfc2 <_fflush_r+0x42>
 800bf8a:	b118      	cbz	r0, 800bf94 <_fflush_r+0x14>
 800bf8c:	6983      	ldr	r3, [r0, #24]
 800bf8e:	b90b      	cbnz	r3, 800bf94 <_fflush_r+0x14>
 800bf90:	f7ff f986 	bl	800b2a0 <__sinit>
 800bf94:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <_fflush_r+0x48>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d109      	bne.n	800bfae <_fflush_r+0x2e>
 800bf9a:	686c      	ldr	r4, [r5, #4]
 800bf9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfa0:	b17b      	cbz	r3, 800bfc2 <_fflush_r+0x42>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfaa:	f7ff bf63 	b.w	800be74 <__sflush_r>
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <_fflush_r+0x4c>)
 800bfb0:	429c      	cmp	r4, r3
 800bfb2:	d101      	bne.n	800bfb8 <_fflush_r+0x38>
 800bfb4:	68ac      	ldr	r4, [r5, #8]
 800bfb6:	e7f1      	b.n	800bf9c <_fflush_r+0x1c>
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <_fflush_r+0x50>)
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	bf08      	it	eq
 800bfbe:	68ec      	ldreq	r4, [r5, #12]
 800bfc0:	e7ec      	b.n	800bf9c <_fflush_r+0x1c>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	bd38      	pop	{r3, r4, r5, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0800c26c 	.word	0x0800c26c
 800bfcc:	0800c28c 	.word	0x0800c28c
 800bfd0:	0800c24c 	.word	0x0800c24c

0800bfd4 <_lseek_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4c07      	ldr	r4, [pc, #28]	; (800bff4 <_lseek_r+0x20>)
 800bfd8:	4605      	mov	r5, r0
 800bfda:	4608      	mov	r0, r1
 800bfdc:	4611      	mov	r1, r2
 800bfde:	2200      	movs	r2, #0
 800bfe0:	6022      	str	r2, [r4, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f7fb fac4 	bl	8007570 <_lseek>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_lseek_r+0x1e>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_lseek_r+0x1e>
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	200004ec 	.word	0x200004ec

0800bff8 <__swhatbuf_r>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	460e      	mov	r6, r1
 800bffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c000:	2900      	cmp	r1, #0
 800c002:	b096      	sub	sp, #88	; 0x58
 800c004:	4614      	mov	r4, r2
 800c006:	461d      	mov	r5, r3
 800c008:	da07      	bge.n	800c01a <__swhatbuf_r+0x22>
 800c00a:	2300      	movs	r3, #0
 800c00c:	602b      	str	r3, [r5, #0]
 800c00e:	89b3      	ldrh	r3, [r6, #12]
 800c010:	061a      	lsls	r2, r3, #24
 800c012:	d410      	bmi.n	800c036 <__swhatbuf_r+0x3e>
 800c014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c018:	e00e      	b.n	800c038 <__swhatbuf_r+0x40>
 800c01a:	466a      	mov	r2, sp
 800c01c:	f000 f882 	bl	800c124 <_fstat_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	dbf2      	blt.n	800c00a <__swhatbuf_r+0x12>
 800c024:	9a01      	ldr	r2, [sp, #4]
 800c026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c02a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c02e:	425a      	negs	r2, r3
 800c030:	415a      	adcs	r2, r3
 800c032:	602a      	str	r2, [r5, #0]
 800c034:	e7ee      	b.n	800c014 <__swhatbuf_r+0x1c>
 800c036:	2340      	movs	r3, #64	; 0x40
 800c038:	2000      	movs	r0, #0
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	b016      	add	sp, #88	; 0x58
 800c03e:	bd70      	pop	{r4, r5, r6, pc}

0800c040 <__smakebuf_r>:
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c044:	079d      	lsls	r5, r3, #30
 800c046:	4606      	mov	r6, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	d507      	bpl.n	800c05c <__smakebuf_r+0x1c>
 800c04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	2301      	movs	r3, #1
 800c056:	6163      	str	r3, [r4, #20]
 800c058:	b002      	add	sp, #8
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	ab01      	add	r3, sp, #4
 800c05e:	466a      	mov	r2, sp
 800c060:	f7ff ffca 	bl	800bff8 <__swhatbuf_r>
 800c064:	9900      	ldr	r1, [sp, #0]
 800c066:	4605      	mov	r5, r0
 800c068:	4630      	mov	r0, r6
 800c06a:	f7fd fd71 	bl	8009b50 <_malloc_r>
 800c06e:	b948      	cbnz	r0, 800c084 <__smakebuf_r+0x44>
 800c070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c074:	059a      	lsls	r2, r3, #22
 800c076:	d4ef      	bmi.n	800c058 <__smakebuf_r+0x18>
 800c078:	f023 0303 	bic.w	r3, r3, #3
 800c07c:	f043 0302 	orr.w	r3, r3, #2
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	e7e3      	b.n	800c04c <__smakebuf_r+0xc>
 800c084:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <__smakebuf_r+0x7c>)
 800c086:	62b3      	str	r3, [r6, #40]	; 0x28
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	6020      	str	r0, [r4, #0]
 800c08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	9b00      	ldr	r3, [sp, #0]
 800c094:	6163      	str	r3, [r4, #20]
 800c096:	9b01      	ldr	r3, [sp, #4]
 800c098:	6120      	str	r0, [r4, #16]
 800c09a:	b15b      	cbz	r3, 800c0b4 <__smakebuf_r+0x74>
 800c09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 f851 	bl	800c148 <_isatty_r>
 800c0a6:	b128      	cbz	r0, 800c0b4 <__smakebuf_r+0x74>
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	f023 0303 	bic.w	r3, r3, #3
 800c0ae:	f043 0301 	orr.w	r3, r3, #1
 800c0b2:	81a3      	strh	r3, [r4, #12]
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	431d      	orrs	r5, r3
 800c0b8:	81a5      	strh	r5, [r4, #12]
 800c0ba:	e7cd      	b.n	800c058 <__smakebuf_r+0x18>
 800c0bc:	0800b269 	.word	0x0800b269

0800c0c0 <__ascii_mbtowc>:
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	b901      	cbnz	r1, 800c0c6 <__ascii_mbtowc+0x6>
 800c0c4:	a901      	add	r1, sp, #4
 800c0c6:	b142      	cbz	r2, 800c0da <__ascii_mbtowc+0x1a>
 800c0c8:	b14b      	cbz	r3, 800c0de <__ascii_mbtowc+0x1e>
 800c0ca:	7813      	ldrb	r3, [r2, #0]
 800c0cc:	600b      	str	r3, [r1, #0]
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	1c10      	adds	r0, r2, #0
 800c0d2:	bf18      	it	ne
 800c0d4:	2001      	movne	r0, #1
 800c0d6:	b002      	add	sp, #8
 800c0d8:	4770      	bx	lr
 800c0da:	4610      	mov	r0, r2
 800c0dc:	e7fb      	b.n	800c0d6 <__ascii_mbtowc+0x16>
 800c0de:	f06f 0001 	mvn.w	r0, #1
 800c0e2:	e7f8      	b.n	800c0d6 <__ascii_mbtowc+0x16>

0800c0e4 <_read_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4c07      	ldr	r4, [pc, #28]	; (800c104 <_read_r+0x20>)
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6022      	str	r2, [r4, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f7fb f9f8 	bl	80074e8 <_read>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	d102      	bne.n	800c102 <_read_r+0x1e>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	b103      	cbz	r3, 800c102 <_read_r+0x1e>
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	200004ec 	.word	0x200004ec

0800c108 <__ascii_wctomb>:
 800c108:	b149      	cbz	r1, 800c11e <__ascii_wctomb+0x16>
 800c10a:	2aff      	cmp	r2, #255	; 0xff
 800c10c:	bf85      	ittet	hi
 800c10e:	238a      	movhi	r3, #138	; 0x8a
 800c110:	6003      	strhi	r3, [r0, #0]
 800c112:	700a      	strbls	r2, [r1, #0]
 800c114:	f04f 30ff 	movhi.w	r0, #4294967295
 800c118:	bf98      	it	ls
 800c11a:	2001      	movls	r0, #1
 800c11c:	4770      	bx	lr
 800c11e:	4608      	mov	r0, r1
 800c120:	4770      	bx	lr
	...

0800c124 <_fstat_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4c07      	ldr	r4, [pc, #28]	; (800c144 <_fstat_r+0x20>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4605      	mov	r5, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	4611      	mov	r1, r2
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	f7fb fa02 	bl	800753a <_fstat>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d102      	bne.n	800c140 <_fstat_r+0x1c>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	b103      	cbz	r3, 800c140 <_fstat_r+0x1c>
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	200004ec 	.word	0x200004ec

0800c148 <_isatty_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4c06      	ldr	r4, [pc, #24]	; (800c164 <_isatty_r+0x1c>)
 800c14c:	2300      	movs	r3, #0
 800c14e:	4605      	mov	r5, r0
 800c150:	4608      	mov	r0, r1
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	f7fb fa01 	bl	800755a <_isatty>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_isatty_r+0x1a>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_isatty_r+0x1a>
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	200004ec 	.word	0x200004ec

0800c168 <_init>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	bf00      	nop
 800c16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16e:	bc08      	pop	{r3}
 800c170:	469e      	mov	lr, r3
 800c172:	4770      	bx	lr

0800c174 <_fini>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	bf00      	nop
 800c178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17a:	bc08      	pop	{r3}
 800c17c:	469e      	mov	lr, r3
 800c17e:	4770      	bx	lr
